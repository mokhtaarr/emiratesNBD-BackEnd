using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DAL.Migrations
{
    public partial class EmiratesMigration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "An_AnimalDeath",
                columns: table => new
                {
                    AnDeathId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_AnimalDeath", x => x.AnDeathId);
                });

            migrationBuilder.CreateTable(
                name: "An_AnimalType",
                columns: table => new
                {
                    AnTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ParentAnTypeId = table.Column<int>(type: "int", nullable: true),
                    AnTypeType = table.Column<byte>(type: "tinyint", nullable: true),
                    AnTypeLevel = table.Column<int>(type: "int", nullable: true),
                    AnTypeImage = table.Column<byte[]>(type: "image", nullable: true),
                    CurrentTrNo = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_AnimalType", x => x.AnTypeId);
                });

            migrationBuilder.CreateTable(
                name: "An_AnimalWeightRate",
                columns: table => new
                {
                    AnWeightRateId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DailyMeals = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_AnimalWeightRate", x => x.AnWeightRateId);
                });

            migrationBuilder.CreateTable(
                name: "An_Medicin",
                columns: table => new
                {
                    AnMidicinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shots = table.Column<byte>(type: "tinyint", nullable: true),
                    AnimalAge = table.Column<int>(type: "int", nullable: true, comment: "Days"),
                    Weight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_Medicin", x => x.AnMidicinId);
                });

            migrationBuilder.CreateTable(
                name: "An_NewBorn",
                columns: table => new
                {
                    AnBornId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_NewBorn", x => x.AnBornId);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetAddDoc",
                columns: table => new
                {
                    AssetAddId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetAddDoc", x => x.AssetAddId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetCategory",
                columns: table => new
                {
                    AssetCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CatCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ParentAssetCatId = table.Column<int>(type: "int", nullable: true),
                    AssetCatType = table.Column<byte>(type: "tinyint", nullable: true),
                    AssetCatLevel = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetCategory", x => x.AssetCatId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetCategory_Asset_AssetCategory",
                        column: x => x.ParentAssetCatId,
                        principalTable: "Asset_AssetCategory",
                        principalColumn: "AssetCatId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetDeductDoc",
                columns: table => new
                {
                    AssetDeductId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    DebitAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetDeductDoc", x => x.AssetDeductId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetDeliverDoc",
                columns: table => new
                {
                    DeliverAssetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetCustodyDoc", x => x.DeliverAssetId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetFixDoc",
                columns: table => new
                {
                    FixAssetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetFixDoc", x => x.FixAssetId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetMoveDoc",
                columns: table => new
                {
                    AssetMovId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetMoveDoc", x => x.AssetMovId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetReceiveDoc",
                columns: table => new
                {
                    ReceiveAssetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetReceiveDoc", x => x.ReceiveAssetId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetSettings",
                columns: table => new
                {
                    AssetSetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeprMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetSettings", x => x.AssetSetId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_DepreciationDoc",
                columns: table => new
                {
                    DeprDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDeprVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_DepreciationDoc", x => x.DeprDocId);
                });

            migrationBuilder.CreateTable(
                name: "Asset_Termination",
                columns: table => new
                {
                    AssetTerminatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DeprValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitAccountId = table.Column<int>(type: "int", nullable: true),
                    ProfitLossAccountId = table.Column<int>(type: "int", nullable: true),
                    DebitCostcenterId = table.Column<int>(type: "int", nullable: true),
                    CreditCostCenterId = table.Column<int>(type: "int", nullable: true),
                    DebitAssetAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditAssetAccountId = table.Column<int>(type: "int", nullable: true),
                    DebitAccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ProfitLossAccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_Termination", x => x.AssetTerminatId);
                });

            migrationBuilder.CreateTable(
                name: "BNk_BankNotice",
                columns: table => new
                {
                    BankNoticId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    KeeperNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    IsReceived = table.Column<bool>(type: "bit", nullable: true),
                    RefNo = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TotalCheques = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaperDirection = table.Column<bool>(type: "bit", nullable: true),
                    TranType = table.Column<byte>(type: "tinyint", nullable: true),
                    BankExpenses = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BNk_BankNotice", x => x.BankNoticId);
                });

            migrationBuilder.CreateTable(
                name: "Cal_AccountingFix",
                columns: table => new
                {
                    AccRecalcId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_AccountingFix", x => x.AccRecalcId);
                });

            migrationBuilder.CreateTable(
                name: "Cal_Budget",
                columns: table => new
                {
                    BudgetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    Aid = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    FromFinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    ToFinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    ScinarioDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_Budget", x => x.BudgetId);
                });

            migrationBuilder.CreateTable(
                name: "Cal_CostCenters",
                columns: table => new
                {
                    CostCenterId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CostCenterCode = table.Column<int>(type: "int", nullable: true),
                    CostCenterNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CostCenterNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    mainCostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterLevel = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((1))"),
                    CenterCategory = table.Column<byte>(type: "tinyint", nullable: true),
                    CostType = table.Column<byte>(type: "tinyint", nullable: true),
                    CashFlowList = table.Column<byte>(type: "tinyint", nullable: true),
                    Aid = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    FunctionDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    FunctionDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PreviousBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Parent = table.Column<int>(type: "int", nullable: true),
                    MonthlybalanceId = table.Column<int>(type: "int", nullable: true),
                    jopDesc = table.Column<byte>(type: "tinyint", nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    AccCostCenterId = table.Column<int>(type: "int", nullable: true),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    CostCenterTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_CostCenter", x => x.CostCenterId);
                });

            migrationBuilder.CreateTable(
                name: "Cal_PostOrder",
                columns: table => new
                {
                    PostQueId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    IsHelpAcc = table.Column<bool>(type: "bit", nullable: true),
                    HelpAccId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    IsHelpCostCenter = table.Column<bool>(type: "bit", nullable: true),
                    HelpCostCenterId = table.Column<int>(type: "int", nullable: true),
                    HelpCostCenterType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    OriginalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ModifiedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalaceLocalBeforDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalaceLocalBeforCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalanceLocalAfterDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalanceLocalAfterCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalaceCurrencyBeforDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalaceCurrencyBeforCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalanceCurrencyAfterDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalanceCurrencyAfterCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OpenBalancDepCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenBalancCredCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalancLocalBeforDebCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalancLocalBeforCredCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalancLocalAfterDebCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalancLocalAfterCredCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OpenBalancDepCrncyCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenBalancCredCrncyCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalancCrencyBeforDebtCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalancCrencyBeforCredCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalancCrencyAftrDebtCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BalancCrencyAftrCredCostCentr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    OrderId = table.Column<int>(type: "int", nullable: true),
                    IsOpenningTerm = table.Column<bool>(type: "bit", nullable: true),
                    DetailedTableEntityId = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_PostOrder", x => x.PostQueId);
                });

            migrationBuilder.CreateTable(
                name: "Cal_QueueOrder",
                columns: table => new
                {
                    OrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    QueueOrder = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_QueueOrder", x => x.OrderId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildingDegree",
                columns: table => new
                {
                    BuildDegreeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildingDegree", x => x.BuildDegreeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildingExploitation",
                columns: table => new
                {
                    BuildExploitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildingExploitation", x => x.BuildExploitId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildingFinishingLevel",
                columns: table => new
                {
                    BuildFinishLevelId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildingFinishingLevel", x => x.BuildFinishLevelId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildingInsuranceStatus",
                columns: table => new
                {
                    BuildInsurStatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildingInsuranceStatus", x => x.BuildInsurStatId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildingStatus",
                columns: table => new
                {
                    BuildStatusId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildingStatus", x => x.BuildStatusId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildingTypes",
                columns: table => new
                {
                    BuildTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildingTypes", x => x.BuildTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildOccupTypes",
                columns: table => new
                {
                    BuildOccupTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildOccupTypes", x => x.BuildOccupTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildPermitActiv",
                columns: table => new
                {
                    BuildPermitActivityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildPermitActiv", x => x.BuildPermitActivityId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_BuildPerspective",
                columns: table => new
                {
                    BuildPerspectiveId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_BuildPerspective", x => x.BuildPerspectiveId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_Colors",
                columns: table => new
                {
                    ColorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    Color = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Colors", x => x.ColorId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_ContractType",
                columns: table => new
                {
                    ContractTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_ContractType", x => x.ContractTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_ElectInsurStatus",
                columns: table => new
                {
                    ElectInsurStatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_ElectInsurStatus", x => x.ElectInsurStatId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_Explanations",
                columns: table => new
                {
                    ExplanationId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Explanations", x => x.ExplanationId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_FurnitAndEqupmnts",
                columns: table => new
                {
                    EquipmentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_FurnitAndEqupmnts", x => x.EquipmentId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_InstallmentTemps",
                columns: table => new
                {
                    InstallTempId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    IsPercent = table.Column<bool>(type: "bit", nullable: true),
                    YearsCount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CanEditInstallManual = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsRental = table.Column<bool>(type: "bit", nullable: true),
                    AutoRenew = table.Column<bool>(type: "bit", nullable: true),
                    AddValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EveryPayCount = table.Column<int>(type: "int", nullable: true),
                    AfterPeriod = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_InstallmentTemps", x => x.InstallTempId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_InsuranceCases",
                columns: table => new
                {
                    InsurCaseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_InsuranceCases", x => x.InsurCaseId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_InsurCovTypes",
                columns: table => new
                {
                    InsurCovTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CoverPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_InsurCovTypes", x => x.InsurCovTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandPermtActiv",
                columns: table => new
                {
                    LandPermitActivId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandPermtActiv", x => x.LandPermitActivId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandPositions",
                columns: table => new
                {
                    LandPosId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandPositions", x => x.LandPosId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandRetainRsons",
                columns: table => new
                {
                    LandRetainResId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandRetainRsons", x => x.LandRetainResId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_Lands",
                columns: table => new
                {
                    LandId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    LandNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Landarea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BuildingArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LandMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BuildingMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LandSatusId = table.Column<int>(type: "int", nullable: true),
                    LandTypeId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Code_Lands", x => x.LandId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandStatus",
                columns: table => new
                {
                    LandSatusId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandStatus", x => x.LandSatusId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandTypes",
                columns: table => new
                {
                    LandTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandTypes", x => x.LandTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_MaintenanceTypes",
                columns: table => new
                {
                    MaintainTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_MaintenanceTypes", x => x.MaintainTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_NonRenewalReasons",
                columns: table => new
                {
                    NonRenewResId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_NonRenewalReasons", x => x.NonRenewResId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_OperatingOrders",
                columns: table => new
                {
                    OperOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_OperatingOrders", x => x.OperOrderId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_OwnershipBonds",
                columns: table => new
                {
                    OwnShipBondId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_OwnershipBonds", x => x.OwnShipBondId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_PackingSize",
                columns: table => new
                {
                    PackSizeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    Length = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Width = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Hieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LengthMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LengthCentimeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LengthMillimeters = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WidthMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WidthCentimeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WidthMillimeters = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HeightMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HeightCentimeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HeightMillimeters = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchasePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Wheight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_PackingSize", x => x.PackSizeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_Parkings",
                columns: table => new
                {
                    ParkingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    AppartId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CarCapacity = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Parkings", x => x.ParkingId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_PaymentTerms",
                columns: table => new
                {
                    PaymentTermId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_PaymentTerms", x => x.PaymentTermId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_PaymentTypes",
                columns: table => new
                {
                    PayTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PayRepeat = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_PaymentTypes", x => x.PayTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_PostalCodes",
                columns: table => new
                {
                    PostalCodId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_PostalCodes", x => x.PostalCodId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_RentCase",
                columns: table => new
                {
                    RentCaseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_RentCase", x => x.RentCaseId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_SavingFiles",
                columns: table => new
                {
                    SavfilesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShelvId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_SavingFiles", x => x.SavfilesId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_Services",
                columns: table => new
                {
                    ServiceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Services", x => x.ServiceId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_Shelves",
                columns: table => new
                {
                    ShelvId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    ParentShelvId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Shelves", x => x.ShelvId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_SubRegion",
                columns: table => new
                {
                    SubRegionClassId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    NameA = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    NameE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    Lat = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    Lng = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    MinZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    MaxZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CurrentZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_SubRegion", x => x.SubRegionClassId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_TaskTypes",
                columns: table => new
                {
                    TaskTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_TaskTypes", x => x.TaskTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_TrmsModifiRsons",
                columns: table => new
                {
                    TrmModResId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_TrmsModifiRsons", x => x.TrmModResId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitDegree",
                columns: table => new
                {
                    UnitDegreeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitDegree", x => x.UnitDegreeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitExploitation",
                columns: table => new
                {
                    UnitExploitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitExploitation", x => x.UnitExploitId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitFinishingLevel",
                columns: table => new
                {
                    UnFinLevelId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    FinishMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitFinishingLevel", x => x.UnFinLevelId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitInsuranceStatus",
                columns: table => new
                {
                    UnitInsurstatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitInsuranceStatus", x => x.UnitInsurstatId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitOccupancyTypes",
                columns: table => new
                {
                    UnitOccuTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitOccupancyTypes", x => x.UnitOccuTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitPermittedActivity",
                columns: table => new
                {
                    UnitPermitActivId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitPermittedActivity", x => x.UnitPermitActivId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitPerspective",
                columns: table => new
                {
                    UnitPerspectiveId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitPerspective", x => x.UnitPerspectiveId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitServices",
                columns: table => new
                {
                    UnitServId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitServices", x => x.UnitServId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitStatus",
                columns: table => new
                {
                    UnitStatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitStatus", x => x.UnitStatId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UnitTypes",
                columns: table => new
                {
                    UnittypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UnitTypes", x => x.UnittypeId);
                });

            migrationBuilder.CreateTable(
                name: "Cod_UntMntanItmBylndownrTnant",
                columns: table => new
                {
                    UnMantItmId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_UntMntanItmBylndownrTnant", x => x.UnMantItmId);
                });

            migrationBuilder.CreateTable(
                name: "Code_SubUnitTypes",
                columns: table => new
                {
                    SubUnittypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CalcByMeter = table.Column<bool>(type: "bit", nullable: true),
                    TotalUnitMeters = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Code_SubUnitTypes", x => x.SubUnittypeId);
                });

            migrationBuilder.CreateTable(
                name: "Contr_InstallMent",
                columns: table => new
                {
                    InstallId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    OtherSource = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TableStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TableEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InstallmentsCount = table.Column<int>(type: "int", nullable: true),
                    PaidInstallCount = table.Column<int>(type: "int", nullable: true),
                    NotPaidInstallCount = table.Column<int>(type: "int", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contr_InstallMent", x => x.InstallId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_LeadsMembers",
                columns: table => new
                {
                    LeadMemberId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TeamMemberId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_LeadsMembers", x => x.LeadMemberId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_LeadTypes",
                columns: table => new
                {
                    LeadTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LeadTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LeadTypeName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    LeadTypeName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    LeadTypeDes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreayedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_LeadTypes", x => x.LeadTypeId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_MarketChannels",
                columns: table => new
                {
                    MarketChannelId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ChannelCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ChannelName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ChannelName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_MarketChannels", x => x.MarketChannelId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_SalesPlan",
                columns: table => new
                {
                    SalesPlanId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TeamMemberId = table.Column<int>(type: "int", nullable: true),
                    PlanName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PlanName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_SalesPlan", x => x.SalesPlanId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_SurveyMemberJoin",
                columns: table => new
                {
                    SurveyVisitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SurveyId = table.Column<int>(type: "int", nullable: true),
                    TeamMemberId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_SurveyMemberJoin", x => x.SurveyVisitId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_Teams",
                columns: table => new
                {
                    TeamId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TeamCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TeamName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TeamName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    Capacaty = table.Column<int>(type: "int", nullable: true),
                    DefaultTarget = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Teams", x => x.TeamId);
                });

            migrationBuilder.CreateTable(
                name: "CRM_VisitTypes",
                columns: table => new
                {
                    VisitTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VisitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VisitName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VisitName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VisitPeriority = table.Column<byte>(type: "tinyint", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_VisitTypes", x => x.VisitTypeId);
                });

            migrationBuilder.CreateTable(
                name: "G_PrintLog",
                columns: table => new
                {
                    PrintLogId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserID = table.Column<int>(type: "int", nullable: true),
                    PrintTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DocName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_PrintLog", x => x.PrintLogId);
                });

            migrationBuilder.CreateTable(
                name: "G_UserGroups",
                columns: table => new
                {
                    UserGroupId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserGroupCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UserGroupName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    UserGroupName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ParentUserGroupId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_UserGroups", x => x.UserGroupId);
                });

            migrationBuilder.CreateTable(
                name: "G_UserRole",
                columns: table => new
                {
                    UserRoleId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    RoleName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    RoleName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_UserRole", x => x.UserRoleId);
                });

            migrationBuilder.CreateTable(
                name: "G_UserScreenFields",
                columns: table => new
                {
                    ScreenFieldId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserModuleId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    UserGroupId = table.Column<int>(type: "int", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AuthDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Authinticated = table.Column<bool>(type: "bit", nullable: true),
                    AuthenticatedBy = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_UserScreenFields", x => x.ScreenFieldId);
                });

            migrationBuilder.CreateTable(
                name: "HR_AcheivedTargets",
                columns: table => new
                {
                    AcheivedTargetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_AcheivedTargets", x => x.AcheivedTargetId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Attend",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    code = table.Column<int>(type: "int", nullable: true),
                    name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    dateat = table.Column<DateTime>(type: "date", nullable: true),
                    timeat = table.Column<TimeSpan>(type: "time", nullable: true),
                    mode = table.Column<int>(type: "int", nullable: true),
                    countleate = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    Dev_id = table.Column<int>(type: "int", nullable: true),
                    rol_id = table.Column<int>(type: "int", nullable: true),
                    moderol = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    countearly = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    countearlypure = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    countovertim = table.Column<decimal>(type: "decimal(18,0)", nullable: true),
                    idatthes = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Attend", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Hr_AttendanceDoc",
                columns: table => new
                {
                    AttendDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_AttendanceDoc", x => x.AttendDocId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_AttendanceElements",
                columns: table => new
                {
                    AttendElementId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ElementCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    UnitDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    FixedValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueType = table.Column<byte>(type: "tinyint", nullable: true),
                    ElementUsage = table.Column<byte>(type: "tinyint", nullable: true),
                    VacationEffect = table.Column<byte>(type: "tinyint", nullable: true),
                    EnablEditOnEmpActivity = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ISPrintable = table.Column<bool>(type: "bit", nullable: true),
                    MinMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_AttendanceElements", x => x.AttendElementId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_AttendElementTrans",
                columns: table => new
                {
                    ElementTransId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TableCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TableId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    IsPlus = table.Column<bool>(type: "bit", nullable: true),
                    OriginalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ModifiedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 number,2 minutes,3 hours,4 days"),
                    ElementValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_AttendElementTrans", x => x.ElementTransId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Attendhestory",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    code = table.Column<int>(type: "int", nullable: true),
                    name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    dateat = table.Column<DateTime>(type: "date", nullable: true),
                    timeat = table.Column<TimeSpan>(type: "time", nullable: true),
                    mode = table.Column<int>(type: "int", nullable: true),
                    Dev_id = table.Column<int>(type: "int", nullable: true),
                    rol_id = table.Column<int>(type: "int", nullable: true),
                    moderol = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Attendhestory", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Attendop",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    code = table.Column<int>(type: "int", nullable: true),
                    name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    dateat = table.Column<DateTime>(type: "date", nullable: true),
                    timeat = table.Column<TimeSpan>(type: "time", nullable: true),
                    mode = table.Column<int>(type: "int", nullable: true),
                    Dev_id = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Attendop", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Hr_attendrole",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    satarttimeattdend = table.Column<TimeSpan>(type: "time", nullable: true),
                    endstarttimeattend = table.Column<TimeSpan>(type: "time", nullable: true),
                    starttimeatdepartur = table.Column<TimeSpan>(type: "time", nullable: true),
                    endtimeatdepartur = table.Column<TimeSpan>(type: "time", nullable: true),
                    nameshift = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_attendrole", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Departments",
                columns: table => new
                {
                    DepartMentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    DepartName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    DepartName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    DepartTask = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Departments", x => x.DepartMentId);
                    table.ForeignKey(
                        name: "FK_Hr_Departments_Hr_Departments",
                        column: x => x.ParentId,
                        principalTable: "Hr_Departments",
                        principalColumn: "DepartMentId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_DevicesCon",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ip = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    port = table.Column<string>(type: "text", nullable: true),
                    keycomm = table.Column<string>(type: "text", nullable: true),
                    namedev = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    moodes = table.Column<int>(type: "int", nullable: true),
                    statuess = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_DevicesCon", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Education",
                columns: table => new
                {
                    EducationId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EducationCode = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    EducationName1 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    EducationName2 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    EducationDesc = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Qualification = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Education", x => x.EducationId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpActivity",
                columns: table => new
                {
                    EmpActivityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpActivity", x => x.EmpActivityId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpDocTypes",
                columns: table => new
                {
                    EmpDocTypId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpDocTypes", x => x.EmpDocTypId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpElementPeriodBalance",
                columns: table => new
                {
                    EmpElementId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 minute,2 hour,3 day, 4 number"),
                    ElementValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpElementPeriodBalance", x => x.EmpElementId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpGroups",
                columns: table => new
                {
                    HREmpGroupId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GroupCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    GroupType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsManager = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpGroups", x => x.HREmpGroupId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpGroups_Hr_EmpGroups",
                        column: x => x.ParentId,
                        principalTable: "Hr_EmpGroups",
                        principalColumn: "HREmpGroupId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpLoanRequest",
                columns: table => new
                {
                    EmpLoanReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LoanValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Installments = table.Column<int>(type: "int", nullable: true),
                    InstallmentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EmpLoanBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastInstallmentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpLoanRequest", x => x.EmpLoanReqId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpLoans",
                columns: table => new
                {
                    EmpLoanId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpLoanReqId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    LoanCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StartPayDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastPayDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LoanValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Installments = table.Column<int>(type: "int", nullable: true),
                    InstallmentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LoanBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExemption = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidInstallmentCount = table.Column<int>(type: "int", nullable: true),
                    LastInstallmentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsInstallmentStopped = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpLoans", x => x.EmpLoanId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpMovePromotion",
                columns: table => new
                {
                    EmpMoveId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NewStoreId = table.Column<int>(type: "int", nullable: true),
                    NewDepartMentId = table.Column<int>(type: "int", nullable: true),
                    NewJobId = table.Column<int>(type: "int", nullable: true),
                    NewTitle = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_MoveAndPromotion", x => x.EmpMoveId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpSalaryDistribution",
                columns: table => new
                {
                    SalaryDistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    SalaryPercent = table.Column<decimal>(type: "numeric(18,5)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpSalaryDistribution", x => x.SalaryDistId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpVacation",
                columns: table => new
                {
                    EmpVacId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpVacation", x => x.EmpVacId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Jobs",
                columns: table => new
                {
                    JobId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    JCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    JName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    JName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    JDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    JResponsibilities = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    JDuties = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    JQualifications = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Add1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StandardMonthlyWage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    StandardHolyDays = table.Column<byte>(type: "tinyint", nullable: true),
                    StandardDailyWage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    StandardDailyWorkHours = table.Column<decimal>(type: "decimal(5,2)", nullable: true),
                    StandardHourlyWage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NumberAvailable = table.Column<int>(type: "int", nullable: true),
                    TestMandatory = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Jobs", x => x.JobId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_KPIS",
                columns: table => new
                {
                    KPIId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    KpiPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_KPIS", x => x.KPIId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_LeavePermision",
                columns: table => new
                {
                    LeavPermisionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LeavPermReqId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    ShiftDetailId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DayCount = table.Column<int>(type: "int", nullable: true),
                    HoursCount = table.Column<decimal>(type: "numeric(18,5)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsMission = table.Column<bool>(type: "bit", nullable: true),
                    MissionDesc = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_LeavePermision", x => x.LeavPermisionId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_LeavPermissionRequest",
                columns: table => new
                {
                    LeavPermReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    ShiftDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DayCount = table.Column<int>(type: "int", nullable: true),
                    HoursCount = table.Column<decimal>(type: "numeric(18,5)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_LeavPermissionRequest", x => x.LeavPermReqId);
                });

            migrationBuilder.CreateTable(
                name: "HR_MobileSetting",
                columns: table => new
                {
                    HrMobSetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DefPermReqBookId = table.Column<int>(type: "int", nullable: true),
                    DefVacReqBookId = table.Column<int>(type: "int", nullable: true),
                    DefLoanReqBookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_MobileSetting", x => x.HrMobSetId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_PeriodsTables",
                columns: table => new
                {
                    PeriodTableId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PeriodCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AttendanceMachin = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    PeriodsNum = table.Column<byte>(type: "tinyint", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true),
                    TableStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TableEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FirstDayWork = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PeriodWorkDays = table.Column<byte>(type: "tinyint", nullable: true),
                    DailyWorkHours = table.Column<byte>(type: "tinyint", nullable: true),
                    SubPeriodCount = table.Column<decimal>(type: "numeric(5,2)", nullable: true),
                    SubPeriodType = table.Column<byte>(type: "tinyint", nullable: true),
                    RoundingMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    WorkDayShowElementId = table.Column<int>(type: "int", nullable: true),
                    WorkDayNoShowElementId = table.Column<int>(type: "int", nullable: true),
                    Shift1ShowElementId = table.Column<int>(type: "int", nullable: true),
                    Shift1NoShowElementId = table.Column<int>(type: "int", nullable: true),
                    Shift2ShowElementId = table.Column<int>(type: "int", nullable: true),
                    Shift2NoShowElementId = table.Column<int>(type: "int", nullable: true),
                    Shift3ShowElementId = table.Column<int>(type: "int", nullable: true),
                    Shift3NoShowElementId = table.Column<int>(type: "int", nullable: true),
                    LateArrivalElementId = table.Column<int>(type: "int", nullable: true),
                    LateArrivalUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    LateArrivalRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LateArrivalMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveElementId = table.Column<int>(type: "int", nullable: true),
                    EarlyLeaveUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    EarlyLeaveRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendElementId = table.Column<int>(type: "int", nullable: true),
                    EarlyAttendUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    EarlyAttendRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkdayOvertimeElementId = table.Column<int>(type: "int", nullable: true),
                    WorkdayOvertimeUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    WorkdayOvertimeRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkdayOvertimeMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationOvertimeElementId = table.Column<int>(type: "int", nullable: true),
                    VacationOvertimeUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    VacationOvertimeRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationOvertimeMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekendOvertimeElementId = table.Column<int>(type: "int", nullable: true),
                    WeekendOvertimeUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    WeekendOvertimeRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekendOvertimeMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WrkOvrTimAfterDismis = table.Column<byte>(type: "tinyint", nullable: true),
                    WeekEndOvrTimAftrDismis = table.Column<byte>(type: "tinyint", nullable: true),
                    VacOvrTimAftrDismis = table.Column<byte>(type: "tinyint", nullable: true),
                    AcceptShiftVacs = table.Column<bool>(type: "bit", nullable: true, comment: "قبول تعويض الورديات فى أيام الأجازات"),
                    AcceptShiftHours = table.Column<bool>(type: "bit", nullable: true, comment: "اعتبار تحقيق الورديه بمجرد تحقيق عدد ساعات الورديه بغض النظر عن توقيت الحضور و الانصراف"),
                    ShiftNotAcheived = table.Column<bool>(type: "bit", nullable: true, comment: "عدم احتساب الورديه فى حالة خروج الموظف فى منتصف اليوم قبل ميعاد الانصراف"),
                    AcceptShftBeforDismis = table.Column<bool>(type: "bit", nullable: true, comment: "احتساب الورديه فى حالة خروج الموظف و رجوعه قبل ميعاد الانصراف مع تجاهل عدد الساعات المحققه"),
                    CutLateTimFromOverTime = table.Column<bool>(type: "bit", nullable: true, comment: "خصم التأخير و الانصراف المبكر من الوقت الاضافى لنفس اليوم"),
                    CancelEarlyLeave = table.Column<bool>(type: "bit", nullable: true, comment: "الغاء الانصراف المبكر فى حالة تسجيل حضور ثانى فى نفس اليوم"),
                    CalcEarlyLeaveWeekEnd = table.Column<bool>(type: "bit", nullable: true),
                    CalcEarlyLeaveVacation = table.Column<bool>(type: "bit", nullable: true),
                    CalcLateAttendWeekEnd = table.Column<bool>(type: "bit", nullable: true),
                    CalcLateAttendVacation = table.Column<bool>(type: "bit", nullable: true),
                    WeekEndWorkDayElementId = table.Column<int>(type: "int", nullable: true),
                    WeekEndWorkUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    WeekEndWorkRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekEndWorkMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationWorkDayElementId = table.Column<int>(type: "int", nullable: true),
                    VacationWorkUnit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    VacationWorkRound = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationWorkMinVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_PeriodsTables", x => x.PeriodTableId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_RewardAndPenalty",
                columns: table => new
                {
                    RewardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsReward = table.Column<bool>(type: "bit", nullable: true),
                    IsMoral = table.Column<bool>(type: "bit", nullable: true),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    ExecutDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UnitDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    UnitCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_RewardAndPenalty", x => x.RewardId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_SalaryCalcMethod",
                columns: table => new
                {
                    SalaryCalcMethod = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CalcMethodCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_SalaryCalcMethod", x => x.SalaryCalcMethod);
                });

            migrationBuilder.CreateTable(
                name: "Hr_SalaryIssueDoc",
                columns: table => new
                {
                    SalaryIssuDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalAddValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDeduction = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalOtherValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_SalaryIssueDoc", x => x.SalaryIssuDocId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_SalaryTypes",
                columns: table => new
                {
                    SalaryTypId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    SalaryCalcMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    SalaryCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    SalaryValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UseType = table.Column<byte>(type: "tinyint", nullable: true),
                    AffectType = table.Column<byte>(type: "tinyint", nullable: true),
                    ImplementScale = table.Column<byte>(type: "tinyint", nullable: true),
                    ParentRelation = table.Column<int>(type: "int", nullable: true),
                    Multiply = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Devide = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Approximation = table.Column<byte>(type: "tinyint", nullable: true),
                    MaximumVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MinimumVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitAccFilter = table.Column<byte>(type: "tinyint", nullable: true),
                    DebitAccId = table.Column<int>(type: "int", nullable: true),
                    CreditAccFilter = table.Column<byte>(type: "tinyint", nullable: true),
                    CreditAccId = table.Column<int>(type: "int", nullable: true),
                    DebitCostCenterFilter = table.Column<byte>(type: "tinyint", nullable: true),
                    DebitCostCenterId = table.Column<int>(type: "int", nullable: true),
                    CreditCostCenterFilter = table.Column<byte>(type: "tinyint", nullable: true),
                    CreditCostCenterId = table.Column<int>(type: "int", nullable: true),
                    LargerThanZero = table.Column<bool>(type: "bit", nullable: true),
                    CanDelet = table.Column<bool>(type: "bit", nullable: true),
                    AutoIssue = table.Column<bool>(type: "bit", nullable: true),
                    CanEdit = table.Column<bool>(type: "bit", nullable: true),
                    Distributable = table.Column<bool>(type: "bit", nullable: true),
                    IsBasicsalary = table.Column<bool>(type: "bit", nullable: true),
                    Indmnity = table.Column<byte>(type: "tinyint", nullable: true),
                    Taxation = table.Column<byte>(type: "tinyint", nullable: true),
                    SocialSecurity = table.Column<byte>(type: "tinyint", nullable: true),
                    ElementCount = table.Column<decimal>(type: "numeric(18,5)", nullable: true),
                    ElementCountDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    UseElementOrUnit = table.Column<bool>(type: "bit", nullable: true),
                    Equation = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsAnnualSegment = table.Column<bool>(type: "bit", nullable: true),
                    AnnualPeriods = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Approx = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ApproxUp = table.Column<bool>(type: "bit", nullable: true),
                    IsZeroIfLargerThan = table.Column<bool>(type: "bit", nullable: true),
                    ZeroIfLargerThan = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_SalaryTypes", x => x.SalaryTypId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Shifts",
                columns: table => new
                {
                    ShiftId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShiftCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Day1Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day1Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day2Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day2Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day3Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day3Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day4Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day4Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day5Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day5Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day6Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day6Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day7Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day7Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Day1Type = table.Column<bool>(type: "bit", nullable: true),
                    Day2Type = table.Column<bool>(type: "bit", nullable: true),
                    Day3Type = table.Column<bool>(type: "bit", nullable: true),
                    Day4Type = table.Column<bool>(type: "bit", nullable: true),
                    Day5Type = table.Column<bool>(type: "bit", nullable: true),
                    Day6Type = table.Column<bool>(type: "bit", nullable: true),
                    Day7Type = table.Column<bool>(type: "bit", nullable: true),
                    FirstShfDay1tFrom = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay1To = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay2From = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay2To = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay3From = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay3To = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay4From = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay4To = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay5From = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay5To = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay6From = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay6To = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay7From = table.Column<DateTime>(type: "datetime", nullable: true),
                    FirstShftDay7To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay1From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay1To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay2From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay2To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay3From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay3To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay4From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay4To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay5From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay5To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay6From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay6To = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay7From = table.Column<DateTime>(type: "datetime", nullable: true),
                    SecondShftDay7To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay1From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay1To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay2From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay2To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay3From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay3To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay4From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay4To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay5From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay5To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay6From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay6To = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay7From = table.Column<DateTime>(type: "datetime", nullable: true),
                    ThirdShftDay7To = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Shifts", x => x.ShiftId);
                });

            migrationBuilder.CreateTable(
                name: "hr_sysgenral",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    modrolin = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    modrolout = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    countmin = table.Column<int>(type: "int", nullable: true),
                    modes = table.Column<int>(type: "int", nullable: true),
                    namesetting = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    dateformat = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    filteratt = table.Column<int>(type: "int", nullable: true),
                    filtercheckcollector = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hr_sysgenral", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Hr_syssettinges",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    countitertaion = table.Column<int>(type: "int", nullable: true),
                    rolid = table.Column<int>(type: "int", nullable: true),
                    modetype = table.Column<int>(type: "int", nullable: true),
                    modetypeout = table.Column<int>(type: "int", nullable: true),
                    statusmodout = table.Column<int>(type: "int", nullable: true),
                    statusmodin = table.Column<int>(type: "int", nullable: true),
                    idgenralsetting = table.Column<int>(type: "int", nullable: true),
                    countitertaionout = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_syssettinges", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "HR_Targets",
                columns: table => new
                {
                    TargetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TargetType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 مبلغ, 2 عدد"),
                    TargetFrom = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TargetTo = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HREmpGroupId = table.Column<int>(type: "int", nullable: true),
                    AcheivedPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DeservPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ManagerLevel1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ManagerLevel2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ManagerLevel3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ManagerLevel4Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ManagerLevel5Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Targets", x => x.TargetId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_Termination",
                columns: table => new
                {
                    TerminateId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ServiceEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TerminateType = table.Column<byte>(type: "tinyint", nullable: true),
                    ValueDeserve = table.Column<byte>(type: "tinyint", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Termination", x => x.TerminateId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_VacationDoc",
                columns: table => new
                {
                    VacationDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VacRequestId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DayCount = table.Column<int>(type: "int", nullable: true),
                    NetDaysCount = table.Column<int>(type: "int", nullable: true),
                    AnnualVacsBalance = table.Column<int>(type: "int", nullable: true),
                    ReservedVacsBalance = table.Column<int>(type: "int", nullable: true),
                    VacationType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    AnnualVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacs = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_VacationDoc", x => x.VacationDocId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_VacationEdit",
                columns: table => new
                {
                    VacationEditDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VacationDocId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NewReturnDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DayCount = table.Column<int>(type: "int", nullable: true),
                    NewDayCount = table.Column<int>(type: "int", nullable: true),
                    NetDaysCount = table.Column<int>(type: "int", nullable: true),
                    NewNetDaysCount = table.Column<int>(type: "int", nullable: true),
                    AnnualVacsBalance = table.Column<int>(type: "int", nullable: true),
                    ReservedVacsBalance = table.Column<int>(type: "int", nullable: true),
                    VacationType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    AnnualVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacs = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_VacationEdit", x => x.VacationEditDocId);
                });

            migrationBuilder.CreateTable(
                name: "Hr_VacationRequest",
                columns: table => new
                {
                    VacRequestId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    VacationType = table.Column<byte>(type: "tinyint", nullable: true),
                    DayCount = table.Column<int>(type: "int", nullable: true),
                    NetDaysCount = table.Column<int>(type: "int", nullable: true),
                    AnnualVacsBalance = table.Column<int>(type: "int", nullable: true),
                    ReservedVacsBalance = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    AnnualVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacs = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_VacationRequest", x => x.VacRequestId);
                });

            migrationBuilder.CreateTable(
                name: "Mob_SalesInvoice",
                columns: table => new
                {
                    InvId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    SalesOfferId = table.Column<int>(type: "int", nullable: true),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJobOrders = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCommision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyPump = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyCar = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyNoVehicl = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    IsHold = table.Column<bool>(type: "bit", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    MultiResourceDeliver = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSent = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSentTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxReference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsReturned = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainCustServerId = table.Column<int>(type: "int", nullable: true),
                    IsMobile = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Mob_SalesInvoice", x => x.InvId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_AdjustMents",
                columns: table => new
                {
                    AdjustId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    DocBookId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AdjType = table.Column<bool>(type: "bit", nullable: true, comment: "1 debit, 2 credit"),
                    AdjSourcType = table.Column<bool>(type: "bit", nullable: true, comment: "1 customer, 2 vendor"),
                    AdjSourcTypeId = table.Column<int>(type: "int", nullable: true, comment: "customer or vendor id"),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TotalCheques = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DifferenceInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ResourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_AdjustMents", x => x.AdjustId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_Attachments",
                columns: table => new
                {
                    AttachId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TableCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    AttachType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    AttachPath2 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    AttachDesc1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AttachDesc2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AttachSerial = table.Column<int>(type: "int", nullable: true),
                    IssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RenewalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Encrypted = table.Column<bool>(type: "bit", nullable: true),
                    EncyptionDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_Attachments", x => x.AttachId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_BankAccount",
                columns: table => new
                {
                    AccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AcountCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AcounntNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AcounntNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_BankAccount", x => x.AccountId);
                });

            migrationBuilder.CreateTable(
                name: "MS_BoxBank",
                columns: table => new
                {
                    BoxId = table.Column<int>(type: "int", nullable: false, comment: "0 Box ,1  Bank")
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BoxCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Arabic_CI_AI"),
                    DESCA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    DESCE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    KeeperName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    BankResposableName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    BankTel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    BankMobile = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    BankFax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsBank = table.Column<bool>(type: "bit", nullable: true, comment: "0 Box ; 1 Bank"),
                    CheckPrintID = table.Column<int>(type: "int", nullable: true),
                    ForAdjustOnly = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_BoxBank", x => x.BoxId);
                });

            migrationBuilder.CreateTable(
                name: "MS_BoxTransferNote",
                columns: table => new
                {
                    BoxTranId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsBox = table.Column<bool>(type: "bit", nullable: true),
                    strCustm1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_BoxTransferNote", x => x.BoxTranId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_BusinessPartnerCategory",
                columns: table => new
                {
                    BsPartnerCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PartnerCatCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerCatDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerCatDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ParentCustomerCatId = table.Column<int>(type: "int", nullable: true),
                    CustomerCatType = table.Column<byte>(type: "tinyint", nullable: true),
                    CustomerCatLevel = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_BusinessPartnerCategory", x => x.BsPartnerCatId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_BusinessPartnerType",
                columns: table => new
                {
                    BsPartnerTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PartnerTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerTypeDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerTypeDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerTypeParent = table.Column<int>(type: "int", nullable: true),
                    PartnerTypeLevel = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_BusinessPartnerType", x => x.BsPartnerTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ChequesOpenning",
                columns: table => new
                {
                    ChequeOpenId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InOrOut = table.Column<bool>(type: "bit", nullable: true),
                    IsKembiala = table.Column<bool>(type: "bit", nullable: true),
                    beneficiaryAccId = table.Column<int>(type: "int", nullable: true),
                    IsHelpingAccount = table.Column<bool>(type: "bit", nullable: true),
                    HelpTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    BoxCurrencyId = table.Column<int>(type: "int", nullable: true, comment: "if Paper In [bank account and chartof account], if PaperOut [should be from book] and book is related to bank account which is related to account in chart of accounts"),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(28,7)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(28,7)", nullable: true),
                    ValueBeforeRate = table.Column<decimal>(type: "numeric(28,7)", nullable: true),
                    ChequeNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CheckType = table.Column<byte>(type: "tinyint", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ChequesOpenning", x => x.ChequeOpenId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ChequeTransfer",
                columns: table => new
                {
                    ChequTranId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ChequeTransfer", x => x.ChequTranId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ChequeTransferDetail",
                columns: table => new
                {
                    ChequTranDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    BalanceAfter = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ChequeTransferDetail", x => x.ChequTranDetailId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_Commission",
                columns: table => new
                {
                    CommissionDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CalcMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    CommissionPercent = table.Column<decimal>(type: "numeric(10,4)", nullable: true),
                    CommissionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FromBookId = table.Column<int>(type: "int", nullable: true),
                    ToBookId = table.Column<int>(type: "int", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_Commission", x => x.CommissionDocId);
                });

            migrationBuilder.CreateTable(
                name: "MS_Company",
                columns: table => new
                {
                    CompanyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    code = table.Column<int>(type: "int", nullable: true),
                    CompShortNameA = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CompShortNameE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CompNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CompNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OwnerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PostalCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    MailBox = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Mobile = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Mobile1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Mobile2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Mobile3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Website = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Website3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Website2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Website1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DateOfEstablishment = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Logo = table.Column<byte[]>(type: "image", nullable: true),
                    LegalEntity = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    YearStartfrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    YearEndTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_Company", x => x.CompanyId);
                });

            migrationBuilder.CreateTable(
                name: "MS_Currency",
                columns: table => new
                {
                    CurrencyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrencyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CurrencyDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CurrencyDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DefualtCurrency = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    CurrencySymbol = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    fractionalUnit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DecimalPlaces = table.Column<byte>(type: "tinyint", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    CurrenctType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    singleCurencyname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    singleCurencyname2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DoubleCurencyname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DoubleCurencyname2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CurrancyNameOverthree = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CurrancyNameOverthree2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CollectionCurrencyName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CollectionCurrencyName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    singleCurencyFractionname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    singleCurencyFractionname2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DoubleCurencyFractionname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DoubleCurencyFractionname2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CurrancyNameFractionOverthree = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CurrancyNameFractionOverthree2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CollectionCurrencyFractionName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CollectionCurrencyFractionName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    singleCurencyTempname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DoubleCurencyTempname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CurrancyNameTempOver3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CollectionCurrencyTempName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Aid = table.Column<int>(type: "int", nullable: true),
                    EquivalentConversionPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastModify = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxUnitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Currency", x => x.CurrencyId);
                });

            migrationBuilder.CreateTable(
                name: "MS_CurrencyCategory",
                columns: table => new
                {
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CurrencyCategoryNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CurrencyCategoryNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Aid = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_CurrencyCategory", x => x.CurrencyCategoryId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_CurrencyDailyRateChanges",
                columns: table => new
                {
                    CurrencyChangeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateAndTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LocalCurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    OldRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CurrencyDailyRateChanges", x => x.CurrencyChangeId);
                });

            migrationBuilder.CreateTable(
                name: "MS_CustomerCategory",
                columns: table => new
                {
                    CustomerCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CatCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CatDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CatDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ParentCustomerCatId = table.Column<int>(type: "int", nullable: true),
                    CustomerCatParent = table.Column<int>(type: "int", nullable: true),
                    CustomerCatLevel = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsTaxExempted = table.Column<bool>(type: "bit", nullable: true),
                    CreditPeriod = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day, 2 month, 3 year"),
                    CreditLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLimitAllowed = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DefaultDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReportDiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercentOrVal = table.Column<bool>(type: "bit", nullable: true),
                    IsDiscountByItem = table.Column<bool>(type: "bit", nullable: true),
                    IsBlocked = table.Column<bool>(type: "bit", nullable: true),
                    IsCreditEnabled = table.Column<bool>(type: "bit", nullable: true),
                    IsDealer = table.Column<bool>(type: "bit", nullable: true),
                    Barcode = table.Column<byte>(type: "tinyint", nullable: true),
                    SalPrice = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_CustomerCategory", x => x.CustomerCatId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_CustomerFollowUpTypes",
                columns: table => new
                {
                    FollowUpTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CarCapacity = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CustomerFollowUp", x => x.FollowUpTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_CustomerTypes",
                columns: table => new
                {
                    CustomerTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CustomerTypeDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CustomerTypeDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CustomerTypeParent = table.Column<int>(type: "int", nullable: true),
                    CustomerTypeLevel = table.Column<int>(type: "int", nullable: true),
                    CustomerTypeLevelType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CurrentTrNo = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CustomerTypes", x => x.CustomerTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_DeliverSalesInvoice",
                columns: table => new
                {
                    DeliverId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeliverQtyOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DeliverQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true, comment: "True Closed ;  False  Not Closed"),
                    strCustm4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    strCustm5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Invoice ; 1 Customer ; 2 Return"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    NetPriceFromInv = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCostAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalLastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPricFromInvBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCostAveragBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalLastCostBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    TotalQtyPump = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyCar = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyNoVehicl = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CostExecuted = table.Column<bool>(type: "bit", nullable: true),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_DeliverSalesInvoice", x => x.DeliverId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_Description",
                columns: table => new
                {
                    DescriptionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_Description", x => x.DescriptionId);
                });

            migrationBuilder.CreateTable(
                name: "MS_Expenses",
                columns: table => new
                {
                    ExpensesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExpensesCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ExpensesDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ExpensesDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ExpensesType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Sales , 1 Purchase , 2 Others"),
                    ExpensesValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Expenses", x => x.ExpensesId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemCardVendors",
                columns: table => new
                {
                    ItemVendorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemCardVendors", x => x.ItemVendorId);
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemCategory",
                columns: table => new
                {
                    ItemCategoryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCatCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCatDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCatDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ParentItemCategoryId = table.Column<int>(type: "int", nullable: true),
                    ItemCategoryType = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemCategoryCatLevel = table.Column<int>(type: "int", nullable: true),
                    CategoryImage = table.Column<byte[]>(type: "image", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CurrentTrNo = table.Column<int>(type: "int", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemCategory", x => x.ItemCategoryId);
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemCostHistory",
                columns: table => new
                {
                    ItemCostId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    QtyPartiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInNotebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReservedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SaleNotDelivered = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurNotReceived = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutWithoutBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInWithoutCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WithoutCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemMax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LogType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    LogDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AffectByTableName = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: true),
                    AffectByTableId = table.Column<int>(type: "int", nullable: true),
                    DocQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DocCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemCostLog", x => x.ItemCostId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemPricing",
                columns: table => new
                {
                    ItemPricintId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    CodingStoreId = table.Column<int>(type: "int", nullable: true),
                    ProductTypeId = table.Column<int>(type: "int", nullable: true),
                    BrandId = table.Column<int>(type: "int", nullable: true),
                    GradId = table.Column<int>(type: "int", nullable: true),
                    GramTypeId = table.Column<int>(type: "int", nullable: true),
                    SizeTypeId = table.Column<int>(type: "int", nullable: true),
                    CoverTypeId = table.Column<int>(type: "int", nullable: true),
                    ClosingId = table.Column<int>(type: "int", nullable: true),
                    BreakTypeId = table.Column<int>(type: "int", nullable: true),
                    BoxTypeId = table.Column<int>(type: "int", nullable: true),
                    CutterTypeId = table.Column<int>(type: "int", nullable: true),
                    DistributId = table.Column<int>(type: "int", nullable: true),
                    FaceTypeId = table.Column<int>(type: "int", nullable: true),
                    GofferId = table.Column<int>(type: "int", nullable: true),
                    IndistryId = table.Column<int>(type: "int", nullable: true),
                    PadingTypeId = table.Column<int>(type: "int", nullable: true),
                    AnTypeId = table.Column<int>(type: "int", nullable: true),
                    ItemCategoryId = table.Column<int>(type: "int", nullable: true),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemPricing", x => x.ItemPricintId);
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemSerialsTransactions",
                columns: table => new
                {
                    ItemSerialTranId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemSerialId = table.Column<int>(type: "int", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    IsInOrOut = table.Column<bool>(type: "bit", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemSerialsTransactions", x => x.ItemSerialTranId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemShortage",
                columns: table => new
                {
                    ItemShortId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    RequestedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedQtyBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemShortage", x => x.ItemShortId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemStockAdjustment",
                columns: table => new
                {
                    StockAdjustId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StockTotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsStockOpenning = table.Column<bool>(type: "bit", nullable: true),
                    IsReevaluation = table.Column<bool>(type: "bit", nullable: true),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemStockAdjustment", x => x.StockAdjustId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_JewelryPricing",
                columns: table => new
                {
                    GoldPricingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    GlobalOuncePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GlobalKiloPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GlobalGramPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LocalOuncePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LocalKiloPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LocaGramPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true, comment: "18,21,24"),
                    KiratLocalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    KiratGlobalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_JewelryPricing", x => x.GoldPricingId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_KeeperBank",
                columns: table => new
                {
                    KeeperId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    KeeperNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    TotalCheques = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_KeeperBank", x => x.KeeperId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_LetterOfGuarantee",
                columns: table => new
                {
                    LetOfGrnteeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeTypeId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeCatId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeStatusId = table.Column<int>(type: "int", nullable: true),
                    PaperDirection = table.Column<byte>(type: "tinyint", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    BankAccountId = table.Column<int>(type: "int", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ReceiverName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LetEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Conditions = table.Column<string>(type: "nvarchar(1500)", maxLength: 1500, nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CashMargin = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCovered = table.Column<bool>(type: "bit", nullable: true),
                    CoverPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoverValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Expenses = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LimitGuarantee = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CustodyGuarantee = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_LetterOfGuarantee", x => x.LetOfGrnteeId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_LetterOfGuaranteeCategory",
                columns: table => new
                {
                    LetOfGrnteeCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_LetterOfGuaranteeCategory", x => x.LetOfGrnteeCatId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_LetterOfGuaranteeStatus",
                columns: table => new
                {
                    LetOfGrnteeStatusId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_LetterOfGuaranteeStatus", x => x.LetOfGrnteeStatusId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_LetterOfGuaranteeTypes",
                columns: table => new
                {
                    LetOfGrnteeTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_LetterOfGuaranteeTypes", x => x.LetOfGrnteeTypeId);
                });

            migrationBuilder.CreateTable(
                name: "MS_LotNumberConfiguration",
                columns: table => new
                {
                    LotNumberConfigId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PartsCount = table.Column<byte>(type: "tinyint", nullable: true),
                    Part1 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part1type = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 fixed,2 manual,3 date"),
                    Part1DateType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day,2 week,3 month,4 year"),
                    Part1Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part2 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part2type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part2DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part2Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part3 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part3type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part3DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part3Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part4 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part4type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part4DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part4Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part5 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part5type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part5DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part5Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part6 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part6type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part6DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part6Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part7 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part7type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part7DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part7Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part8 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part8type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part8DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part8Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part9 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part9type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part9DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part9Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Part10 = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Part10type = table.Column<byte>(type: "tinyint", nullable: true),
                    Part10DateType = table.Column<byte>(type: "tinyint", nullable: true),
                    Part10Label = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    LotConfigDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Disabled = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_LotNumberConfiguration", x => x.LotNumberConfigId);
                });

            migrationBuilder.CreateTable(
                name: "MS_LotNumberExpiry",
                columns: table => new
                {
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LotNumberConfigId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ProdDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Period = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day, 2 month, 3 year"),
                    Remark = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Disabled = table.Column<bool>(type: "bit", nullable: true),
                    FixedPart = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManualPart = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManualPart2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManualPart3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManualPart4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManualPart5 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ManualPart6 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Day = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Week = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Month = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    Year = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_LotNumberExpiry", x => x.LotNumberExpiryId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_MobSettings",
                columns: table => new
                {
                    MobSetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    TermType = table.Column<byte>(type: "tinyint", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    NotiFyUserId1 = table.Column<int>(type: "int", nullable: true),
                    NotiFyUserId2 = table.Column<int>(type: "int", nullable: true),
                    NotiFyUserId3 = table.Column<int>(type: "int", nullable: true),
                    NotiFyUserId4 = table.Column<int>(type: "int", nullable: true),
                    NotiFyUserId5 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_MobSettings", x => x.MobSetId);
                });

            migrationBuilder.CreateTable(
                name: "MS_Pettycash",
                columns: table => new
                {
                    PettycashId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalPaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalFilteredPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true, comment: " 1  Customer ; 2 vendor ; 3  Other"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType1 = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Pettycash", x => x.PettycashId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_PosItemCategory",
                columns: table => new
                {
                    PosItemCategoryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCategoryId = table.Column<int>(type: "int", nullable: true),
                    UseItemName = table.Column<bool>(type: "bit", nullable: true),
                    UseItemImg = table.Column<bool>(type: "bit", nullable: true),
                    UseItemCode = table.Column<bool>(type: "bit", nullable: true),
                    UseItemBarcode = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PosItemCategory", x => x.PosItemCategoryId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_PosPaymentMethods",
                columns: table => new
                {
                    PayMethodId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AddPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MethodImage = table.Column<byte[]>(type: "image", nullable: true),
                    Desc1 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Desc2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    MandatoryFieldData = table.Column<bool>(type: "bit", nullable: true),
                    UserQuestion = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    AccountId1 = table.Column<int>(type: "int", nullable: true),
                    AccountId2 = table.Column<int>(type: "int", nullable: true),
                    AccountId3 = table.Column<int>(type: "int", nullable: true),
                    AccountId4 = table.Column<int>(type: "int", nullable: true),
                    AccountId5 = table.Column<int>(type: "int", nullable: true),
                    AccountId6 = table.Column<int>(type: "int", nullable: true),
                    AccountId7 = table.Column<int>(type: "int", nullable: true),
                    AccountId8 = table.Column<int>(type: "int", nullable: true),
                    AccountId9 = table.Column<int>(type: "int", nullable: true),
                    AccountId10 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PosPaymentMethods", x => x.PayMethodId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_POSSettings",
                columns: table => new
                {
                    PosSetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DefCustomerId = table.Column<int>(type: "int", nullable: true),
                    DefEmpId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    RetBookId = table.Column<int>(type: "int", nullable: true),
                    CashTermId = table.Column<int>(type: "int", nullable: true),
                    CreditTermId = table.Column<int>(type: "int", nullable: true),
                    PayMethodTermId = table.Column<int>(type: "int", nullable: true),
                    ReturnCashTermId = table.Column<int>(type: "int", nullable: true),
                    ReturnCreditTermId = table.Column<int>(type: "int", nullable: true),
                    ReturnPayMethodTermId = table.Column<int>(type: "int", nullable: true),
                    UseItemDefStorIfNoQty = table.Column<bool>(type: "bit", nullable: true),
                    MinusNoteQty = table.Column<bool>(type: "bit", nullable: true),
                    UseOffers = table.Column<bool>(type: "bit", nullable: true),
                    cmdNew = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdNew2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdEdit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdEdit2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPreview = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPreview2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPrint = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPrint2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdSave = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdSave2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPay = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPay2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdCredit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdCredit2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdHold = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdHold2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDelete = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDelete2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDiscount = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDiscount2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdShortage = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdShortage2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDocSearch = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDocSearch2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdItemSearch1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdItemSearch2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdItemEdit = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdItemEdit2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDeleteItem = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdDeleteItem2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdUndo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdUndo2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdRetWithInv = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdRetWithInv2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdRetWithoutInv = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdRetWithoutInv2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdFirst = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdFirst2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdLast = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdLast2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPrevious = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdPrevious2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdNext = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdNext2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdOffer1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    cmdOffer2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CustomerAccountId = table.Column<int>(type: "int", nullable: true),
                    VendorAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    BtnItemCatWidth = table.Column<int>(type: "int", nullable: true),
                    BtnItemCatHeight = table.Column<int>(type: "int", nullable: true),
                    BtnItemWidth = table.Column<int>(type: "int", nullable: true),
                    BtnItemHeight = table.Column<int>(type: "int", nullable: true),
                    BtnPayMethodWidth = table.Column<int>(type: "int", nullable: true),
                    BtnPayMethodHeight = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_POSSettings", x => x.PosSetId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_PosShifts",
                columns: table => new
                {
                    PosShiftLogId = table.Column<int>(type: "int", nullable: false),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    ShiftStart = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Trdate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PosShifts", x => x.PosShiftLogId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_PosSpecialItems",
                columns: table => new
                {
                    SpecialItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PosSpecialItems", x => x.SpecialItemCardId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_PurchasOrder",
                columns: table => new
                {
                    PurOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    VendBranchId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    DeliveryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    PayPeriodDays = table.Column<int>(type: "int", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PurOrderReqId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PurchasOrder", x => x.PurOrderId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_PurchasOrderRequest",
                columns: table => new
                {
                    PurOrderReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    VendBranchId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    DeliveryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    PayPeriodDays = table.Column<int>(type: "int", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PurchasOrderRequest", x => x.PurOrderReqId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_RecPayDocJoin",
                columns: table => new
                {
                    InvRecPayId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    DocId = table.Column<int>(type: "int", nullable: true),
                    DocType = table.Column<byte>(type: "tinyint", nullable: true),
                    Paid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_RecPayDocJoin", x => x.InvRecPayId);
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnPurchase",
                columns: table => new
                {
                    RetPurchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    VendBranchId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RetDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RetDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Cash ; 1 Due ;"),
                    ReturnType = table.Column<byte>(type: "tinyint", nullable: true, defaultValueSql: "((0))", comment: "0  Invoice ; 1 customer"),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RetTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    EtaxSent = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSentTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxReference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainVendServerId = table.Column<int>(type: "int", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VisaPayMethodId = table.Column<int>(type: "int", nullable: true),
                    BankTranPayMethodId = table.Column<int>(type: "int", nullable: true),
                    OtherPayMethodId2 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnPurchase", x => x.RetPurchId);
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnSales",
                columns: table => new
                {
                    RetSaleId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RetDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RetDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Cash ; 1 Due ; Customer Account"),
                    ReturnType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Invoice ; 1  Customer"),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RetTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    EtaxSent = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSentTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxReference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainCustServerId = table.Column<int>(type: "int", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VisaPayMethodId = table.Column<int>(type: "int", nullable: true),
                    BankTranPayMethodId = table.Column<int>(type: "int", nullable: true),
                    OtherPayMethodId2 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnSales", x => x.RetSaleId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ReturnSalesReq",
                columns: table => new
                {
                    ReqsalesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    SalesOfferId = table.Column<int>(type: "int", nullable: true),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJobOrders = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCommision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    IsHold = table.Column<bool>(type: "bit", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    MultiResourceDeliver = table.Column<bool>(type: "bit", nullable: true),
                    TotalQtyPump = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyCar = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyNoVehicl = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EtaxSent = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSentTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxReference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsReturned = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainCustServerId = table.Column<int>(type: "int", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsMobile = table.Column<bool>(type: "bit", nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ReturnSalesReq", x => x.ReqsalesId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_ReturnSalesReqItemCard",
                columns: table => new
                {
                    SalesReqItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReqsalesId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    jobProductId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    ItemOfferId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCommisionPercent = table.Column<bool>(type: "bit", nullable: true),
                    CommisionPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceList = table.Column<byte>(type: "tinyint", nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    InOffer = table.Column<bool>(type: "bit", nullable: true),
                    OfferPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    DelivItemCardId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    VehicleId1 = table.Column<int>(type: "int", nullable: true),
                    VehicleId2 = table.Column<int>(type: "int", nullable: true),
                    DriverName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TimeEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    PettycashId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ReturnSalesReqItemCard", x => x.SalesReqItemCardId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesDepartments",
                columns: table => new
                {
                    SalesDepId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesDepCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    SalesDepDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    SalesDepDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    SalesDepParent = table.Column<int>(type: "int", nullable: true),
                    SalesDepLevel = table.Column<int>(type: "int", nullable: true),
                    SalesDepLevelType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesDepartments", x => x.SalesDepId);
                });

            migrationBuilder.CreateTable(
                name: "MS_SalesInvoiceItemCard_Deleted",
                columns: table => new
                {
                    DelInvItemcardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvItemCardId = table.Column<int>(type: "int", nullable: false),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    LotNumberExpiry = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ProductionDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AddOrEditMode = table.Column<bool>(type: "bit", nullable: true, comment: "1 Add, 0 Edit"),
                    DeletedBy = table.Column<int>(type: "int", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedOrChanged = table.Column<bool>(type: "bit", nullable: true, comment: "1Deleted,0 changed")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_SalesInvoiceItemCard_Deleted", x => x.DelInvItemcardId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesItemsOffers",
                columns: table => new
                {
                    PromoOfferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsActiveOffer = table.Column<bool>(type: "bit", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesItemsOffers_1", x => x.PromoOfferId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesOffer",
                columns: table => new
                {
                    SalesOfferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VisitId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    DeliveryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    PayPeriodDays = table.Column<int>(type: "int", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    PrinPriceId = table.Column<int>(type: "int", nullable: true),
                    IsMobile = table.Column<bool>(type: "bit", nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesOffer", x => x.SalesOfferId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesOfferRequest",
                columns: table => new
                {
                    SalesOfferReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    DeliveryPeriodDays = table.Column<int>(type: "int", nullable: true),
                    PayPeriodDays = table.Column<int>(type: "int", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesOfferRequest", x => x.SalesOfferReqId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesOrder",
                columns: table => new
                {
                    SalesOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    SalesOfferId = table.Column<int>(type: "int", nullable: true),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    IsMobile = table.Column<bool>(type: "bit", nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesOrder", x => x.SalesOrderId);
                });

            migrationBuilder.CreateTable(
                name: "MS_Settings",
                columns: table => new
                {
                    SettingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExpUseColor = table.Column<bool>(type: "bit", nullable: true),
                    ExpPeriod = table.Column<int>(type: "int", nullable: true),
                    chekAlert = table.Column<bool>(type: "bit", nullable: true),
                    ItemLimitAlert = table.Column<bool>(type: "bit", nullable: true),
                    ItemMaxAlert = table.Column<bool>(type: "bit", nullable: true),
                    AlertCustCredit = table.Column<bool>(type: "bit", nullable: true),
                    AlertVendCredit = table.Column<bool>(type: "bit", nullable: true),
                    AlertTimeOut = table.Column<int>(type: "int", nullable: true),
                    CustCodOrNam = table.Column<bool>(type: "bit", nullable: true),
                    VendCodOrNam = table.Column<bool>(type: "bit", nullable: true),
                    PartCodOrNam = table.Column<bool>(type: "bit", nullable: true),
                    AccountsDecimals = table.Column<byte>(type: "tinyint", nullable: true),
                    QuantityDicimals = table.Column<byte>(type: "tinyint", nullable: true),
                    PriceDicimals = table.Column<byte>(type: "tinyint", nullable: true),
                    CostDicimals = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuesDicimals = table.Column<byte>(type: "tinyint", nullable: true),
                    PercentDicimals = table.Column<byte>(type: "tinyint", nullable: true),
                    DimensionDicimals = table.Column<byte>(type: "tinyint", nullable: true),
                    TimeDecimals = table.Column<byte>(type: "tinyint", nullable: true),
                    UseBarCodes = table.Column<bool>(type: "bit", nullable: true),
                    UseBasicOrAlterBarcod = table.Column<bool>(type: "bit", nullable: true),
                    UseSerialNumber = table.Column<bool>(type: "bit", nullable: true),
                    UseExpirySystem = table.Column<bool>(type: "bit", nullable: true),
                    UseExpiryDateColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseProducDateColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseLotNumberColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseAlterItems = table.Column<bool>(type: "bit", nullable: true),
                    UseAttributes = table.Column<bool>(type: "bit", nullable: true),
                    UseHightColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseWidthColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseLengthColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseUnitColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseBrancheCodeColumn = table.Column<bool>(type: "bit", nullable: true),
                    UseBrancheNameColumn = table.Column<bool>(type: "bit", nullable: true),
                    UsePartitionCodeColumn = table.Column<bool>(type: "bit", nullable: true),
                    UsePartitionNameColumn = table.Column<bool>(type: "bit", nullable: true),
                    NoOfItemRemarksFields = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemCostAffectDoc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SalesReturnItemCost = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PurchReturnItemCost = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AskForAttachMove = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 always copy, 2 always move,3 never copy or move,4 ask to move"),
                    AttachmentPath = table.Column<string>(type: "nvarchar(2500)", maxLength: 2500, nullable: true),
                    UseWeightCardSystem = table.Column<bool>(type: "bit", nullable: true),
                    UseCurrency = table.Column<bool>(type: "bit", nullable: true),
                    UseHijiryDate = table.Column<bool>(type: "bit", nullable: true),
                    SysDateFormat = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    ScaleAutoRead = table.Column<bool>(type: "bit", nullable: true),
                    ScaleAppPath = table.Column<string>(type: "nvarchar(2500)", maxLength: 2500, nullable: true),
                    ScaleDataPath = table.Column<string>(type: "nvarchar(2500)", maxLength: 2500, nullable: true),
                    ItemIssueCostMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemIssueWhichCost = table.Column<byte>(type: "tinyint", nullable: true),
                    UseFinancialQtyOnly = table.Column<bool>(type: "bit", nullable: true),
                    UseSimpleExpirySystem = table.Column<bool>(type: "bit", nullable: true),
                    UseComposItem = table.Column<bool>(type: "bit", nullable: true),
                    HideDeletedDocs = table.Column<bool>(type: "bit", nullable: true),
                    HideCustBranch = table.Column<bool>(type: "bit", nullable: true),
                    HideCurrency = table.Column<bool>(type: "bit", nullable: true),
                    HideSalesMan = table.Column<bool>(type: "bit", nullable: true),
                    HideMoneyCollector = table.Column<bool>(type: "bit", nullable: true),
                    DistDiscOnJobOrderItems = table.Column<bool>(type: "bit", nullable: true),
                    UseSalesJobOrders = table.Column<bool>(type: "bit", nullable: true),
                    UseItemTaxInPurch = table.Column<bool>(type: "bit", nullable: true),
                    UseItemTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    UseAnalyticalCode = table.Column<bool>(type: "bit", nullable: true),
                    UseShipping = table.Column<bool>(type: "bit", nullable: true),
                    UseVehicles = table.Column<bool>(type: "bit", nullable: true),
                    ItemDefTax = table.Column<int>(type: "int", nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    PriceIncludTaxInPurch = table.Column<bool>(type: "bit", nullable: true),
                    SearchItemWithQtySales = table.Column<bool>(type: "bit", nullable: true),
                    UseCatCodInItems = table.Column<bool>(type: "bit", nullable: true),
                    ItemSeparator = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    UseCatCodInCust = table.Column<bool>(type: "bit", nullable: true),
                    CustSeparator = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    UseCatCodInVend = table.Column<bool>(type: "bit", nullable: true),
                    VendSeparator = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    ETaxClientId = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ETaxClientSecret = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ETaxPortalUrl = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxTokenUrl = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxSubmitUrl = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxActivityCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ETaxIssuerId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ETaxIssuerName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ETaxTokenPin = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ETaxInvoiceStatus = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ETaxCurrency = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ETaxBranchId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxTax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    EtaxDocVersion = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ETaxPortalUrlTest = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxTokenUrlTest = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxSubmitUrlTest = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxPortalUrlLive = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxTokenUrlLive = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ETaxSubmitUrlLive = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ActivateUnit2 = table.Column<bool>(type: "bit", nullable: true),
                    JoinBranches = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Settings", x => x.SettingId);
                });

            migrationBuilder.CreateTable(
                name: "MS_StockRecript",
                columns: table => new
                {
                    StockRecId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    PurOrderReqId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReceiptrQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseInvQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true, comment: "True Closed ;  False  Not Closed"),
                    CostExecuted = table.Column<bool>(type: "bit", nullable: true),
                    StockRecDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StockRecDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: true, defaultValueSql: "((0))", comment: "0 Invoice ; 1 Return ; 2  Vendor "),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    strCustm4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    strCustm5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_StockRecript", x => x.StockRecId);
                });

            migrationBuilder.CreateTable(
                name: "MS_StockTransferNote",
                columns: table => new
                {
                    TranId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TranReqId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StockTranDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StockTranDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_StockTransferNote", x => x.TranId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_StockTransferNoteRequest",
                columns: table => new
                {
                    TranReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StockTranDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StockTranDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_StockTransferNoteRequest", x => x.TranReqId);
                });

            migrationBuilder.CreateTable(
                name: "MS_Taxes",
                columns: table => new
                {
                    TaxesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaxCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TaxNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TaxNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TaxStyle = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Percent , 1 value , 2 Without"),
                    TaxRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Taxes", x => x.TaxesId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_Terms",
                columns: table => new
                {
                    TermId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    TermName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TermType = table.Column<byte>(type: "tinyint", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    SystemIssuedOnly = table.Column<bool>(type: "bit", nullable: true),
                    JournalEntryBookId = table.Column<int>(type: "int", nullable: true),
                    JournalEntryTermId = table.Column<int>(type: "int", nullable: true),
                    InventoryBookId = table.Column<int>(type: "int", nullable: true),
                    InventoryTermId = table.Column<int>(type: "int", nullable: true),
                    IsOpenningTerm = table.Column<bool>(type: "bit", nullable: true),
                    CashOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    IsStopped = table.Column<bool>(type: "bit", nullable: true),
                    IsDefaultTerm = table.Column<bool>(type: "bit", nullable: true),
                    UseItemTax = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReportPath = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    DependsOn = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_Terms", x => x.TermId);
                });

            migrationBuilder.CreateTable(
                name: "MS_UpdateReplication",
                columns: table => new
                {
                    UpdatID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TableDef = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LastUpDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdate2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastUpdate3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_UpdateReplication", x => x.UpdatID);
                });

            migrationBuilder.CreateTable(
                name: "MS_UserAuthentications",
                columns: table => new
                {
                    AuthId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    AuthCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AuthName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AuthDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Authinticated = table.Column<bool>(type: "bit", nullable: true),
                    AuthenticatedBy = table.Column<int>(type: "int", nullable: true, comment: "the Id of the user who athurized to give this authentication")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_UserAuthentications", x => x.AuthId);
                });

            migrationBuilder.CreateTable(
                name: "MS_VendorCategory",
                columns: table => new
                {
                    VendorCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CatCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CatDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CatDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ParentVendorCatId = table.Column<int>(type: "int", nullable: true),
                    VendorCatParent = table.Column<int>(type: "int", nullable: true),
                    VendorCatLevel = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_VendorCategory", x => x.VendorCatId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_VendorTypes",
                columns: table => new
                {
                    VendorTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VendorTypeDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VendorTypeDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VendorTypeParent = table.Column<int>(type: "int", nullable: true),
                    VendorTypeLevel = table.Column<int>(type: "int", nullable: true),
                    VendorTypeLevelType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CurrentTrNo = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_VendorTypes", x => x.VendorTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Ms_WeightCard",
                columns: table => new
                {
                    ScaleCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SourceId = table.Column<int>(type: "int", nullable: true),
                    SourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    DriverId = table.Column<int>(type: "int", nullable: true),
                    EmpId1 = table.Column<int>(type: "int", nullable: true),
                    EmpId2 = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    WeightQty1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeightQty2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WheightDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeightQtyDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeightQtyDiff = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Weight1Date = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Weight1Time = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Weight2Date = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Weight2Time = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InOrOut = table.Column<bool>(type: "bit", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    ClosingDoc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ClosingDocId = table.Column<int>(type: "int", nullable: true),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_WeightCard", x => x.ScaleCardId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_Capacity",
                columns: table => new
                {
                    CapcityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CapcityCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CapcityDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CapcityDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Size = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_Capacity", x => x.CapcityId);
                });

            migrationBuilder.CreateTable(
                name: "MSGA_City",
                columns: table => new
                {
                    CityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CityCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CityName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SysCityID = table.Column<int>(type: "int", nullable: true),
                    CountryId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_City", x => x.CityID);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterExport",
                columns: table => new
                {
                    LetterExportId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    CustomsNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterExport", x => x.LetterExportId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterFayum",
                columns: table => new
                {
                    LetterFayumId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    client2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField11 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField21 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BodyPeriodicBookId = table.Column<int>(type: "int", nullable: true),
                    MotorPeriodicBookId = table.Column<int>(type: "int", nullable: true),
                    BookMotorPrint = table.Column<bool>(type: "bit", nullable: true),
                    BookBodyPrint = table.Column<bool>(type: "bit", nullable: true),
                    ApprovedBookMotor = table.Column<bool>(type: "bit", nullable: true),
                    ApprovedBookBody = table.Column<bool>(type: "bit", nullable: true),
                    BookMotorPrintTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BookBodyPrintTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LogoPrintedMotor = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LogoPrintedBody = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterFayum", x => x.LetterFayumId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterNormal",
                columns: table => new
                {
                    LetterNormId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    client2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TaxPrinted = table.Column<bool>(type: "bit", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BodyPeriodicBookId = table.Column<int>(type: "int", nullable: true),
                    MotorPeriodicBookId = table.Column<int>(type: "int", nullable: true),
                    BookMotorPrint = table.Column<bool>(type: "bit", nullable: true),
                    BookBodyPrint = table.Column<bool>(type: "bit", nullable: true),
                    ApprovedBookMotor = table.Column<bool>(type: "bit", nullable: true),
                    ApprovedBookBody = table.Column<bool>(type: "bit", nullable: true),
                    BookMotorPrintTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BookBodyPrintTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LogoPrintedMotor = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LogoPrintedBody = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsOurBody = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    VehicleShapeId = table.Column<int>(type: "int", nullable: true),
                    VehicleTypId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterNormal", x => x.LetterNormId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterQuery",
                columns: table => new
                {
                    GawabQueryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LetterNormId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AuthUser = table.Column<int>(type: "int", nullable: true),
                    IsEdit = table.Column<bool>(type: "bit", nullable: true),
                    EditDone = table.Column<bool>(type: "bit", nullable: true),
                    IsPrint = table.Column<bool>(type: "bit", nullable: true),
                    CopyCount = table.Column<int>(type: "int", nullable: true),
                    PrintedCopy = table.Column<int>(type: "int", nullable: true),
                    RemainCopy = table.Column<int>(type: "int", nullable: true),
                    CanEditBuyer = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedById = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterQuery", x => x.GawabQueryId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterTax",
                columns: table => new
                {
                    LetterTaxId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LetterNormId = table.Column<int>(type: "int", nullable: true),
                    LetterTaxTempId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    QuantityUsed = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterTax", x => x.LetterTaxId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterTempTax",
                columns: table => new
                {
                    LetterTaxTempId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TempCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TempDesca = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TempDesce = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Price = table.Column<decimal>(type: "numeric(22,2)", nullable: true),
                    TaxPercent = table.Column<decimal>(type: "numeric(7,2)", nullable: true),
                    TaxValu = table.Column<decimal>(type: "numeric(22,2)", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    QuantityUsed = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterTempTax", x => x.LetterTaxTempId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_MachineType",
                columns: table => new
                {
                    MachineID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachineCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MachineName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    VehicleShapeId = table.Column<int>(type: "int", nullable: true),
                    VehicleTypId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_type", x => x.MachineID);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_Moror",
                columns: table => new
                {
                    MororID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MoroCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MororName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GAV_Moror", x => x.MororID);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_MotorSN",
                columns: table => new
                {
                    MotorDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsMotor = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_MotorSN", x => x.MotorDocId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_PeriodicBook",
                columns: table => new
                {
                    PeriodicBookId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CapcityId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    SerialStart = table.Column<int>(type: "int", nullable: true),
                    SerialEnd = table.Column<int>(type: "int", nullable: true),
                    FirstLetter = table.Column<string>(type: "char(50)", unicode: false, fixedLength: true, maxLength: 50, nullable: true),
                    LastLetter = table.Column<string>(type: "char(50)", unicode: false, fixedLength: true, maxLength: 50, nullable: true),
                    PreFix = table.Column<string>(type: "char(20)", unicode: false, fixedLength: true, maxLength: 20, nullable: true),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    ApprovalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ApprovedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BodyOrMotor = table.Column<bool>(type: "bit", nullable: true),
                    Model = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Logo1 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Logo2 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Logo3 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Cover1 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Cover2 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_PeriodicBook", x => x.PeriodicBookId);
                });

            migrationBuilder.CreateTable(
                name: "MsGA_Shipment",
                columns: table => new
                {
                    ShipMentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_Shipment", x => x.ShipMentId);
                });

            migrationBuilder.CreateTable(
                name: "Names",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameAr = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    NameEn = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Names", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ou",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    adderss = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    phone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    emaia = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    taxnumber = table.Column<long>(type: "bigint", nullable: true),
                    img = table.Column<byte[]>(type: "image", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ou", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Print_BoxType",
                columns: table => new
                {
                    BoxTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_BoxType", x => x.BoxTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_BreakType",
                columns: table => new
                {
                    BreakTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_BreakType", x => x.BreakTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Closing",
                columns: table => new
                {
                    ClosingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Closing", x => x.ClosingId);
                });

            migrationBuilder.CreateTable(
                name: "Print_ConnectionType",
                columns: table => new
                {
                    ConnectTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_ConnectionType", x => x.ConnectTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_CoverType",
                columns: table => new
                {
                    CoverTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_CoverType", x => x.CoverTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_CutterTypeId",
                columns: table => new
                {
                    CutterTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_CutterTypeId", x => x.CutterTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Distribution",
                columns: table => new
                {
                    DistributId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Distribution", x => x.DistributId);
                });

            migrationBuilder.CreateTable(
                name: "Print_EditType",
                columns: table => new
                {
                    EditTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_EditType", x => x.EditTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_FaceType",
                columns: table => new
                {
                    FaceTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_FaceType", x => x.FaceTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_GofferType",
                columns: table => new
                {
                    GofferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_GofferType", x => x.GofferId);
                });

            migrationBuilder.CreateTable(
                name: "Print_GradeType",
                columns: table => new
                {
                    GradId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_GradeType", x => x.GradId);
                });

            migrationBuilder.CreateTable(
                name: "Print_GramType",
                columns: table => new
                {
                    GramTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Weight = table.Column<decimal>(type: "numeric(13,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_GramType", x => x.GramTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Industry",
                columns: table => new
                {
                    IndistryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Industry", x => x.IndistryId);
                });

            migrationBuilder.CreateTable(
                name: "Print_JobOrderCreationType",
                columns: table => new
                {
                    CreateTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_JobOrderCreationType", x => x.CreateTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_PadingType",
                columns: table => new
                {
                    PadingTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_PadingType", x => x.PadingTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Pricing",
                columns: table => new
                {
                    PrinPriceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrinQoutId = table.Column<int>(type: "int", nullable: true),
                    PrinQoutDetailId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    EditPrinQoutId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CurrentEmpId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OuterBoxesCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PartsCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Layers = table.Column<int>(type: "int", nullable: true),
                    OutOrderLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OutOrderWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OutOrderHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InOrderLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InOrderWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InOrderHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GofferMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurpuraMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SheetsQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProdWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Parts = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PartsBySheet = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Zincs = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Forms = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Transportation = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Palets = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrepare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaperPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Slofan = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Scrap = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Profit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalSales = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Pricing", x => x.PrinPriceId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Qoutation",
                columns: table => new
                {
                    PrinQoutId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    EditPrinQoutId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EditTypeId = table.Column<int>(type: "int", nullable: true),
                    SizeSource = table.Column<byte>(type: "tinyint", nullable: true),
                    StockingId = table.Column<int>(type: "int", nullable: true),
                    DistributId = table.Column<int>(type: "int", nullable: true),
                    BoxTypeId = table.Column<int>(type: "int", nullable: true),
                    SalesOfferReqId = table.Column<int>(type: "int", nullable: true),
                    GofferId = table.Column<int>(type: "int", nullable: true),
                    IsDraw = table.Column<bool>(type: "bit", nullable: true),
                    IsSample = table.Column<bool>(type: "bit", nullable: true),
                    OuterBoxesCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PartsCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentEmpId = table.Column<int>(type: "int", nullable: true),
                    BoxCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GofferMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurpuraMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    SectorId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Qoutation", x => x.PrinQoutId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Sectors",
                columns: table => new
                {
                    SectorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Sectors", x => x.SectorId);
                });

            migrationBuilder.CreateTable(
                name: "Print_SizeType",
                columns: table => new
                {
                    SizeTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_SizeType", x => x.SizeTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_StickyType",
                columns: table => new
                {
                    StickyTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_StickyType", x => x.StickyTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Print_Stocking",
                columns: table => new
                {
                    StockingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_Stocking", x => x.StockingId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_BasicUnits",
                columns: table => new
                {
                    BasUnitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UnitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UnitNam = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    UnitNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    UnittRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Symbol = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true, collation: "Arabic_CI_AI"),
                    ParentUnit = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    AutoDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxUnitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsKarat = table.Column<bool>(type: "bit", nullable: true),
                    CannotDevide = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_BasicUnits", x => x.BasUnitId);
                    table.ForeignKey(
                        name: "FK_Prod_BasicUnits_Prod_BasicUnits",
                        column: x => x.ParentUnit,
                        principalTable: "Prod_BasicUnits",
                        principalColumn: "BasUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_BillOfMaterial",
                columns: table => new
                {
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BOMCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsScrapCost = table.Column<bool>(type: "bit", nullable: true),
                    ScrapCostPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OverflowQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OverflowQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsService = table.Column<bool>(type: "bit", nullable: true),
                    Duration = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsReserved = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_BillOfMaterial", x => x.BillOfMaterialId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_EmpEquipDistrib",
                columns: table => new
                {
                    EmpEquipDistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_EmpEquipDistrib", x => x.EmpEquipDistId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_EmpJobOrderDistrib",
                columns: table => new
                {
                    EmpJobOrderDistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_EmpJobOrderDistrib", x => x.EmpJobOrderDistId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_Equipments",
                columns: table => new
                {
                    EquipId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EquipCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    EquipName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    EquipName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    JDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    StandardMonthlyCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    StandardHolyDays = table.Column<byte>(type: "tinyint", nullable: true),
                    StandardDailyCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    StandardDailyWorkHours = table.Column<decimal>(type: "decimal(5,2)", nullable: true),
                    StandardHourlyCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NumberAvailable = table.Column<int>(type: "int", nullable: true),
                    TimeRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    QtyPerUnit = table.Column<decimal>(type: "numeric(25,4)", nullable: true),
                    IsScale = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaxWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MinWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TechnicalSpecs = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SpeedByHour = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StandByTime = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaxWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaxLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaxHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MinLaborCount = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_Equipments", x => x.EquipId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_ItemAttributes",
                columns: table => new
                {
                    AttributId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttributCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AttributName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AttributName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsMandatory = table.Column<bool>(type: "bit", nullable: true),
                    Dimension = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 without,1 length,2 width,3 Height"),
                    IsFixedMenuValues = table.Column<bool>(type: "bit", nullable: true),
                    IsOptionalWithAlarm = table.Column<bool>(type: "bit", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    DataType = table.Column<byte>(type: "tinyint", nullable: true),
                    MinValu = table.Column<decimal>(type: "decimal(38,10)", nullable: true),
                    MaxValu = table.Column<decimal>(type: "decimal(38,10)", nullable: true),
                    IncrementalValu = table.Column<decimal>(type: "decimal(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemAttributes", x => x.AttributId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_ItemAttributesBatche",
                columns: table => new
                {
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemBatchCode = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    ItemBatchName1 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    ItemBatchName2 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    ItemBatchDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Tax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MultiplyValues = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UseBatchPrice = table.Column<bool>(type: "bit", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscountPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscountValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ParentBatchId = table.Column<int>(type: "int", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LengthMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LengthCentimeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LengthMillimeters = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WidthMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WidthCentimeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WidthMillimeters = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HeightMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HeightCentimeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HeightMillimeters = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsStandard = table.Column<bool>(type: "bit", nullable: true),
                    IsOpened = table.Column<bool>(type: "bit", nullable: true),
                    IsScrap = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    QtyInBox = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchasePrice = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Wheight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsTempItem = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemAttributesBatched", x => x.ItemAtrribBatchId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrder",
                columns: table => new
                {
                    JobOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JOrderTypeId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    InDirectExpensesAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ClientId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    OrderSource = table.Column<byte>(type: "tinyint", nullable: true),
                    OrderType = table.Column<byte>(type: "tinyint", nullable: true),
                    Priority = table.Column<byte>(type: "tinyint", nullable: true),
                    OrderStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    Installation = table.Column<bool>(type: "bit", nullable: true),
                    RefOrder = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    ProducedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTasksCose = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJobsCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalEquipCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CustomerCharged = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetExpenses = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPurchInvCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalServices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJpbOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProductsPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalGoStock = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalScrap = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InstallationPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalMaterialCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalGoStockCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalScrapCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProductCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalEquipCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJobsCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDeliveredGoStock = table.Column<bool>(type: "bit", nullable: true),
                    IsDeliveredProducts = table.Column<bool>(type: "bit", nullable: true),
                    IsDeliveredScrap = table.Column<bool>(type: "bit", nullable: true),
                    IsDeliveredMaterial = table.Column<bool>(type: "bit", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProducedMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SerReqId = table.Column<int>(type: "int", nullable: true),
                    MaintainTypeId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    IsService = table.Column<bool>(type: "bit", nullable: true),
                    FatteningType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Fattening, 2 Feeding")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrder", x => x.JobOrderId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderClosing",
                columns: table => new
                {
                    JOrderClosId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosingType = table.Column<byte>(type: "tinyint", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderClosing", x => x.JOrderClosId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderEmpCostDoc",
                columns: table => new
                {
                    JOrderEmpDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimingType = table.Column<byte>(type: "tinyint", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderEmpCostDoc", x => x.JOrderEmpDocId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderEquipCostDoc",
                columns: table => new
                {
                    JOrderEquipDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimingType = table.Column<byte>(type: "tinyint", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderEquipCostDoc", x => x.JOrderEquipDocId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderType",
                columns: table => new
                {
                    JOrderTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    InDirectExpensesAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    ItemCostInPrcent = table.Column<bool>(type: "bit", nullable: true),
                    ExpensesCostInPercent = table.Column<bool>(type: "bit", nullable: true),
                    JobsCostInPercent = table.Column<bool>(type: "bit", nullable: true),
                    MachineCostInPercent = table.Column<bool>(type: "bit", nullable: true),
                    FinishedItemStorePartId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemStorePartId = table.Column<int>(type: "int", nullable: true),
                    GoStockItemStorePartId = table.Column<int>(type: "int", nullable: true),
                    ScrapItemStorePartId = table.Column<int>(type: "int", nullable: true),
                    FinishedItemRecBookId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemDelBookId = table.Column<int>(type: "int", nullable: true),
                    GoStockItemRecBookId = table.Column<int>(type: "int", nullable: true),
                    ScrapItemRecBookId = table.Column<int>(type: "int", nullable: true),
                    FinishedItemRecTermId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemDelTermId = table.Column<int>(type: "int", nullable: true),
                    GoStockItemRecTermId = table.Column<int>(type: "int", nullable: true),
                    ScrapItemRecTermId = table.Column<int>(type: "int", nullable: true),
                    FinishedItemRecJournalBookId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemDelJournalBookId = table.Column<int>(type: "int", nullable: true),
                    GoStockItemRecJournalBookId = table.Column<int>(type: "int", nullable: true),
                    ScrapItemRecJournalBookId = table.Column<int>(type: "int", nullable: true),
                    FinishedItemRecJournalTermId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemDelJournalTermId = table.Column<int>(type: "int", nullable: true),
                    GoStockItemRecJournalTermId = table.Column<int>(type: "int", nullable: true),
                    ScrapItemRecJournalTermId = table.Column<int>(type: "int", nullable: true),
                    JobOrderMadeFor = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 store, 1 customer"),
                    IndirectMaterialCostPrcent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IndirectJobsCostPrcent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IndirectMachinesCostPrcent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IndirectCostPrcent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AnimalOrFood = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 food,2 animal")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderType", x => x.JOrderTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_ProductionLine",
                columns: table => new
                {
                    ProLineId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProdLinCode = table.Column<int>(type: "int", nullable: true),
                    ProdLinName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ProdLinName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ProdLinDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StandardQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ProductionLine", x => x.ProLineId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_ProductionOrder",
                columns: table => new
                {
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    OrderStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    RecipeId = table.Column<int>(type: "int", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ProductionOrder", x => x.ProductionOrderId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_Recipe",
                columns: table => new
                {
                    RecipeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RecipeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_Recipe", x => x.RecipeId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_Settings",
                columns: table => new
                {
                    ProdSettingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    FinishedProdValAccId = table.Column<int>(type: "int", nullable: true),
                    UndercostOperationAccId = table.Column<int>(type: "int", nullable: true),
                    DirectWorkersAccId = table.Column<int>(type: "int", nullable: true),
                    DirectServiceAccId = table.Column<int>(type: "int", nullable: true),
                    DirectEquipmentAccId = table.Column<int>(type: "int", nullable: true),
                    OtherCostsAccId = table.Column<int>(type: "int", nullable: true),
                    AccompanyproductsAccId = table.Column<int>(type: "int", nullable: true),
                    ScrapAccId = table.Column<int>(type: "int", nullable: true),
                    OutSourceCost = table.Column<int>(type: "int", nullable: true),
                    CostingAdjustmentId = table.Column<int>(type: "int", nullable: true),
                    StandardCostPriority1 = table.Column<byte>(type: "tinyint", nullable: true),
                    StandardCostPriority2 = table.Column<byte>(type: "tinyint", nullable: true),
                    StandardCostPriority3 = table.Column<byte>(type: "tinyint", nullable: true),
                    DailyWorkHours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    EmpDataSource = table.Column<bool>(type: "bit", nullable: true, comment: "1 production,2 Hr"),
                    MonthlyStandardWorkDays = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_Settings", x => x.ProdSettingId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_Tasks",
                columns: table => new
                {
                    TaskId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaskCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    TaskName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TaskName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TaskDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Comment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    OperationType = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Duration = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_Tasks", x => x.TaskId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrder",
                columns: table => new
                {
                    WorkOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreEmpId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPieces = table.Column<int>(type: "int", nullable: true),
                    DocBarCode = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    PackageCount = table.Column<int>(type: "int", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TotalItemCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalEquipCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CustomerCharged = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalServices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetExpenses = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJpbOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalScrap = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalMaterialCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalGoStockCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalScrapCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProductCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalEquipCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensCostEstimate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDeliveredProducts = table.Column<bool>(type: "bit", nullable: true),
                    IsDeliveredScrap = table.Column<bool>(type: "bit", nullable: true),
                    IsDeliveredMaterial = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrder", x => x.WorkOrderId);
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderScrap",
                columns: table => new
                {
                    WorkOrderScrapId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemCardId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderScrap", x => x.WorkOrderScrapId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjectItems",
                columns: table => new
                {
                    ProjectItemsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjectItems", x => x.ProjectItemsId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_Projects",
                columns: table => new
                {
                    ProjectId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BuildTypeId = table.Column<int>(type: "int", nullable: true),
                    BuildStatusId = table.Column<int>(type: "int", nullable: true),
                    BuildDegreeId = table.Column<int>(type: "int", nullable: true),
                    BuildFinishLevelId = table.Column<int>(type: "int", nullable: true),
                    LandId = table.Column<int>(type: "int", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    SubRegionClassId = table.Column<int>(type: "int", nullable: true),
                    ContractTypeId = table.Column<int>(type: "int", nullable: true),
                    PostalCodId = table.Column<int>(type: "int", nullable: true),
                    RentCaseId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ProjectCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    ProjectName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ProjectName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Description1 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    Description2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    ParentProjectId = table.Column<int>(type: "int", nullable: true),
                    ProjectStopped = table.Column<bool>(type: "bit", nullable: true),
                    ProjectStoppedbyUserId = table.Column<int>(type: "int", nullable: true),
                    CalcAllMeters = table.Column<bool>(type: "bit", nullable: true),
                    CanSaleUnits = table.Column<bool>(type: "bit", nullable: true),
                    CanRentUnits = table.Column<bool>(type: "bit", nullable: true),
                    StreetNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    LandNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FloorsCount = table.Column<int>(type: "int", nullable: true),
                    FloorUnitCount = table.Column<int>(type: "int", nullable: true),
                    FirstFloorUnitCount = table.Column<int>(type: "int", nullable: true),
                    LastFloorUnitCount = table.Column<int>(type: "int", nullable: true),
                    WaterCounter = table.Column<long>(type: "bigint", nullable: true),
                    ElectricityCounter = table.Column<long>(type: "bigint", nullable: true),
                    Landarea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BuildingArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LandMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BuildingMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NorthBoundary = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    SouthBoundary = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    WestBoundary = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    EastBoundary = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ExpectedDeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ContractDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ProjectStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ProjectExpectedStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FundSource = table.Column<byte>(type: "tinyint", nullable: true),
                    PaidCapital = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProjectValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidCapitalPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpectedExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualExpensePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainExpensePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CompanySharePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommissionIsPercent = table.Column<bool>(type: "bit", nullable: true),
                    CommissionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProjectManagerId = table.Column<int>(type: "int", nullable: true),
                    CompanyShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ParkArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ParkMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RoofArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RoofMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GardenArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GardenMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BaseMentArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BasementMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_Projects", x => x.ProjectId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_ReInstallment",
                columns: table => new
                {
                    ReInstallId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    InstallTempDetailId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalNotPaidInstallVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DepositVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DepositRectId = table.Column<int>(type: "int", nullable: true),
                    NewInstallVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDiscount = table.Column<bool>(type: "bit", nullable: true),
                    DiscountVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NewEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsContract = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ReInstallment", x => x.ReInstallId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContract",
                columns: table => new
                {
                    TenderContractId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderOfferId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    ContractTypeId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate1 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    DownPayment = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DownPaymentPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ContractSituation = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    TotalAddsValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscs = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DownPaymentAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderSituation", x => x.TenderContractId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorContract",
                columns: table => new
                {
                    ContractorContractId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ContractTypeId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConsultAgreeDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerAgreeDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DownPayment = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DownPaymentPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ContractSituation = table.Column<byte>(type: "tinyint", nullable: true),
                    ContractStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    ContractorType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    ContractorId = table.Column<int>(type: "int", nullable: true),
                    DownPaymentAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscs = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorContract", x => x.ContractorContractId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorExitract",
                columns: table => new
                {
                    ContractorExitractId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorContractId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ContractorAccountId = table.Column<int>(type: "int", nullable: true),
                    ContractorHelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    OwnerAccountId = table.Column<int>(type: "int", nullable: true),
                    OwnerHelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConsultAgreeDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerAgreeDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    PlanStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    ContractorType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    ContractorId = table.Column<int>(type: "int", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscs = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorExitract", x => x.ContractorExitractId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderExecutionExitract",
                columns: table => new
                {
                    ExecutExitractId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderPlanId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate1 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    PlanStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    PmType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    PmId = table.Column<int>(type: "int", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderExecutionExitract", x => x.ExecutExitractId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderItems",
                columns: table => new
                {
                    TenderItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TenderItemCateId = table.Column<int>(type: "int", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderItems", x => x.TenderItemId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderItemsCategory",
                columns: table => new
                {
                    TenderItemCateId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderItemsCategory", x => x.TenderItemCateId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderOffer",
                columns: table => new
                {
                    TenderOfferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OfferStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderOffer", x => x.TenderOfferId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderOwnerExitract",
                columns: table => new
                {
                    OwnerExitractId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConsultAgreeDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerAgreeDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    PlanStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalAddsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscs = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDiscsValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderOwnerExitract", x => x.OwnerExitractId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderPlan",
                columns: table => new
                {
                    TenderPlanId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate1 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    PlanStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    PmType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    PmId = table.Column<int>(type: "int", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderPlan", x => x.TenderPlanId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderPlanDistribution",
                columns: table => new
                {
                    TenderPlanDistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderPlanId = table.Column<int>(type: "int", nullable: true),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinalDeliverDate1 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    PlanStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderPlanDistribution", x => x.TenderPlanDistId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderQoutation",
                columns: table => new
                {
                    TenderQoutationId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderId = table.Column<int>(type: "int", nullable: false),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReviewReasonId = table.Column<int>(type: "int", nullable: true),
                    ReviewStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QoutationStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCostAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderQoutation", x => x.TenderQoutationId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_Tenders",
                columns: table => new
                {
                    TenderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    OwnerType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    OwnerId = table.Column<int>(type: "int", nullable: true),
                    ConsultantType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    ConsultantId = table.Column<int>(type: "int", nullable: true),
                    SepcConsultantType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    SpecConsultantId = table.Column<int>(type: "int", nullable: true),
                    PmType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Customer ,2 Vendor,3 Employee, 4 Account, 5 Business partner"),
                    PmId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    IsInternal = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_Tenders", x => x.TenderId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_TendersReviewReasons",
                columns: table => new
                {
                    ReviewReasonId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TendersReviewReasons", x => x.ReviewReasonId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_UnitConcession",
                columns: table => new
                {
                    UnitConcessionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    InstallTempDetailId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commission = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ConcessionFee = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualSalesPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidBeforeConcession = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidInstallments = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_UnitConcession", x => x.UnitConcessionId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_UnitHistoryLog",
                columns: table => new
                {
                    ProjUnitHistoryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TableEntityId = table.Column<long>(type: "bigint", nullable: true),
                    LogActionDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_UnitHistoryLog", x => x.ProjUnitHistoryId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_UnitReplacement",
                columns: table => new
                {
                    UnitReplacId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    InstallTempDetailId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    OldProjUnitId = table.Column<int>(type: "int", nullable: true),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalNotPaidInstallVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DepositVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DepositRectId = table.Column<int>(type: "int", nullable: true),
                    NewInstallVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OldActualSalesPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualSalesPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_UnitReplacement", x => x.UnitReplacId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_UnitReservation",
                columns: table => new
                {
                    ReservId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    InstallTempId = table.Column<int>(type: "int", nullable: true),
                    InstallId = table.Column<int>(type: "int", nullable: true),
                    ContractTypeId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    IsCustBalancInstall = table.Column<bool>(type: "bit", nullable: true),
                    CustomerBalace = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractTrNo = table.Column<int>(type: "int", nullable: true),
                    ContractBookId = table.Column<int>(type: "int", nullable: true),
                    ContractDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PayStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    SalesEmpId = table.Column<int>(type: "int", nullable: true),
                    UnitMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidInCash = table.Column<bool>(type: "bit", nullable: true),
                    ActualSalesPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalInstallments = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidInstallments = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommissionPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommissionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeavePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeaveValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FeesPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FeesValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FinishMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FinishValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalServices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalUnitArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsContract = table.Column<bool>(type: "bit", nullable: true),
                    RoundType = table.Column<byte>(type: "tinyint", nullable: true, defaultValueSql: "((0))", comment: "0 without,1=10,2=100,3=1000,4=10000"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsRental = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    GaragCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Cost2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Cost3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_UnitReservation", x => x.ReservId);
                });

            migrationBuilder.CreateTable(
                name: "Proj_UnitReservationHistory",
                columns: table => new
                {
                    PeriodIncreasId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    PrevTrDateFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PrevTrDateTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NextTrDateFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NextTrDateTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExtendType = table.Column<byte>(type: "tinyint", nullable: true),
                    IncreaseValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExtendPeriod = table.Column<int>(type: "int", nullable: true),
                    ExtendSubPeriod = table.Column<int>(type: "int", nullable: true),
                    IsRental = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_UnitReservationHistory", x => x.PeriodIncreasId);
                });

            migrationBuilder.CreateTable(
                name: "Quality_Categories",
                columns: table => new
                {
                    QualityCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DamagDegree = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsRejected = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_QualityCategory", x => x.QualityCatId);
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemDelivery",
                columns: table => new
                {
                    ItemDeliverId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemRecQualityId = table.Column<int>(type: "int", nullable: true),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    StoreEmpId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPieces = table.Column<int>(type: "int", nullable: true),
                    DocBarCode = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    PackageCount = table.Column<int>(type: "int", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NotificationSent = table.Column<bool>(type: "bit", nullable: true),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Quality_ItemDelivery", x => x.ItemDeliverId);
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemRecCheck",
                columns: table => new
                {
                    ItemRecQualityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProdItemRecId = table.Column<int>(type: "int", nullable: true),
                    StoreEmpId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPieces = table.Column<int>(type: "int", nullable: true),
                    DocBarCode = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    PackageCount = table.Column<int>(type: "int", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NotificationSent = table.Column<bool>(type: "bit", nullable: true),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_prod_ItemRecQualityCheck", x => x.ItemRecQualityId);
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemReceivTypes",
                columns: table => new
                {
                    ItemRecTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemReceivTypes", x => x.ItemRecTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemRecieve",
                columns: table => new
                {
                    ProdItemRecId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemRecTypeId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPieces = table.Column<int>(type: "int", nullable: true),
                    Executed = table.Column<bool>(type: "bit", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NotificationSent = table.Column<bool>(type: "bit", nullable: true),
                    Approved = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemRecieve", x => x.ProdItemRecId);
                });

            migrationBuilder.CreateTable(
                name: "Repair_JobOrder",
                columns: table => new
                {
                    RepairId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true, comment: "ItemCardId"),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    DriverId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AddAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    ContainerTypeId = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeToLeav = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true, comment: "True Closed ;  False  Not Closed"),
                    Supervisor = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repair_JobOrder", x => x.RepairId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Brands",
                columns: table => new
                {
                    BrandId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Brands", x => x.BrandId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Complaints",
                columns: table => new
                {
                    ComID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ComName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ComName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ComDesc = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    ComSolution = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Add1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Complaints", x => x.ComID);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ContainerTypes",
                columns: table => new
                {
                    ContainerTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VehicleShapeId = table.Column<int>(type: "int", nullable: true),
                    VehicleTypId = table.Column<int>(type: "int", nullable: true),
                    ContainerCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Weight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Length = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Width = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Height = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UseDesc = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(254)", maxLength: 254, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ContainerTypes", x => x.ContainerTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Drivers",
                columns: table => new
                {
                    DriverId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrafficLineId = table.Column<int>(type: "int", nullable: true),
                    DriverCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    ID = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    PassPort = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DateOfBirth = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DriverLicense = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    LicenseDescription = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    LicenseIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LicenseRenewalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LicenseLegalPlace = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Drivers", x => x.DriverId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_FlateRate",
                columns: table => new
                {
                    FlatRateId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BrandId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCategoryId = table.Column<int>(type: "int", nullable: true),
                    HourCostRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HourPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_FlateRate", x => x.FlatRateId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Garage",
                columns: table => new
                {
                    GarageId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GarageCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Garage", x => x.GarageId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Harbors",
                columns: table => new
                {
                    HarborId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    HarborCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(254)", maxLength: 254, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Harbors", x => x.HarborId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Malfunctions",
                columns: table => new
                {
                    MalFunctionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Malfunctions", x => x.MalFunctionId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ProductsTypes",
                columns: table => new
                {
                    ProductTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ProductsTypes", x => x.ProductTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Programs",
                columns: table => new
                {
                    ProgramId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProgramCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Days = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MTSCruze = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Number = table.Column<byte>(type: "tinyint", nullable: true, comment: "single, double, Trible"),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Programs", x => x.ProgramId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Reciption",
                columns: table => new
                {
                    ReciptionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    VID = table.Column<int>(type: "int", nullable: true),
                    MileAge = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    RecevedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Reciption", x => x.ReciptionId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ReqOfQoutation",
                columns: table => new
                {
                    RoqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ValidityDays = table.Column<int>(type: "int", nullable: true),
                    Shipper = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    PortOfLoading = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PortOfDischarge = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Commodity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Equipment = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Volume = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TargetRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Recommendation = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TruckingFrom = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TruckingTo = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ReqOfQoutation", x => x.RoqId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ServiceDistribution",
                columns: table => new
                {
                    SerDistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    VisitDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ServiceDistribution", x => x.SerDistId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ServiceRequest",
                columns: table => new
                {
                    SerReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemStatus = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Good,2 Weak, Perfect 3"),
                    BrandId = table.Column<int>(type: "int", nullable: true),
                    ProductTypeId = table.Column<int>(type: "int", nullable: true),
                    ReqResourcId = table.Column<int>(type: "int", nullable: true),
                    MaintainTypeId = table.Column<int>(type: "int", nullable: true),
                    CapcityId = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    WId = table.Column<int>(type: "int", nullable: true),
                    SerialNo1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SerialNo2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ModelNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Complain = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    QoutationPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VistitDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InWarranty = table.Column<bool>(type: "bit", nullable: true),
                    WarrantyEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RequestStatus = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 opened,2 closed"),
                    CloseReason = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ServiceRequest", x => x.SerReqId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ServiceRequestResources",
                columns: table => new
                {
                    ReqResourcId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ServiceRequestResources", x => x.ReqResourcId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ServiceTypes",
                columns: table => new
                {
                    SrTypID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SrCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SrName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SrName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SrDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ServiceTypes", x => x.SrTypID);
                });

            migrationBuilder.CreateTable(
                name: "Sr_ShippingDeclaration",
                columns: table => new
                {
                    ShipDeclarId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoqId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ValidityDays = table.Column<int>(type: "int", nullable: true),
                    Shipper = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    Consignee = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    VesselName = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    PortOfLoading = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PortOfDischarge = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FreightPayableAt = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    BillOfLading = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Notify = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    MarksAndNumbers = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    ContainersDRY = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    NetWeightTons = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    GrossWeightTons = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ShippingDeclaration", x => x.ShipDeclarId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_TrafficLines",
                columns: table => new
                {
                    TrafficLineId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrafficCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TrafficFrom = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TrafficTo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    FromHarborId = table.Column<int>(type: "int", nullable: true),
                    ToHarborId = table.Column<int>(type: "int", nullable: true),
                    KM = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PricebyContainer = table.Column<bool>(type: "bit", nullable: true),
                    PricebyVehicl = table.Column<bool>(type: "bit", nullable: true),
                    EstimatCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CostbyContainer = table.Column<bool>(type: "bit", nullable: true),
                    CostbyVehicl = table.Column<bool>(type: "bit", nullable: true),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_TrafficLines", x => x.TrafficLineId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Trips",
                columns: table => new
                {
                    TripId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    TourGuideEmpId = table.Column<int>(type: "int", nullable: true),
                    TourLeaderEmpId = table.Column<int>(type: "int", nullable: true),
                    TourGuideName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TourLeaderName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivalTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeparturDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeparturTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ArrivedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DepartureBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Approver = table.Column<bool>(type: "bit", nullable: true),
                    ApprovedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ApprovedByEmpId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Guid = table.Column<bool>(type: "bit", nullable: true),
                    Visa = table.Column<bool>(type: "bit", nullable: true),
                    Others = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    PersonsCount = table.Column<byte>(type: "tinyint", nullable: true),
                    Agent = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Program = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Names = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OperatorName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_St_Trips", x => x.TripId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleMovement",
                columns: table => new
                {
                    VehiclMovId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetTime = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesTaxes1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesTaxes2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesTaxes3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AdvancExpenseWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AdvancExpenseBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleMovement", x => x.VehiclMovId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleRenalContract",
                columns: table => new
                {
                    VRentContractId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true, comment: "ItemCardId"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DriverId1 = table.Column<int>(type: "int", nullable: true),
                    DriverId2 = table.Column<int>(type: "int", nullable: true),
                    DriverId3 = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    HotelId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpectedStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RealStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    GetOutDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PaymentMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    HotelRoom = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    StartCounter = table.Column<long>(type: "bigint", nullable: true),
                    EndCounter = table.Column<long>(type: "bigint", nullable: true),
                    ConsumedCounter = table.Column<long>(type: "bigint", nullable: true),
                    AllowanceCounter = table.Column<long>(type: "bigint", nullable: true),
                    ExtraCounter = table.Column<long>(type: "bigint", nullable: true),
                    DailyCounter = table.Column<long>(type: "bigint", nullable: true),
                    FuelIn = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    FuelOut = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    VisaNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Type = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    VisaExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    VisaCode = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    VisaAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VisaApproved = table.Column<bool>(type: "bit", nullable: true),
                    InsuranceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InsuranceValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractDays = table.Column<int>(type: "int", nullable: true),
                    DayPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DeliveryCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DriverCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FuelCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaintenanceCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VAT = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Deposit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetDue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Repaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    TotalPurchInv = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPayment = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPaidReciept = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalSalesInv = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCostBeforeCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Profit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true),
                    ClosingDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleRenalContract", x => x.VRentContractId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleShapes",
                columns: table => new
                {
                    VehicleShapeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShapeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleShapes", x => x.VehicleShapeId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleTypes",
                columns: table => new
                {
                    VehicleTypId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleTypes", x => x.VehicleTypId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_VheicleJobOrderType",
                columns: table => new
                {
                    VOrderTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AddAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    VOrderTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    IsANCOdeMandatory = table.Column<bool>(type: "bit", nullable: true),
                    GetCustomerFromAn = table.Column<bool>(type: "bit", nullable: true),
                    GetVendorFromAn = table.Column<bool>(type: "bit", nullable: true),
                    GetItemFromAn = table.Column<bool>(type: "bit", nullable: true),
                    IsCustomerMandatory = table.Column<bool>(type: "bit", nullable: true),
                    GetCostCenterIdFromAN = table.Column<bool>(type: "bit", nullable: true),
                    GetAccountIdFromAN = table.Column<bool>(type: "bit", nullable: true),
                    IsDriverMandatory = table.Column<bool>(type: "bit", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VheicleJobOrderType", x => x.VOrderTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Sr_Warranty",
                columns: table => new
                {
                    WId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    WName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    WName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    WConditions = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true, collation: "Arabic_CI_AI"),
                    WMethod = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 periodic,1 distance, 2 both"),
                    WPeriodMonths = table.Column<int>(type: "int", nullable: true),
                    WDistance = table.Column<int>(type: "int", nullable: true),
                    WUse = table.Column<bool>(type: "bit", nullable: true),
                    Exemption = table.Column<bool>(type: "bit", nullable: true),
                    ExemptionPercnt = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Warranty", x => x.WId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Archives",
                columns: table => new
                {
                    StockArchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Archives", x => x.StockArchId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Brokers",
                columns: table => new
                {
                    StockBrokersId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Brokers", x => x.StockBrokersId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_CashTransfer",
                columns: table => new
                {
                    StockCashTransferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockTranTypId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    FromStockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    AccountIdFrom = table.Column<int>(type: "int", nullable: true),
                    ToStockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    AccountIdTo = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TrTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Amount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_CashTransfer", x => x.StockCashTransferId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_CashWithdrawalReasons",
                columns: table => new
                {
                    StockCashWithdrId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_CashWithdrawalReasons", x => x.StockCashWithdrId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Categories",
                columns: table => new
                {
                    StockCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Categories", x => x.StockCatId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Dealers",
                columns: table => new
                {
                    StockDealersId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Phone1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Phone2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    FAX = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Address = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    BrokerPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MarketFixedPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MarketOtherPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Dealers", x => x.StockDealersId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Markets",
                columns: table => new
                {
                    StockMarketId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Markets", x => x.StockMarketId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_OpenningBalance",
                columns: table => new
                {
                    StockOpenId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockTranTypId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    StockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FollowCash = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_OpenningBalance", x => x.StockOpenId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Portfolio",
                columns: table => new
                {
                    StockPortfolioId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PortfolioNo = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    StockBrokersId = table.Column<int>(type: "int", nullable: true),
                    ManagedByOthers = table.Column<bool>(type: "bit", nullable: true),
                    FollowOtherPortfolio = table.Column<bool>(type: "bit", nullable: true),
                    StockBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvestBoxBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CashBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Portfolio", x => x.StockPortfolioId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_SalesPurchase",
                columns: table => new
                {
                    StockSalPurchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockTranTypId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    StockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FollowCash = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_SalesPurchase", x => x.StockSalPurchId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Sectors",
                columns: table => new
                {
                    StockSectorsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Sectors", x => x.StockSectorsId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_ShareholdersNames",
                columns: table => new
                {
                    StockholderNamesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_ShareholdersNames", x => x.StockholderNamesId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_Transfer",
                columns: table => new
                {
                    StockTransferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockTranTypId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    FromStockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    ToStockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Transfer", x => x.StockTransferId);
                });

            migrationBuilder.CreateTable(
                name: "Stock_TranTypes",
                columns: table => new
                {
                    StockTranTypId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermType = table.Column<byte>(type: "tinyint", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    StockEffect = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Plus, 2 Minus, 3 Without"),
                    CashEffect1 = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Plus, 2 Minus, 3 Without"),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_TranTypes", x => x.StockTranTypId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_AnalyticalCodes",
                columns: table => new
                {
                    AId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ParentAId = table.Column<int>(type: "int", nullable: true),
                    CodeLevel = table.Column<int>(type: "int", nullable: true),
                    CodeLevelType = table.Column<byte>(type: "tinyint", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    Stopped = table.Column<bool>(type: "bit", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BSPartnerId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField11 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField12 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField13 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField14 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField15 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField16 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField17 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField18 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField19 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField20 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField21 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField22 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField23 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField24 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField25 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AccomulatAId = table.Column<int>(type: "int", nullable: true),
                    AnDate1 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AnDate2 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AnDate3 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsNotify1 = table.Column<bool>(type: "bit", nullable: true),
                    NotifyDate1 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsNotify2 = table.Column<bool>(type: "bit", nullable: true),
                    NotifyDate2 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsNotify3 = table.Column<bool>(type: "bit", nullable: true),
                    NotifyDate3 = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField26 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField27 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField28 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField29 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField30 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_AnalyticalCodes", x => x.AId);
                });

            migrationBuilder.CreateTable(
                name: "sys_AnalyticalCodeUpdateTypes",
                columns: table => new
                {
                    AnUpdateTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CarCapacity = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sys_AnalyticalCodeUpdateTypes", x => x.AnUpdateTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_Basket",
                columns: table => new
                {
                    BasketId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    FromUser = table.Column<int>(type: "int", nullable: true),
                    DocName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    DocTrNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TransferDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    WachDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    ClosedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Message = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_Basket", x => x.BasketId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_Books",
                columns: table => new
                {
                    BookId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrefixCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BookNameAR = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BookNameEN = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TermType = table.Column<byte>(type: "tinyint", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AutoSerial = table.Column<bool>(type: "bit", nullable: true),
                    SystemIssuedOnly = table.Column<bool>(type: "bit", nullable: true),
                    IsDefault = table.Column<bool>(type: "bit", nullable: true),
                    StartNum = table.Column<int>(type: "int", nullable: true),
                    EndNum = table.Column<int>(type: "int", nullable: true),
                    PostType = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_Books", x => x.BookId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_City",
                columns: table => new
                {
                    SysCityID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    cityName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    CountryCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_BIN"),
                    latitude = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    longitude = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_City", x => x.SysCityID);
                });

            migrationBuilder.CreateTable(
                name: "sys_configsms",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    namesrvices = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    pasth = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    keeey = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    sender = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    code = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sys_configsms", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "Sys_Counter",
                columns: table => new
                {
                    CounterId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Counter = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_Counter", x => x.CounterId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_Countries",
                columns: table => new
                {
                    CountryCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Arabic_BIN"),
                    CountryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CountryName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    latitude = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    longitude = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_Countries", x => x.CountryCode);
                });

            migrationBuilder.CreateTable(
                name: "Sys_FinancialYears",
                columns: table => new
                {
                    FinancialYearsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialYearsCode = table.Column<int>(type: "int", nullable: true),
                    FinancialYearNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    FinancialYearNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StartingFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StartingFromHijri = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    EndTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EndToHijri = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ClosingDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosingDateHijri = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    YearState = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    NoOfIntervals = table.Column<int>(type: "int", nullable: true),
                    YearType = table.Column<bool>(type: "bit", nullable: true),
                    SubPeriodsType = table.Column<byte>(type: "tinyint", nullable: true),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    StopReason = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    StoppedByUserId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_FinancialYears", x => x.FinancialYearsId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_FinancialYearsClosing",
                columns: table => new
                {
                    ClosingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ClosingCode = table.Column<int>(type: "int", nullable: true),
                    FinancialYearsId = table.Column<int>(type: "int", nullable: false),
                    ClosingDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosingDateHejri = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CurrentYear = table.Column<int>(type: "int", nullable: true),
                    ClosingAccountId = table.Column<int>(type: "int", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsCancel = table.Column<bool>(type: "bit", nullable: true),
                    IsTransfer = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_FinancialYearsClosing", x => x.ClosingId);
                });

            migrationBuilder.CreateTable(
                name: "sys_FlexLists",
                columns: table => new
                {
                    FlexListId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NamingId = table.Column<int>(type: "int", nullable: true),
                    FlexCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FlexName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    FlexName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    FieldCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Value1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Value2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Value3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Value4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Value5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Enabled = table.Column<bool>(type: "bit", nullable: true),
                    Culture = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AllLanguages = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sys_FlexLists", x => x.FlexListId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_Naming",
                columns: table => new
                {
                    NamingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Culture = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Screen = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CtrlName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CtrlOriginalText = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    CtrlNewText = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    CtrlTextBefore = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    IsAllUsers = table.Column<bool>(type: "bit", nullable: true),
                    HasFlexFields = table.Column<bool>(type: "bit", nullable: true),
                    FlexMasterCardTable = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SelectedField = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    MustSelect = table.Column<bool>(type: "bit", nullable: true),
                    Hidden = table.Column<bool>(type: "bit", nullable: true),
                    CtrlLocationX = table.Column<int>(type: "int", nullable: true),
                    CtrlLocationY = table.Column<int>(type: "int", nullable: true),
                    CtrlParentIsTPL = table.Column<bool>(type: "bit", nullable: true),
                    CtrlParent = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    CtrlParentType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CtrlType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsDropDown = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_Naming", x => x.NamingId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_Notifications",
                columns: table => new
                {
                    NotiFyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotifyTypeId = table.Column<int>(type: "int", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    NextNotify = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NotifyMessage = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TableEntityDetailId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_Notifications", x => x.NotiFyId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_NotificationTypes",
                columns: table => new
                {
                    NotifyTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    NotifyInDays = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_NotificationTypes", x => x.NotifyTypeId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_RemotBranchesLog",
                columns: table => new
                {
                    LogId = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    LogTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    LogType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 insert,2 update,3 delete"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    LogTimStamp = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    RemotExecuted = table.Column<bool>(type: "bit", nullable: true),
                    IsMasterFile = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_RemotBranchesLog", x => x.LogId);
                });

            migrationBuilder.CreateTable(
                name: "Sys_RemotTranLog",
                columns: table => new
                {
                    LogId = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    LogTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    LogType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 insert,2 update,3 delete"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    LogTimStamp = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    RemotExecuted = table.Column<bool>(type: "bit", nullable: true),
                    IsMasterFile = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_RemotTranLog", x => x.LogId);
                });

            migrationBuilder.CreateTable(
                name: "SysLog",
                columns: table => new
                {
                    LogID = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TablName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    RowIndex = table.Column<int>(type: "int", nullable: true),
                    LogAction = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    LogDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ScreenName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ScreenNameAr = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TablDetailName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    FieldName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    FieldNameAr = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    FieldDetail = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true, collation: "Arabic_CI_AI"),
                    OldValue = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true, collation: "Arabic_CI_AI"),
                    NewValue = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SysLog", x => x.LogID);
                });

            migrationBuilder.CreateTable(
                name: "Tr_OpenningBalance",
                columns: table => new
                {
                    Tr_OpenningBalanceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    ExplainId = table.Column<int>(type: "int", nullable: true),
                    TotalDebitor = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCreditor = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Balance = table.Column<decimal>(type: "numeric(38,1)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tr_OpenningBalance", x => x.Tr_OpenningBalanceId);
                });

            migrationBuilder.CreateTable(
                name: "WorForc_Firms",
                columns: table => new
                {
                    WFCompId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CompCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OwnerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Address = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    TaxRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorForc_Firms", x => x.WFCompId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_ActionTypes",
                columns: table => new
                {
                    ActionTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ActionCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    StopPassport = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_ActionTypes", x => x.ActionTypeId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_BloodExeclude",
                columns: table => new
                {
                    BloodExecludId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ActionTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_BloodExeclude", x => x.BloodExecludId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_FirstCustExeclude",
                columns: table => new
                {
                    ExecludId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_FirstCustExeclude", x => x.ExecludId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_PassPorts",
                columns: table => new
                {
                    WFPassPortId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PassportNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name5 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name6 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name7 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Nameen = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name2en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name3en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name4en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name5en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name6en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name7en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FullNameen = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassOwnerId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    Gender = table.Column<bool>(type: "bit", nullable: true),
                    MaritalStatus = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 single,1 married,2 married and have kids"),
                    KidsNo = table.Column<byte>(type: "tinyint", nullable: true),
                    BirthDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IDIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IDExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportIssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Phone1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Phone2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Phone3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    MilitaryService = table.Column<byte>(type: "tinyint", nullable: true),
                    IDmage1 = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    PassPortImage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ActionTypeId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    Execluded = table.Column<bool>(type: "bit", nullable: true),
                    WFCompId = table.Column<int>(type: "int", nullable: true),
                    CustSerial = table.Column<int>(type: "int", nullable: true),
                    CountryEncCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankSerial = table.Column<int>(type: "int", nullable: true),
                    EngazKey = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ReportSerial = table.Column<int>(type: "int", nullable: true),
                    EngazPayed = table.Column<bool>(type: "bit", nullable: true),
                    VisaNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SignOff = table.Column<bool>(type: "bit", nullable: true),
                    SignOffDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ContractPath = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ContractPrinted = table.Column<bool>(type: "bit", nullable: true),
                    ContractPrintDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ContractPrintedUser = table.Column<int>(type: "int", nullable: true),
                    PermissionUploaded = table.Column<bool>(type: "bit", nullable: true),
                    PermissionUploadDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PermissionUploadNum = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BlackList = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_PassPorts", x => x.WFPassPortId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_PassPortsArchives",
                columns: table => new
                {
                    WFPassPortArchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WFPassPortId = table.Column<int>(type: "int", nullable: false),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PassportNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name5 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name6 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name7 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Nameen = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name2en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name3en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name4en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name5en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name6en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name7en = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FullNameen = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassOwnerId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    Gender = table.Column<bool>(type: "bit", nullable: true),
                    MaritalStatus = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 single,1 married,2 married and have kids"),
                    KidsNo = table.Column<byte>(type: "tinyint", nullable: true),
                    BirthDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IDIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IDExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportIssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Phone1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Phone2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Phone3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    MilitaryService = table.Column<byte>(type: "tinyint", nullable: true),
                    IDmage1 = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    PassPortImage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    Execluded = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_PassPortsArchives", x => x.WFPassPortArchId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_Problems",
                columns: table => new
                {
                    WorkForc_ProbId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WFPassPortId = table.Column<int>(type: "int", nullable: false),
                    Complaint = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ComplaintType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_Problems", x => x.WorkForc_ProbId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_Queue",
                columns: table => new
                {
                    id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PassportNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    dateat = table.Column<DateTime>(type: "date", nullable: true),
                    timeat = table.Column<TimeSpan>(type: "time", nullable: true),
                    rolnum = table.Column<int>(type: "int", nullable: true),
                    seasonid = table.Column<int>(type: "int", nullable: true),
                    WFPassPortId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_Queue", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_Seasons",
                columns: table => new
                {
                    SeasonId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SeasonCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EmbassyDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AcceptAgeFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AcceptAgeTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortExpiry = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CountryEnc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsCurrentSeason = table.Column<bool>(type: "bit", nullable: true),
                    IsPreviousSeason = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_Seasons", x => x.SeasonId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_SecondCustExeclude",
                columns: table => new
                {
                    ScndExecludId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_SecondCustExeclude", x => x.ScndExecludId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_TempIds",
                columns: table => new
                {
                    WFtempId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PersonID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    Succeeded = table.Column<bool>(type: "bit", nullable: true),
                    PersonImage = table.Column<byte[]>(type: "image", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Grade = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    ImagePath = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ImagePath2 = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ImagePath3 = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PersonImagePath = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    Grade2 = table.Column<decimal>(type: "numeric(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_TempIds", x => x.WFtempId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_Templates",
                columns: table => new
                {
                    WFTempId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_Templates", x => x.WFTempId);
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_TestResults",
                columns: table => new
                {
                    TestResultId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    SeasonId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_TestResults", x => x.TestResultId);
                });

            migrationBuilder.CreateTable(
                name: "YearMonthes",
                columns: table => new
                {
                    YearMonthId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialYearsId = table.Column<int>(type: "int", nullable: true),
                    MontnName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_BIN"),
                    MonthDayes = table.Column<int>(type: "int", nullable: true),
                    IsActual = table.Column<bool>(type: "bit", nullable: true),
                    IsNonActual = table.Column<bool>(type: "bit", nullable: true),
                    CustomField = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_BIN")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_YearMonthes", x => x.YearMonthId);
                });

            migrationBuilder.CreateTable(
                name: "An_AnimalDeathDetail",
                columns: table => new
                {
                    AnDeathIdDetail = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AnDeathId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    QuantityRecieved = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyRecievedBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    AnimalAge = table.Column<int>(type: "int", nullable: true),
                    ISMedicinNotify = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_AnimalDeathDetail", x => x.AnDeathIdDetail);
                    table.ForeignKey(
                        name: "FK_An_AnimalDeathDetail_An_AnimalDeath",
                        column: x => x.AnDeathId,
                        principalTable: "An_AnimalDeath",
                        principalColumn: "AnDeathId");
                });

            migrationBuilder.CreateTable(
                name: "An_AnimalWeightRateDetail",
                columns: table => new
                {
                    AnWeightRateDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AnWeightRateId = table.Column<int>(type: "int", nullable: true),
                    AnTypeId = table.Column<int>(type: "int", nullable: true),
                    AnimalItemCardId = table.Column<int>(type: "int", nullable: true),
                    FoodItemCardId = table.Column<int>(type: "int", nullable: true),
                    FromAge = table.Column<int>(type: "int", nullable: true),
                    ToAge = table.Column<int>(type: "int", nullable: true),
                    FromWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ToWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeightRateFrom = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeightRateTo = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MinWeightPrcnt = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_AnimalWeightRateDetail", x => x.AnWeightRateDetailId);
                    table.ForeignKey(
                        name: "FK_An_AnimalWeightRateDetail_An_AnimalWeightRate",
                        column: x => x.AnWeightRateId,
                        principalTable: "An_AnimalWeightRate",
                        principalColumn: "AnWeightRateId");
                });

            migrationBuilder.CreateTable(
                name: "An_ANimalMidicin",
                columns: table => new
                {
                    AnAnimalMidicinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AnMidicinId = table.Column<int>(type: "int", nullable: false),
                    AnTypeId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shots = table.Column<byte>(type: "tinyint", nullable: true),
                    AnimalAge = table.Column<int>(type: "int", nullable: true, comment: "Days"),
                    Weight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NextNotify = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_ANimalMidicin", x => x.AnAnimalMidicinId);
                    table.ForeignKey(
                        name: "FK_An_ANimalMidicin_An_AnimalType",
                        column: x => x.AnTypeId,
                        principalTable: "An_AnimalType",
                        principalColumn: "AnTypeId");
                    table.ForeignKey(
                        name: "FK_An_ANimalMidicin_An_Medicin",
                        column: x => x.AnMidicinId,
                        principalTable: "An_Medicin",
                        principalColumn: "AnMidicinId");
                });

            migrationBuilder.CreateTable(
                name: "An_NewBornDetail",
                columns: table => new
                {
                    AnBornIdDetail = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AnBornId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    QuantityRecieved = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyRecievedBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    AnimalAge = table.Column<int>(type: "int", nullable: true),
                    ISMedicinNotify = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_An_NewBornDetail", x => x.AnBornIdDetail);
                    table.ForeignKey(
                        name: "FK_An_NewBornDetail_An_NewBorn",
                        column: x => x.AnBornId,
                        principalTable: "An_NewBorn",
                        principalColumn: "AnBornId");
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetAddDocDetail",
                columns: table => new
                {
                    AddAssetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetAddId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    AddValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetAddDocDetail", x => x.AddAssetDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetAddDocDetail_Asset_AssetAddDoc",
                        column: x => x.AssetAddId,
                        principalTable: "Asset_AssetAddDoc",
                        principalColumn: "AssetAddId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetCard",
                columns: table => new
                {
                    AssetId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetCatId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrentEmpId = table.Column<int>(type: "int", nullable: true),
                    AssetCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    NoDepreciation = table.Column<bool>(type: "bit", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: true),
                    PurchDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PurchDoc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    VendorDesc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SerialNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    WarrantyTerms = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    WarrantyDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    WarrantyNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InsuranceExpiry = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ResponsiblePerson = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MarketPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Barcode = table.Column<byte>(type: "tinyint", nullable: true),
                    PurchPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastDeprDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeprStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeprInstallmentVal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InstallMentCount = table.Column<int>(type: "int", nullable: true),
                    RemainInstallments = table.Column<int>(type: "int", nullable: true),
                    DeprMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    ProductivPeriod = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentBookValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JunkValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsProduction = table.Column<bool>(type: "bit", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    CarLicenseNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CarLicenseIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtReg = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtRegRenew = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Address = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxCustType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, comment: "Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetCard", x => x.AssetId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetCard_Asset_AssetCategory",
                        column: x => x.AssetCatId,
                        principalTable: "Asset_AssetCategory",
                        principalColumn: "AssetCatId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetDeductDocDetail",
                columns: table => new
                {
                    DeductAssetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetDeductId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    DeductValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetDeductDocDetail", x => x.DeductAssetDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetDeductDocDetail_Asset_AssetDeductDoc",
                        column: x => x.AssetDeductId,
                        principalTable: "Asset_AssetDeductDoc",
                        principalColumn: "AssetDeductId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetDeliverDocDetail",
                columns: table => new
                {
                    DeliverAssetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeliverAssetId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AddValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetDeliverDocDetail", x => x.DeliverAssetDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetDeliverDocDetail_Asset_AssetDeliverDoc",
                        column: x => x.DeliverAssetId,
                        principalTable: "Asset_AssetDeliverDoc",
                        principalColumn: "DeliverAssetId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetFixDocDetail",
                columns: table => new
                {
                    FixAssetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FixAssetId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    FixValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetFixDocDetail", x => x.FixAssetDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetFixDocDetail_Asset_AssetFixDoc",
                        column: x => x.FixAssetId,
                        principalTable: "Asset_AssetFixDoc",
                        principalColumn: "FixAssetId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetMoveDocDetail",
                columns: table => new
                {
                    AssetMovDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetMovId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    OldStoreId = table.Column<int>(type: "int", nullable: true),
                    NewStoreId = table.Column<int>(type: "int", nullable: true),
                    OldDepartMentId = table.Column<int>(type: "int", nullable: true),
                    NewDepartMentId = table.Column<int>(type: "int", nullable: true),
                    MoveCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetMoveDocDetail", x => x.AssetMovDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetMoveDocDetail_Asset_AssetMoveDoc",
                        column: x => x.AssetMovId,
                        principalTable: "Asset_AssetMoveDoc",
                        principalColumn: "AssetMovId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetReceiveDocDetail",
                columns: table => new
                {
                    ReceiveAssetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReceiveAssetId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AddValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetReceiveDocDetail", x => x.ReceiveAssetDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetReceiveDocDetail_Asset_AssetReceiveDoc",
                        column: x => x.ReceiveAssetId,
                        principalTable: "Asset_AssetReceiveDoc",
                        principalColumn: "ReceiveAssetId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetSettingDetails",
                columns: table => new
                {
                    AssetSetDetails = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetSetId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    DeprStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UsablifeTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ScrapValu = table.Column<decimal>(type: "decimal(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetSettingDetails", x => x.AssetSetDetails);
                    table.ForeignKey(
                        name: "FK_Asset_AssetSettingDetails_Asset_AssetSettings",
                        column: x => x.AssetSetId,
                        principalTable: "Asset_AssetSettings",
                        principalColumn: "AssetSetId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_DepreciationDocDetail",
                columns: table => new
                {
                    DeprDocDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeprDocId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    DebitCostcenterId = table.Column<int>(type: "int", nullable: true),
                    CreditCostCenterId = table.Column<int>(type: "int", nullable: true),
                    DebitAssetAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditAssetAccountId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_DepreciationDocDetail", x => x.DeprDocDetailId);
                    table.ForeignKey(
                        name: "FK_Asset_DepreciationDocDetail_Asset_DepreciationDoc",
                        column: x => x.DeprDocId,
                        principalTable: "Asset_DepreciationDoc",
                        principalColumn: "DeprDocId");
                });

            migrationBuilder.CreateTable(
                name: "BNK_BankNoticeDetail",
                columns: table => new
                {
                    BankNoticDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BankNoticId = table.Column<int>(type: "int", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    IsCollected = table.Column<bool>(type: "bit", nullable: true),
                    CollectDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsReturned = table.Column<bool>(type: "bit", nullable: true),
                    ReturnDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Canceled = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsTransferred = table.Column<bool>(type: "bit", nullable: true),
                    TransferredAte = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BNK_BankNoticeDetail", x => x.BankNoticDetailId);
                    table.ForeignKey(
                        name: "FK_BNK_BankNoticeDetail_BNk_BankNotice",
                        column: x => x.BankNoticId,
                        principalTable: "BNk_BankNotice",
                        principalColumn: "BankNoticId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_BudgetDetails",
                columns: table => new
                {
                    BudgetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BudgetId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    FromFinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    ToFinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    Debit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Credit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_BudgetDetails", x => x.BudgetDetailId);
                    table.ForeignKey(
                        name: "FK_Cal_BudgetDetails_Cal_Budget",
                        column: x => x.BudgetId,
                        principalTable: "Cal_Budget",
                        principalColumn: "BudgetId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_InstallmentTempsDetail",
                columns: table => new
                {
                    InstallTempDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InstallTempId = table.Column<int>(type: "int", nullable: true),
                    PayTypeId = table.Column<int>(type: "int", nullable: true),
                    PayCount = table.Column<int>(type: "int", nullable: true),
                    PayRepeat = table.Column<int>(type: "int", nullable: true),
                    YearOrder = table.Column<int>(type: "int", nullable: true),
                    MonthOrder = table.Column<int>(type: "int", nullable: true),
                    PayValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MonthOfInstall = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_InstallmentTempsDetail", x => x.InstallTempDetailId);
                    table.ForeignKey(
                        name: "FK_Cod_InstallmentTempsDetail_Cod_InstallmentTemps",
                        column: x => x.InstallTempId,
                        principalTable: "Cod_InstallmentTemps",
                        principalColumn: "InstallTempId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandPermitActivJoin",
                columns: table => new
                {
                    LandPermitActivJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LandId = table.Column<int>(type: "int", nullable: true),
                    LandPermitActivId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandPermitActivJoin", x => x.LandPermitActivJoinId);
                    table.ForeignKey(
                        name: "FK_Cod_LandPermitActivJoin_Cod_LandPermtActiv",
                        column: x => x.LandPermitActivId,
                        principalTable: "Cod_LandPermtActiv",
                        principalColumn: "LandPermitActivId");
                    table.ForeignKey(
                        name: "FK_Cod_LandPermitActivJoin_Cod_Lands",
                        column: x => x.LandId,
                        principalTable: "Cod_Lands",
                        principalColumn: "LandId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandPosJoin",
                columns: table => new
                {
                    LandPosJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LandId = table.Column<int>(type: "int", nullable: true),
                    LandPosId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandPosJoin", x => x.LandPosJoinId);
                    table.ForeignKey(
                        name: "FK_Cod_LandPosJoin_Cod_LandPositions",
                        column: x => x.LandPosId,
                        principalTable: "Cod_LandPositions",
                        principalColumn: "LandPosId");
                    table.ForeignKey(
                        name: "FK_Cod_LandPosJoin_Cod_Lands",
                        column: x => x.LandId,
                        principalTable: "Cod_Lands",
                        principalColumn: "LandId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_LandRetainResJoin",
                columns: table => new
                {
                    LandRetainResJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LandId = table.Column<int>(type: "int", nullable: true),
                    LandRetainResId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_LandRetainResJoin", x => x.LandRetainResJoinId);
                    table.ForeignKey(
                        name: "FK_Cod_LandRetainResJoin_Cod_LandRetainRsons",
                        column: x => x.LandRetainResId,
                        principalTable: "Cod_LandRetainRsons",
                        principalColumn: "LandRetainResId");
                    table.ForeignKey(
                        name: "FK_Cod_LandRetainResJoin_Cod_Lands",
                        column: x => x.LandId,
                        principalTable: "Cod_Lands",
                        principalColumn: "LandId");
                });

            migrationBuilder.CreateTable(
                name: "Contr_InstallMentDetail",
                columns: table => new
                {
                    InstallDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InstallId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    Serial = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PayDayDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InstallValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contr_InstallMentDetail", x => x.InstallDetailId);
                    table.ForeignKey(
                        name: "FK_Contr_InstallMentDetail_Contr_InstallMent",
                        column: x => x.InstallId,
                        principalTable: "Contr_InstallMent",
                        principalColumn: "InstallId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_LeadsMembersDetails",
                columns: table => new
                {
                    LeadMemberDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LeadMemberId = table.Column<int>(type: "int", nullable: true),
                    LeadId = table.Column<int>(type: "int", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_LeadsMembersDetails", x => x.LeadMemberDetailId);
                    table.ForeignKey(
                        name: "FK_CRM_LeadsMembersDetails_CRM_LeadsMembers",
                        column: x => x.LeadMemberId,
                        principalTable: "CRM_LeadsMembers",
                        principalColumn: "LeadMemberId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Leads",
                columns: table => new
                {
                    LeadId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LeadTypeId = table.Column<int>(type: "int", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    MarketChannelId = table.Column<int>(type: "int", nullable: true),
                    IsOpportunity = table.Column<bool>(type: "bit", nullable: true),
                    IsCustomer = table.Column<bool>(type: "bit", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    LeadCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    LeadName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    LeadName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AssignedToEmpId = table.Column<int>(type: "int", nullable: true),
                    FormerProduct = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsTaxExempted = table.Column<bool>(type: "bit", nullable: true),
                    CreditPeriod = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day, 2 month, 3 year"),
                    CreditLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLimitAllowed = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Nationality = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DateOfBirth = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PassPortIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InternationalLicense = table.Column<bool>(type: "bit", nullable: true),
                    CarLicenseNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CarLicenseIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtReg = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtRegRenew = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Company = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CustJob = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CustID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Barcode = table.Column<byte>(type: "tinyint", nullable: true),
                    SalPrice = table.Column<byte>(type: "tinyint", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    DefaultDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReportDiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercentOrVal = table.Column<bool>(type: "bit", nullable: true),
                    ForAdjustOnly = table.Column<bool>(type: "bit", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    IsDiscountByItem = table.Column<bool>(type: "bit", nullable: true),
                    IsBlocked = table.Column<bool>(type: "bit", nullable: true),
                    IsCreditEnabled = table.Column<bool>(type: "bit", nullable: true),
                    IsPricIncludTax = table.Column<bool>(type: "bit", nullable: true),
                    TaxExemptionNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrePaidPercent = table.Column<decimal>(type: "decimal(18,5)", nullable: true),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    HomePage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    InvoiceCopies = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Leads", x => x.LeadId);
                    table.ForeignKey(
                        name: "FK_CRM_Leads_CRM_LeadTypes",
                        column: x => x.LeadTypeId,
                        principalTable: "CRM_LeadTypes",
                        principalColumn: "LeadTypeId");
                    table.ForeignKey(
                        name: "FK_CRM_Leads_CRM_MarketChannels",
                        column: x => x.MarketChannelId,
                        principalTable: "CRM_MarketChannels",
                        principalColumn: "MarketChannelId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_SalesPlanDetail",
                columns: table => new
                {
                    SalesPlanDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesPlanId = table.Column<int>(type: "int", nullable: true),
                    LeadId = table.Column<int>(type: "int", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Mission = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_SalesPlanDetail", x => x.SalesPlanDetailId);
                    table.ForeignKey(
                        name: "FK_CRM_SalesPlanDetail_CRM_SalesPlan",
                        column: x => x.SalesPlanId,
                        principalTable: "CRM_SalesPlan",
                        principalColumn: "SalesPlanId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_TeamMembers",
                columns: table => new
                {
                    TeamMemberId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TeamId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    MemberCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    MemberName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    MemberName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsTeamLeader = table.Column<bool>(type: "bit", nullable: true),
                    DefaultTarget = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_TeamMembers", x => x.TeamMemberId);
                    table.ForeignKey(
                        name: "FK_CRM_TeamMembers_CRM_Teams",
                        column: x => x.TeamId,
                        principalTable: "CRM_Teams",
                        principalColumn: "TeamId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Survey",
                columns: table => new
                {
                    SurveyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VisitTypeId = table.Column<int>(type: "int", nullable: false),
                    UserRoleId = table.Column<int>(type: "int", nullable: true),
                    VisitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VisitName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VisitName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AnswerType = table.Column<byte>(type: "tinyint", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Survey", x => x.SurveyId);
                    table.ForeignKey(
                        name: "FK_CRM_Survey_CRM_VisitTypes",
                        column: x => x.VisitTypeId,
                        principalTable: "CRM_VisitTypes",
                        principalColumn: "VisitTypeId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_Visits",
                columns: table => new
                {
                    VisitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VisitTypeId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TeamMemberId = table.Column<int>(type: "int", nullable: true),
                    LeadId = table.Column<int>(type: "int", nullable: true),
                    LeadGetBounus = table.Column<bool>(type: "bit", nullable: true),
                    BounusDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_Visits", x => x.VisitId);
                    table.ForeignKey(
                        name: "FK_CRM_Visits_CRM_VisitTypes",
                        column: x => x.VisitTypeId,
                        principalTable: "CRM_VisitTypes",
                        principalColumn: "VisitTypeId");
                });

            migrationBuilder.CreateTable(
                name: "G_UserRolePermissions",
                columns: table => new
                {
                    UserRolePermId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserRoleId = table.Column<int>(type: "int", nullable: true),
                    ModuleCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Arabic_CI_AI"),
                    ModuleDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ModuleType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 screen, 2 TabPage,3 Label"),
                    CanOpen = table.Column<bool>(type: "bit", nullable: false),
                    CanCreate = table.Column<bool>(type: "bit", nullable: false),
                    CanEdit = table.Column<bool>(type: "bit", nullable: false),
                    CanDelete = table.Column<bool>(type: "bit", nullable: false),
                    CanPrint = table.Column<bool>(type: "bit", nullable: false),
                    CanPreView = table.Column<bool>(type: "bit", nullable: false),
                    CanPost = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_UserRolePermissions", x => x.UserRolePermId);
                    table.ForeignKey(
                        name: "FK_G_UserRolePermissions_G_UserRole",
                        column: x => x.UserRoleId,
                        principalTable: "G_UserRole",
                        principalColumn: "UserRoleId");
                });

            migrationBuilder.CreateTable(
                name: "G_Users",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    UserGroupId = table.Column<int>(type: "int", nullable: true),
                    UserRoleId = table.Column<int>(type: "int", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((1))"),
                    UserCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Password = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UserType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 User , 1 superUser , 2 admin"),
                    Custom1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Custom2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Custom3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Custom4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Custom5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    SalesDepId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_Users", x => x.UserId);
                    table.ForeignKey(
                        name: "FK_G_Users_G_UserRole",
                        column: x => x.UserRoleId,
                        principalTable: "G_UserRole",
                        principalColumn: "UserRoleId");
                });

            migrationBuilder.CreateTable(
                name: "HR_AcheivedTargetDetails",
                columns: table => new
                {
                    AcheivedTargetDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AcheivedTargetId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AcheivedValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    TargetId = table.Column<int>(type: "int", nullable: true),
                    HREmpGroupId = table.Column<int>(type: "int", nullable: true),
                    AcheivedPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DeservPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_TargetsDetails", x => x.AcheivedTargetDetailId);
                    table.ForeignKey(
                        name: "FK_HR_AcheivedTargetDetails_HR_AcheivedTargets",
                        column: x => x.AcheivedTargetId,
                        principalTable: "HR_AcheivedTargets",
                        principalColumn: "AcheivedTargetId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_AttendDocDetails",
                columns: table => new
                {
                    AttendDocDetailsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttendDocId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AttendDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DismissDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    FirstShftFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FirstShftTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SecondShftFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SecondShftTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ThirdShftFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ThirdShftTo = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AttenDelayByMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AttenDelayByHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AttenDelayByDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendByMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendByHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendByDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveByMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveByHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveByDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OverTimeByMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OverTimeByHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OverTimeByDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetTimeByMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetTimeByHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetTimeByDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeavPermisionId1 = table.Column<int>(type: "int", nullable: true),
                    LeavPermisionId2 = table.Column<int>(type: "int", nullable: true),
                    LeavPermisionId3 = table.Column<int>(type: "int", nullable: true),
                    LeavPermisionId4 = table.Column<int>(type: "int", nullable: true),
                    LeavPermisionId5 = table.Column<int>(type: "int", nullable: true),
                    LeavPermisionId6 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_AttendDocDetails", x => x.AttendDocDetailsId);
                    table.ForeignKey(
                        name: "FK_Hr_AttendDocDetails_Hr_AttendanceDoc",
                        column: x => x.AttendDocId,
                        principalTable: "Hr_AttendanceDoc",
                        principalColumn: "AttendDocId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_AttendDocFactElements",
                columns: table => new
                {
                    FactAttendId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttendDocId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    TotalWorkDaysPeriod = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalWorkHoursPeriod = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkDayShow = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkDayNoShow = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shift1Show = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shift1NoShow = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shift2Show = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shift2NoShow = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shift3Show = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Shift3NoShow = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LateArrivalMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LateArrivalHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LateArrivalDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LateArrivalCount = table.Column<byte>(type: "tinyint", nullable: true),
                    EarlyLeaveMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyLeaveCount = table.Column<byte>(type: "tinyint", nullable: true),
                    EarlyAttendMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EarlyAttendCount = table.Column<byte>(type: "tinyint", nullable: true),
                    WorkdayOvertimeMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkdayOvertimeHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkdayOvertimeDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkdayOvertimeCount = table.Column<byte>(type: "tinyint", nullable: true),
                    VacationOvertimeMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationOvertimeHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationOvertimeDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationOvertimeCount = table.Column<byte>(type: "tinyint", nullable: true),
                    WeekendOvertimeMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekendOvertimeHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekendOvertimeDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekendOvertimeCount = table.Column<byte>(type: "tinyint", nullable: true),
                    WeekEndWorkShow = table.Column<int>(type: "int", nullable: true),
                    WeekEndWorkMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekEndWorkHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WeekEndWorkDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationWorkShow = table.Column<int>(type: "int", nullable: true),
                    VacationWorkMinutes = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationWorkHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VacationWorkDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_AttendDocFactElements", x => x.FactAttendId);
                    table.ForeignKey(
                        name: "FK_Hr_AttendDocFactElements_Hr_AttendanceDoc",
                        column: x => x.AttendDocId,
                        principalTable: "Hr_AttendanceDoc",
                        principalColumn: "AttendDocId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpActivityDetail",
                columns: table => new
                {
                    EmpActivityDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpActivityId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpActivityDetail", x => x.EmpActivityDetailId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpActivityDetail_Hr_EmpActivity",
                        column: x => x.EmpActivityId,
                        principalTable: "Hr_EmpActivity",
                        principalColumn: "EmpActivityId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpDocuments",
                columns: table => new
                {
                    EmpDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpDocTypId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpApprovedById = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpDocuments", x => x.EmpDocId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpDocuments_Hr_EmpDocTypes",
                        column: x => x.EmpDocTypId,
                        principalTable: "Hr_EmpDocTypes",
                        principalColumn: "EmpDocTypId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpMovePromotDetail",
                columns: table => new
                {
                    EmpMoveDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpMoveId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    OldSalaryValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalaryValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpMovePromotDetail", x => x.EmpMoveDetailId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpMovePromotDetail_Hr_EmpMovePromotion",
                        column: x => x.EmpMoveId,
                        principalTable: "Hr_EmpMovePromotion",
                        principalColumn: "EmpMoveId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpVacationsDetails",
                columns: table => new
                {
                    EmpVacDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpVacId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    OldAnnualVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    OldReservedVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    OldAnnualBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    OldReservedVacsBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    AnnualVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    AnnualBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacsBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    StartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpVacationsDetails", x => x.EmpVacDetailId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpVacationsDetails_Hr_EmpVacation",
                        column: x => x.EmpVacId,
                        principalTable: "Hr_EmpVacation",
                        principalColumn: "EmpVacId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_PeriodTableDetail",
                columns: table => new
                {
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    SubPeriodCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    PeriodStrtDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PeriodEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PayDayDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalWorkDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalWorkHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalVacsDays = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalVacsHours = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDays = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_PeriodTableDetail", x => x.PeriodTablDetailId);
                    table.ForeignKey(
                        name: "FK_Hr_PeriodTableDetail_Hr_PeriodsTables",
                        column: x => x.PeriodTableId,
                        principalTable: "Hr_PeriodsTables",
                        principalColumn: "PeriodTableId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_PeriodTablePolicy",
                columns: table => new
                {
                    PeriodPolicyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    AttendUnit = table.Column<byte>(type: "tinyint", nullable: true),
                    Approximate = table.Column<decimal>(type: "numeric(10,3)", nullable: true),
                    Minimum = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_PeriodTablePolicy", x => x.PeriodPolicyId);
                    table.ForeignKey(
                        name: "FK_Hr_PeriodTablePolicy_Hr_PeriodsTables",
                        column: x => x.PeriodTableId,
                        principalTable: "Hr_PeriodsTables",
                        principalColumn: "PeriodTableId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_PeriodTableVacations",
                columns: table => new
                {
                    PeriodVacatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    VacationDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_PeriodTableVacations", x => x.PeriodVacatId);
                    table.ForeignKey(
                        name: "FK_Hr_PeriodTableVacations_Hr_PeriodsTables",
                        column: x => x.PeriodTableId,
                        principalTable: "Hr_PeriodsTables",
                        principalColumn: "PeriodTableId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_SalaryIssueDetails",
                columns: table => new
                {
                    SalaryIssuDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryIssuDocId = table.Column<int>(type: "int", nullable: true),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    ElementCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ElementCountDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ElementUnitValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DeductValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OtherValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    DebitCostcenterId = table.Column<int>(type: "int", nullable: true),
                    CreditCostCenterId = table.Column<int>(type: "int", nullable: true),
                    DebitEmpAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditEmpAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_SalaryIssueDetails", x => x.SalaryIssuDetailId);
                    table.ForeignKey(
                        name: "FK_Hr_SalaryIssueDetails_Hr_SalaryIssueDoc",
                        column: x => x.SalaryIssuDocId,
                        principalTable: "Hr_SalaryIssueDoc",
                        principalColumn: "SalaryIssuDocId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_SalaryIssueDistribution",
                columns: table => new
                {
                    SalaryIssuDistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryIssuDocId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    SalaryHours = table.Column<decimal>(type: "numeric(18,5)", nullable: true),
                    SalaryDays = table.Column<decimal>(type: "numeric(18,5)", nullable: true),
                    SalaryPercent = table.Column<decimal>(type: "numeric(18,5)", nullable: true),
                    ValueShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_SalaryIssueDistribution", x => x.SalaryIssuDistId);
                    table.ForeignKey(
                        name: "FK_Hr_SalaryIssueDistribution_Hr_SalaryIssueDoc",
                        column: x => x.SalaryIssuDocId,
                        principalTable: "Hr_SalaryIssueDoc",
                        principalColumn: "SalaryIssuDocId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpsSalaryTemp",
                columns: table => new
                {
                    EmpsSalaryTempId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    HREmpGroupId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    SalaryValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitAccId = table.Column<int>(type: "int", nullable: true),
                    CreditAccId = table.Column<int>(type: "int", nullable: true),
                    DebitCostCenterId = table.Column<int>(type: "int", nullable: true),
                    CreditCostCenterId = table.Column<int>(type: "int", nullable: true),
                    DebitEmpAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditEmpAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpsSalaryTemp", x => x.EmpsSalaryTempId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpsSalaryTemp_Hr_SalaryTypes",
                        column: x => x.SalaryTypId,
                        principalTable: "Hr_SalaryTypes",
                        principalColumn: "SalaryTypId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_Segments",
                columns: table => new
                {
                    SegmentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    SegmentSerial = table.Column<byte>(type: "tinyint", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    FromSegmant = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ToSegmant = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SegmantPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Segments", x => x.SegmentId);
                    table.ForeignKey(
                        name: "FK_Hr_Segments_Hr_SalaryTypes",
                        column: x => x.SalaryTypId,
                        principalTable: "Hr_SalaryTypes",
                        principalColumn: "SalaryTypId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_Employees",
                columns: table => new
                {
                    EmpId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    HREmpGroupId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    EmpCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    DeviceEmpCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Qualification = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Gender = table.Column<bool>(type: "bit", nullable: true),
                    MaritalStatus = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 single,1 married,2 married and have kids"),
                    KidsNo = table.Column<byte>(type: "tinyint", nullable: true),
                    Religion = table.Column<byte>(type: "tinyint", nullable: true),
                    Nationality = table.Column<byte>(type: "tinyint", nullable: true),
                    BirthDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    IDNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    IDIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IDExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    PassportIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassportExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Car = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    DrivingLicense = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    DrivingIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DrivingExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DrivingRenewalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Phone1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Phone2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Phone3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    AnnualVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacs = table.Column<byte>(type: "tinyint", nullable: true),
                    LastVacsUpdate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AnnualVacsBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    ReservedVacsBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    MaxVacsBalance = table.Column<byte>(type: "tinyint", nullable: true),
                    ContractType = table.Column<bool>(type: "bit", nullable: true, comment: "true limited, false unlimited"),
                    Attendance = table.Column<bool>(type: "bit", nullable: true, comment: "true full Time,false Part time"),
                    ContractSrtDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ContractEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    WorkStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SocialSecurityID = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true, collation: "Arabic_CI_AI"),
                    HealthInsID = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true, collation: "Arabic_CI_AI"),
                    HealthInsEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    syndicate = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true, collation: "Arabic_CI_AI"),
                    syndicateID = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true, collation: "Arabic_CI_AI"),
                    MilitaryService = table.Column<byte>(type: "tinyint", nullable: true),
                    HourlyCostRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsTechnician = table.Column<bool>(type: "bit", nullable: true),
                    IsSales = table.Column<bool>(type: "bit", nullable: true),
                    IsMoneyCollector = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EmpImage = table.Column<byte[]>(type: "image", nullable: true),
                    IssueSalary = table.Column<bool>(type: "bit", nullable: true),
                    DistributeSalary = table.Column<bool>(type: "bit", nullable: true),
                    AutosalaryIssue = table.Column<bool>(type: "bit", nullable: true),
                    BankName = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: true, collation: "Arabic_CI_AI"),
                    BankAccNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    DailyCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HourlyCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDailyCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalHourlyCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionCollectionPerc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCommissionAfterDisc = table.Column<bool>(type: "bit", nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxCustType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, comment: "Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required"),
                    Evaluation = table.Column<decimal>(type: "numeric(10,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_Employees", x => x.EmpId);
                    table.ForeignKey(
                        name: "FK_Hr_Employees_Hr_Departments",
                        column: x => x.DepartMentId,
                        principalTable: "Hr_Departments",
                        principalColumn: "DepartMentId");
                    table.ForeignKey(
                        name: "FK_Hr_Employees_Hr_EmpGroups",
                        column: x => x.HREmpGroupId,
                        principalTable: "Hr_EmpGroups",
                        principalColumn: "HREmpGroupId");
                    table.ForeignKey(
                        name: "FK_Hr_Employees_Hr_Jobs",
                        column: x => x.JobId,
                        principalTable: "Hr_Jobs",
                        principalColumn: "JobId");
                    table.ForeignKey(
                        name: "FK_Hr_Employees_Hr_PeriodsTables",
                        column: x => x.PeriodTableId,
                        principalTable: "Hr_PeriodsTables",
                        principalColumn: "PeriodTableId");
                    table.ForeignKey(
                        name: "FK_Hr_Employees_Hr_Shifts",
                        column: x => x.ShiftId,
                        principalTable: "Hr_Shifts",
                        principalColumn: "ShiftId");
                });

            migrationBuilder.CreateTable(
                name: "Mob_SalesInvoiceItemCard",
                columns: table => new
                {
                    InvItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    DelivItemCardId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    jobProductId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    ItemOfferId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    PettycashId = table.Column<int>(type: "int", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCommisionPercent = table.Column<bool>(type: "bit", nullable: true),
                    CommisionPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceList = table.Column<byte>(type: "tinyint", nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    InOffer = table.Column<bool>(type: "bit", nullable: true),
                    OfferPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    VehicleId1 = table.Column<int>(type: "int", nullable: true),
                    VehicleId2 = table.Column<int>(type: "int", nullable: true),
                    DriverName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TimeEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Mob_SalesInvoiceItemCard", x => x.InvItemCardId);
                    table.ForeignKey(
                        name: "FK_Mob_SalesInvoiceItemCard_Mob_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Mob_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "MS_Stores",
                columns: table => new
                {
                    StoreId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    UserGroupId = table.Column<int>(type: "int", nullable: true),
                    StoreCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreType = table.Column<bool>(type: "bit", nullable: true, comment: "true MainBranch , False Sub Branch"),
                    StorePosition = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreKeeper = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PrintFooterFontSize = table.Column<byte>(type: "tinyint", nullable: true),
                    PrintHeaderFontSize = table.Column<byte>(type: "tinyint", nullable: true),
                    PrintHeaderFontStyle = table.Column<byte>(type: "tinyint", nullable: true),
                    PrintFooterFontStyle = table.Column<byte>(type: "tinyint", nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    BranchLogo = table.Column<byte[]>(type: "image", nullable: true),
                    PrintHeaderFont = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrintFooterFont = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrintHeaderFontColor = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrintFooterFontColor = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrintHeader = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    PrintFooter = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    EtaxCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaxReg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CommercialName = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SalesCostAccountId1 = table.Column<int>(type: "int", nullable: true),
                    SalesCostAccountId2 = table.Column<int>(type: "int", nullable: true),
                    SalesAccountId1 = table.Column<int>(type: "int", nullable: true),
                    SalesAccountId2 = table.Column<int>(type: "int", nullable: true),
                    SalesAccountId3 = table.Column<int>(type: "int", nullable: true),
                    SalesAccountId4 = table.Column<int>(type: "int", nullable: true),
                    SalesAccountId5 = table.Column<int>(type: "int", nullable: true),
                    CashOnHandAccountId = table.Column<int>(type: "int", nullable: true),
                    BankAccountId = table.Column<int>(type: "int", nullable: true),
                    PurchAccountId1 = table.Column<int>(type: "int", nullable: true),
                    PurchAccountId2 = table.Column<int>(type: "int", nullable: true),
                    PurchAccountId3 = table.Column<int>(type: "int", nullable: true),
                    PurchAccountId4 = table.Column<int>(type: "int", nullable: true),
                    PurchAccountId5 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId1 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId2 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId3 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId4 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId5 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId6 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId7 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId8 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId9 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId10 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId11 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId12 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId13 = table.Column<int>(type: "int", nullable: true),
                    OtherAccountId14 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Stores", x => x.StoreId);
                    table.ForeignKey(
                        name: "FK_MS_Stores_MS_BoxBank",
                        column: x => x.BoxId,
                        principalTable: "MS_BoxBank",
                        principalColumn: "BoxId");
                });

            migrationBuilder.CreateTable(
                name: "MS_BoxTransferDetail",
                columns: table => new
                {
                    BoxTranDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BoxTranId = table.Column<int>(type: "int", nullable: true),
                    BoxFrom = table.Column<int>(type: "int", nullable: true),
                    BoxTo = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    valu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BoxTransferDetail", x => x.BoxTranDetailId);
                    table.ForeignKey(
                        name: "FK_MS_BoxTransferDetail_MS_BoxTransferNote",
                        column: x => x.BoxTranId,
                        principalTable: "MS_BoxTransferNote",
                        principalColumn: "BoxTranId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_BusinessPartners",
                columns: table => new
                {
                    BSPartnerId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BsPartnerCatId = table.Column<int>(type: "int", nullable: true),
                    BsPartnerTypeId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    PartnerCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartnerDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsTaxExempted = table.Column<bool>(type: "bit", nullable: true),
                    CreditPeriod = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day, 2 month, 3 year"),
                    CreditLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLimitAllowed = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Nationality = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DateOfBirth = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PassPortIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InternationalLicense = table.Column<bool>(type: "bit", nullable: true),
                    CarLicenseNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CarLicenseIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtReg = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtRegRenew = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Company = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CustJob = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CustID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Barcode = table.Column<byte>(type: "tinyint", nullable: true),
                    SalPrice = table.Column<byte>(type: "tinyint", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    DefaultDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReportDiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercentOrVal = table.Column<bool>(type: "bit", nullable: true),
                    ForAdjustOnly = table.Column<bool>(type: "bit", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    IsDiscountByItem = table.Column<bool>(type: "bit", nullable: true),
                    IsBlocked = table.Column<bool>(type: "bit", nullable: true),
                    IsCreditEnabled = table.Column<bool>(type: "bit", nullable: true),
                    IsPricIncludTax = table.Column<bool>(type: "bit", nullable: true),
                    TaxExemptionNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PrePaidPercent = table.Column<decimal>(type: "decimal(18,5)", nullable: true),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    HomePage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    InvoiceCopies = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Evaluation = table.Column<decimal>(type: "numeric(10,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_BusinessPartners", x => x.BSPartnerId);
                    table.ForeignKey(
                        name: "FK_Ms_BusinessPartners_Ms_BusinessPartnerCategory",
                        column: x => x.BsPartnerCatId,
                        principalTable: "Ms_BusinessPartnerCategory",
                        principalColumn: "BsPartnerCatId");
                    table.ForeignKey(
                        name: "FK_Ms_BusinessPartners_Ms_BusinessPartnerType",
                        column: x => x.BsPartnerTypeId,
                        principalTable: "Ms_BusinessPartnerType",
                        principalColumn: "BsPartnerTypeId");
                });

            migrationBuilder.CreateTable(
                name: "MS_BoxCurrency",
                columns: table => new
                {
                    BoxCurrencyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AccountChrtId = table.Column<int>(type: "int", nullable: true),
                    RetAccountId = table.Column<int>(type: "int", nullable: true),
                    BankExpensAccId = table.Column<int>(type: "int", nullable: true),
                    ChequndercollectId = table.Column<int>(type: "int", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_BoxCurrency", x => x.BoxCurrencyId);
                    table.ForeignKey(
                        name: "FK_MS_BoxCurrency_Ms_BankAccount",
                        column: x => x.AccountId,
                        principalTable: "Ms_BankAccount",
                        principalColumn: "AccountId");
                    table.ForeignKey(
                        name: "FK_MS_BoxCurrency_MS_BoxBank",
                        column: x => x.BoxId,
                        principalTable: "MS_BoxBank",
                        principalColumn: "BoxId");
                    table.ForeignKey(
                        name: "FK_MS_BoxCurrency_MS_Currency",
                        column: x => x.CurrencyId,
                        principalTable: "MS_Currency",
                        principalColumn: "CurrencyId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CurrencyRate",
                columns: table => new
                {
                    EqualCurrencyPriceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    EquivalentCurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastModify = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CurrencyRate", x => x.EqualCurrencyPriceId);
                    table.ForeignKey(
                        name: "FK_Ms_CurrencyRate_MS_Currency",
                        column: x => x.CurrencyId,
                        principalTable: "MS_Currency",
                        principalColumn: "CurrencyId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CurrencyCategoryJoin",
                columns: table => new
                {
                    CurrencyCatJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    CurrencyType = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CurrencyCategoryJoin", x => x.CurrencyCatJoinId);
                    table.ForeignKey(
                        name: "FK_Ms_CurrencyCategoryJoin_MS_Currency",
                        column: x => x.CurrencyId,
                        principalTable: "MS_Currency",
                        principalColumn: "CurrencyId");
                    table.ForeignKey(
                        name: "FK_Ms_CurrencyCategoryJoin_MS_CurrencyCategory",
                        column: x => x.CurrencyCategoryId,
                        principalTable: "MS_CurrencyCategory",
                        principalColumn: "CurrencyCategoryId");
                });

            migrationBuilder.CreateTable(
                name: "MS_Customer",
                columns: table => new
                {
                    CustomerId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerCatId = table.Column<int>(type: "int", nullable: true),
                    CustomerTypeId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CustomerCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CustomerDescA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CustomerDescE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsTaxExempted = table.Column<bool>(type: "bit", nullable: true),
                    CreditPeriod = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day, 2 month, 3 year"),
                    CreditLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLimitAllowed = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Nationality = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DateOfBirth = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PassPortIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PassPortIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    InternationalLicense = table.Column<bool>(type: "bit", nullable: true),
                    CarLicenseNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseIssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CarLicenseIssuePlace = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CarLicenseExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtReg = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtRegRenew = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Company = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CustJob = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CustID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Barcode = table.Column<byte>(type: "tinyint", nullable: true),
                    SalPrice = table.Column<byte>(type: "tinyint", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    DefaultDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReportDiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercentOrVal = table.Column<bool>(type: "bit", nullable: true),
                    ForAdjustOnly = table.Column<bool>(type: "bit", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    IsDiscountByItem = table.Column<bool>(type: "bit", nullable: true),
                    IsBlocked = table.Column<bool>(type: "bit", nullable: true),
                    IsCreditEnabled = table.Column<bool>(type: "bit", nullable: true),
                    IsPricIncludTax = table.Column<bool>(type: "bit", nullable: true),
                    TaxExemptionNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrePaidPercent = table.Column<decimal>(type: "decimal(18,5)", nullable: true),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    HomePage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    InvoiceCopies = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxCustType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, comment: "Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required"),
                    IsDealer = table.Column<bool>(type: "bit", nullable: true),
                    IsTaxInvHold = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    Evaluation = table.Column<decimal>(type: "numeric(10,2)", nullable: true),
                    LegalAssign = table.Column<bool>(type: "bit", nullable: true),
                    LegalStatus = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    IsMobile = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Customer", x => x.CustomerId);
                    table.ForeignKey(
                        name: "FK_MS_Customer_MS_Currency",
                        column: x => x.CurrencyId,
                        principalTable: "MS_Currency",
                        principalColumn: "CurrencyId");
                    table.ForeignKey(
                        name: "FK_MS_Customer_MS_CustomerCategory",
                        column: x => x.CustomerCatId,
                        principalTable: "MS_CustomerCategory",
                        principalColumn: "CustomerCatId");
                    table.ForeignKey(
                        name: "FK_MS_Customer_Ms_CustomerTypes",
                        column: x => x.CustomerTypeId,
                        principalTable: "Ms_CustomerTypes",
                        principalColumn: "CustomerTypeId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_DeliverSalesInvoiceExpenses",
                columns: table => new
                {
                    DeliverIdExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_DeliverSalesInvoiceExpenses", x => x.DeliverIdExpenseId);
                    table.ForeignKey(
                        name: "FK_Ms_DeliverSalesInvoiceExpenses_Ms_DeliverSalesInvoice",
                        column: x => x.DeliverId,
                        principalTable: "Ms_DeliverSalesInvoice",
                        principalColumn: "DeliverId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_DeliverSalesInvoiceMultiAccounts",
                columns: table => new
                {
                    SalesDelMultiAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    RectSourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_DeliverSalesInvoiceMultiAccounts", x => x.SalesDelMultiAccountId);
                    table.ForeignKey(
                        name: "FK_Ms_DeliverSalesInvoiceMultiAccounts_Ms_DeliverSalesInvoice",
                        column: x => x.DeliverId,
                        principalTable: "Ms_DeliverSalesInvoice",
                        principalColumn: "DeliverId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemCard",
                columns: table => new
                {
                    ItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCategoryId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1ForSale = table.Column<bool>(type: "bit", nullable: true),
                    Tax1ForPurch = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Percent , 1 value , 2 Without"),
                    Tax1Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2ForSale = table.Column<bool>(type: "bit", nullable: true),
                    Tax2ForPurch = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Percent , 1 value , 2 Without"),
                    Tax2Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3ForSale = table.Column<bool>(type: "bit", nullable: true),
                    Tax3ForPurch = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Percent , 1 value , 2 Without"),
                    Tax3Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1  Finished product,2 Material,3 non stock Item,4 Manufactured,5 vehicle"),
                    ItemCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemDescA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ItemDescE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    QtyPartiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QtyInNotebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseNumber = table.Column<int>(type: "int", nullable: true),
                    LastSalePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BeforLastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostManual = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ManualPurchasePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastPurchDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FirstQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FirstPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SecandQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SecandPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ThridQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ThirdPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LargeQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LargePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeastSalesPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeastProfitMargin = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInBox = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchasePrice = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Wheight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    strCustm5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ExpirPeriod = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day, 2 month, 3 year"),
                    OfferDesc = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, comment: "1 day, 2 month, 3 year"),
                    InOffer = table.Column<bool>(type: "bit", nullable: true),
                    OfferFromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    OfferToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsOfferDiscount = table.Column<bool>(type: "bit", nullable: true),
                    IsDiscountPercent = table.Column<bool>(type: "bit", nullable: true),
                    Discount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsExpir = table.Column<bool>(type: "bit", nullable: true),
                    IsAttributeItem = table.Column<bool>(type: "bit", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    IsDimension = table.Column<bool>(type: "bit", nullable: true),
                    IsSerialItem = table.Column<bool>(type: "bit", nullable: true),
                    AllPatchesSamePrice = table.Column<bool>(type: "bit", nullable: true),
                    UseSameItemAsMaterial = table.Column<bool>(type: "bit", nullable: true),
                    AutoSuggestBatches = table.Column<bool>(type: "bit", nullable: true),
                    CostWithDimension = table.Column<bool>(type: "bit", nullable: true),
                    DimensionSalesPrice = table.Column<byte>(type: "tinyint", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    ItemLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemMax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Length = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Width = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Height = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ItemSize = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ItemColor = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    SerialNoPrefix = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    WarantyPeriod = table.Column<int>(type: "int", nullable: true),
                    WarantyPeriodType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 day,2 week, 3 month, 4 year"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsTempItem = table.Column<bool>(type: "bit", nullable: true),
                    ProductionItemUnit = table.Column<int>(type: "int", nullable: true),
                    SpecialItemExeclud = table.Column<bool>(type: "bit", nullable: true),
                    IsCommisionPercent = table.Column<bool>(type: "bit", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsOuterItem = table.Column<bool>(type: "bit", nullable: true),
                    UseSomeSubItems = table.Column<bool>(type: "bit", nullable: true),
                    TaxItemCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Unit2IsMandatory = table.Column<bool>(type: "bit", nullable: true),
                    UseUnit2 = table.Column<bool>(type: "bit", nullable: true),
                    Separator = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: true),
                    IsSalesStopped = table.Column<bool>(type: "bit", nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    AnTypeId = table.Column<int>(type: "int", nullable: true),
                    AnimalClass = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 animal, 2 food, 3 medicin"),
                    CodingStoreId = table.Column<int>(type: "int", nullable: true),
                    ProductTypeId = table.Column<int>(type: "int", nullable: true),
                    BrandId = table.Column<int>(type: "int", nullable: true),
                    GradId = table.Column<int>(type: "int", nullable: true),
                    GramTypeId = table.Column<int>(type: "int", nullable: true),
                    SizeTypeId = table.Column<int>(type: "int", nullable: true),
                    CoverTypeId = table.Column<int>(type: "int", nullable: true),
                    ClosingId = table.Column<int>(type: "int", nullable: true),
                    BreakTypeId = table.Column<int>(type: "int", nullable: true),
                    BoxTypeId = table.Column<int>(type: "int", nullable: true),
                    CutterTypeId = table.Column<int>(type: "int", nullable: true),
                    DistributId = table.Column<int>(type: "int", nullable: true),
                    FaceTypeId = table.Column<int>(type: "int", nullable: true),
                    GofferId = table.Column<int>(type: "int", nullable: true),
                    IndistryId = table.Column<int>(type: "int", nullable: true),
                    PadingTypeId = table.Column<int>(type: "int", nullable: true),
                    UsePurchDisc = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemCard", x => x.ItemCardId);
                    table.ForeignKey(
                        name: "FK_MS_ItemCard_MS_ItemCategory",
                        column: x => x.ItemCategoryId,
                        principalTable: "MS_ItemCategory",
                        principalColumn: "ItemCategoryId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemPricintDetail",
                columns: table => new
                {
                    ItemPricintDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemPricintId = table.Column<int>(type: "int", nullable: false),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FirstPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SecandPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ThirdPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LargePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NewPrice10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemPricintDetail", x => x.ItemPricintDetailId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemPricintDetail_Ms_ItemPricing",
                        column: x => x.ItemPricintId,
                        principalTable: "Ms_ItemPricing",
                        principalColumn: "ItemPricintId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_KeeperBankDetail",
                columns: table => new
                {
                    KeeperDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    KeeperId = table.Column<int>(type: "int", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    IsCollected = table.Column<bool>(type: "bit", nullable: true),
                    CollectDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsReturned = table.Column<bool>(type: "bit", nullable: true),
                    ReturnDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsTransferred = table.Column<bool>(type: "bit", nullable: true),
                    TransferredAte = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_KeeperBankDetail", x => x.KeeperDetailId);
                    table.ForeignKey(
                        name: "FK_Ms_KeeperBankDetail_Ms_KeeperBank",
                        column: x => x.KeeperId,
                        principalTable: "Ms_KeeperBank",
                        principalColumn: "KeeperId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_LetterOfGuaranteeTrans",
                columns: table => new
                {
                    LetOfGrnteeTranId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LetOfGrnteeId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeStatusId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeTypeId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeCatId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeStatusId1 = table.Column<int>(type: "int", nullable: true),
                    PaperDirection = table.Column<byte>(type: "tinyint", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    BankAccountId = table.Column<int>(type: "int", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    LetrOfGAccountId = table.Column<int>(type: "int", nullable: true),
                    LetrOfGExpensAccountId = table.Column<int>(type: "int", nullable: true),
                    LetrOfGCommisionAccountId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ReceiverName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CashMargin = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCovered = table.Column<bool>(type: "bit", nullable: true),
                    CoverPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoverValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Expenses = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LetEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Conditions = table.Column<string>(type: "nvarchar(1500)", maxLength: 1500, nullable: true),
                    ValuEffect = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Uprais,2 Decreas, else none"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LimitGuarantee = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CustodyGuarantee = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_LetterOfGuaranteeTrans", x => x.LetOfGrnteeTranId);
                    table.ForeignKey(
                        name: "FK_Ms_LetterOfGuaranteeTrans_Ms_LetterOfGuarantee",
                        column: x => x.LetOfGrnteeId,
                        principalTable: "Ms_LetterOfGuarantee",
                        principalColumn: "LetOfGrnteeId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PettyCashDetails",
                columns: table => new
                {
                    PettycashDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PettycashId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActionDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    IsStockRelated = table.Column<bool>(type: "bit", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPurchase = table.Column<bool>(type: "bit", nullable: true),
                    IsReturnSales = table.Column<bool>(type: "bit", nullable: true),
                    Remark1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remark2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remark3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PettyCashDetails", x => x.PettycashDetailId);
                    table.ForeignKey(
                        name: "FK_MS_PettyCashDetails_MS_Pettycash",
                        column: x => x.PettycashId,
                        principalTable: "MS_Pettycash",
                        principalColumn: "PettycashId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchOrderReqDetail",
                columns: table => new
                {
                    OrderDetailItemReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurOrderReqId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    QtyExecuted = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyExecutedBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PriceIncludTaxInPurch = table.Column<bool>(type: "bit", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchOrderReqDetail", x => x.OrderDetailItemReqId);
                    table.ForeignKey(
                        name: "FK_MS_PurchOrderReqDetail_Ms_PurchasOrderRequest",
                        column: x => x.PurOrderReqId,
                        principalTable: "Ms_PurchasOrderRequest",
                        principalColumn: "PurOrderReqId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnPurchaseCurrencies",
                columns: table => new
                {
                    RetPurchCurId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Count = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnPurchaseCurrencies", x => x.RetPurchCurId);
                    table.ForeignKey(
                        name: "FK_MS_ReturnPurchaseCurrencies_MS_ReturnPurchase",
                        column: x => x.RetPurchId,
                        principalTable: "MS_ReturnPurchase",
                        principalColumn: "RetPurchId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ReturnPurchaseExpenses",
                columns: table => new
                {
                    RetPurchExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ReturnPurchaseExpenses", x => x.RetPurchExpenseId);
                    table.ForeignKey(
                        name: "FK_Ms_ReturnPurchaseExpenses_MS_ReturnPurchase",
                        column: x => x.RetPurchId,
                        principalTable: "MS_ReturnPurchase",
                        principalColumn: "RetPurchId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnPurchaseMultiAccounts",
                columns: table => new
                {
                    RetPurMultiAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    RectSourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnPurchaseMultiAccounts", x => x.RetPurMultiAccountId);
                    table.ForeignKey(
                        name: "FK_MS_ReturnPurchaseMultiAccounts_MS_ReturnPurchase",
                        column: x => x.RetPurchId,
                        principalTable: "MS_ReturnPurchase",
                        principalColumn: "RetPurchId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnSalesCurrencies",
                columns: table => new
                {
                    RetSaleCurId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Count = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnSalesCurrencies", x => x.RetSaleCurId);
                    table.ForeignKey(
                        name: "FK_MS_ReturnSalesCurrencies_MS_ReturnSales",
                        column: x => x.RetSaleId,
                        principalTable: "MS_ReturnSales",
                        principalColumn: "RetSaleId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ReturnSalesExpenses",
                columns: table => new
                {
                    RetSaleExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ReturnSalesExpenses", x => x.RetSaleExpenseId);
                    table.ForeignKey(
                        name: "FK_Ms_ReturnSalesExpenses_MS_ReturnSales",
                        column: x => x.RetSaleId,
                        principalTable: "MS_ReturnSales",
                        principalColumn: "RetSaleId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnSalesMultiAccounts",
                columns: table => new
                {
                    RetSaleMultiAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    RectSourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnSalesMultiAccounts", x => x.RetSaleMultiAccountId);
                    table.ForeignKey(
                        name: "FK_MS_ReturnSalesMultiAccounts_MS_ReturnSales",
                        column: x => x.RetSaleId,
                        principalTable: "MS_ReturnSales",
                        principalColumn: "RetSaleId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesItemsOffersDetails",
                columns: table => new
                {
                    ItemOfferId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PromoOfferId = table.Column<int>(type: "int", nullable: true),
                    ItemCategoryId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    BaseItemUnitId = table.Column<int>(type: "int", nullable: true),
                    OfferedItemId = table.Column<int>(type: "int", nullable: true),
                    OfferedItemUnitId = table.Column<int>(type: "int", nullable: true),
                    BaseItemUnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BaseQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BaseQtyBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OfferedItemUnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OfferedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OfferedQtyBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BaseDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscForTotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsSeasonal = table.Column<bool>(type: "bit", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesItemsOffers", x => x.ItemOfferId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesItemsOffersDetails_Ms_SalesItemsOffers",
                        column: x => x.PromoOfferId,
                        principalTable: "Ms_SalesItemsOffers",
                        principalColumn: "PromoOfferId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoice",
                columns: table => new
                {
                    InvId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    SalesOfferId = table.Column<int>(type: "int", nullable: true),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustBranchId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemsProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalJobOrders = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCommision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPos = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    IsHold = table.Column<bool>(type: "bit", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    MultiResourceDeliver = table.Column<bool>(type: "bit", nullable: true),
                    TotalQtyPump = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyCar = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyNoVehicl = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EtaxSent = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSentTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxReference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsReturned = table.Column<bool>(type: "bit", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainCustServerId = table.Column<int>(type: "int", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsMobile = table.Column<bool>(type: "bit", nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VisaPayMethodId = table.Column<int>(type: "int", nullable: true),
                    BankTranPayMethodId = table.Column<int>(type: "int", nullable: true),
                    OtherPayMethodId2 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoice", x => x.InvId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoice_Ms_SalesOffer",
                        column: x => x.SalesOfferId,
                        principalTable: "Ms_SalesOffer",
                        principalColumn: "SalesOfferId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesOfferItemRequest",
                columns: table => new
                {
                    SalesOffertemCardReqId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesOfferReqId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecuteQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecuteQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesOfferItemRequest", x => x.SalesOffertemCardReqId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesOfferItemRequest_Ms_SalesOfferRequest",
                        column: x => x.SalesOfferReqId,
                        principalTable: "Ms_SalesOfferRequest",
                        principalColumn: "SalesOfferReqId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesOrderItemCard",
                columns: table => new
                {
                    SalesOrdertemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecuteQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecuteQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesDepId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesOrderItemCard", x => x.SalesOrdertemCardId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesOrderItemCard_Ms_SalesOrder",
                        column: x => x.SalesOrderId,
                        principalTable: "Ms_SalesOrder",
                        principalColumn: "SalesOrderId");
                });

            migrationBuilder.CreateTable(
                name: "MS_StockRecriptExpenses",
                columns: table => new
                {
                    StockRecExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_StockRecriptExpenses", x => x.StockRecExpenseId);
                    table.ForeignKey(
                        name: "FK_MS_StockRecriptExpenses_MS_StockRecript",
                        column: x => x.StockRecId,
                        principalTable: "MS_StockRecript",
                        principalColumn: "StockRecId");
                });

            migrationBuilder.CreateTable(
                name: "MS_StockRecriptMultiAccounts",
                columns: table => new
                {
                    StockRecMultiAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    RectSourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_StockRecriptMultiAccounts", x => x.StockRecMultiAccountId);
                    table.ForeignKey(
                        name: "FK_MS_StockRecriptMultiAccounts_MS_StockRecript",
                        column: x => x.StockRecId,
                        principalTable: "MS_StockRecript",
                        principalColumn: "StockRecId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_StockTranItemCardReq",
                columns: table => new
                {
                    TranReqItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TranReqId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    PartFrom = table.Column<int>(type: "int", nullable: true),
                    PartTo = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_StockTranItemCardReq", x => x.TranReqItemCardId);
                    table.ForeignKey(
                        name: "FK_Ms_StockTranItemCardReq_Ms_StockTransferNoteRequest",
                        column: x => x.TranReqId,
                        principalTable: "Ms_StockTransferNoteRequest",
                        principalColumn: "TranReqId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchasInvoice",
                columns: table => new
                {
                    PurInvId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    VendBranchId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InvDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    InvDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvoiceType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Due "),
                    InvDueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalItemTax1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItemTax3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalTaxValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscAmount4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterTax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPriceVisa = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true, comment: "True  Closed ;  False  Not Closed"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPriceBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenValueWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsShippingInv = table.Column<bool>(type: "bit", nullable: true),
                    IsNoCostDeliver = table.Column<int>(type: "int", nullable: true),
                    DeliverNoCostExecut = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PurOrderReqId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    MultiResourceDeliver = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSent = table.Column<bool>(type: "bit", nullable: true),
                    EtaxSentTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EtaxRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AdvancExpenseWithCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AdvancExpenseBeforCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EtaxReference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TotalExpensesTaxes1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesTaxes2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalExpensesTaxes3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsReturned = table.Column<bool>(type: "bit", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainVendServerId = table.Column<int>(type: "int", nullable: true),
                    BankTransfer = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    TotalServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    VisaPayMethodId = table.Column<int>(type: "int", nullable: true),
                    BankTranPayMethodId = table.Column<int>(type: "int", nullable: true),
                    OtherPayMethodId2 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchasInvoice", x => x.PurInvId);
                    table.ForeignKey(
                        name: "FK_MS_PurchasInvoice_Ms_PurchasOrder",
                        column: x => x.PurOrderId,
                        principalTable: "Ms_PurchasOrder",
                        principalColumn: "PurOrderId");
                    table.ForeignKey(
                        name: "FK_MS_PurchasInvoice_MS_Taxes",
                        column: x => x.TaxesId1,
                        principalTable: "MS_Taxes",
                        principalColumn: "TaxesId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_TermsCostCenter",
                columns: table => new
                {
                    TermCostCenterId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CostCenterIdDebit = table.Column<int>(type: "int", nullable: true),
                    CostCenterDebitFixed = table.Column<bool>(type: "bit", nullable: true),
                    ValuCostCenterDebit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    CostCenterCredit = table.Column<int>(type: "int", nullable: true),
                    CostCenterCreditFixed = table.Column<bool>(type: "bit", nullable: true),
                    ValuCostCenterCredit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    CostCenterIdDisc = table.Column<int>(type: "int", nullable: true),
                    CostCenterDiscIsFixed = table.Column<bool>(type: "bit", nullable: true),
                    ValuCostCenterDisc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    CostCenterIdCash = table.Column<int>(type: "int", nullable: true),
                    CostCenterCashIsFixed = table.Column<bool>(type: "bit", nullable: true),
                    ValuCostCenterCash = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    CostCenterIdTax = table.Column<int>(type: "int", nullable: true),
                    CostCenterTaxIsFixed = table.Column<bool>(type: "bit", nullable: true),
                    ValuCostCenterTax = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    CenterDiscDebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    CenterCashDebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    CenterTaxDebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddCostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenter1IsFixed = table.Column<bool>(type: "bit", nullable: true),
                    ValuAddCostCenter1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddCostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed2 = table.Column<bool>(type: "bit", nullable: true),
                    ValuAddCostCenter2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddCostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed3 = table.Column<bool>(type: "bit", nullable: true),
                    ValuAddCostCenter3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddCostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed4 = table.Column<bool>(type: "bit", nullable: true),
                    ValuAddCostCenter4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddCostCenterId5 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed5 = table.Column<bool>(type: "bit", nullable: true),
                    ValuAddCostCenter5 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddCenter1DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddCenter2DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddCenter3DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddCenter4DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddCenter5DebitOrCredit = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_TermsCostCenter", x => x.TermCostCenterId);
                    table.ForeignKey(
                        name: "FK_Ms_TermsCostCenter_Ms_Terms",
                        column: x => x.TermId,
                        principalTable: "Ms_Terms",
                        principalColumn: "TermId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_TermsDetails",
                columns: table => new
                {
                    TermDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    AccountIdDebit = table.Column<int>(type: "int", nullable: true),
                    AccountDebitFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    CostCenterIdDebit = table.Column<int>(type: "int", nullable: true),
                    CostCenterDebitFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAccountDebit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AccountIdCredit = table.Column<int>(type: "int", nullable: true),
                    AccountCreditFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    CostCenterIdCredit = table.Column<int>(type: "int", nullable: true),
                    CostCenterCreditFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAccountCredit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AccountIdDisc = table.Column<int>(type: "int", nullable: true),
                    AccountDiscIsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    CostCenterIdDisc = table.Column<int>(type: "int", nullable: true),
                    CostCenterDiscIsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAccountDisc = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AccountIdCash = table.Column<int>(type: "int", nullable: true),
                    AccountCashIsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    CostCenterIdCash = table.Column<int>(type: "int", nullable: true),
                    CostCenterCashIsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAccountCash = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AccountIdTax = table.Column<int>(type: "int", nullable: true),
                    AccountTaxIsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    CostCenterIdTax = table.Column<int>(type: "int", nullable: true),
                    CostCenterTaxIsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAccountTax = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AccDiscDebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AccCashDebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AccTaxDebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddAccountId1 = table.Column<int>(type: "int", nullable: true),
                    AddAccount1IsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    AddCostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenter1IsFixed = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAddAccount1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddAccountId2 = table.Column<int>(type: "int", nullable: true),
                    AddAccountIsFixed2 = table.Column<byte>(type: "tinyint", nullable: true),
                    AddCostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed2 = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAddAccount2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddAccountId3 = table.Column<int>(type: "int", nullable: true),
                    AddAccountIsFixed3 = table.Column<byte>(type: "tinyint", nullable: true),
                    AddCostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed3 = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAddAccount3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddAccountId4 = table.Column<int>(type: "int", nullable: true),
                    AddAccountIsFixed4 = table.Column<byte>(type: "tinyint", nullable: true),
                    AddCostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed4 = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAddAccount4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddAccountId5 = table.Column<int>(type: "int", nullable: true),
                    AddAccountIsFixed5 = table.Column<byte>(type: "tinyint", nullable: true),
                    AddCostCenterId5 = table.Column<int>(type: "int", nullable: true),
                    AddCostCenterIsFixed5 = table.Column<byte>(type: "tinyint", nullable: true),
                    ValuAddAccount5 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    AddAcc1DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddAcc2DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddAcc3DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddAcc4DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AddAcc5DebitOrCredit = table.Column<bool>(type: "bit", nullable: true),
                    AnalaticalCodeMust = table.Column<bool>(type: "bit", nullable: true),
                    TaxOnService = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_TermsDetails", x => x.TermDetailId);
                    table.ForeignKey(
                        name: "FK_Ms_TermsDetails_Ms_Terms",
                        column: x => x.TermId,
                        principalTable: "Ms_Terms",
                        principalColumn: "TermId");
                });

            migrationBuilder.CreateTable(
                name: "MS_Vendor",
                columns: table => new
                {
                    VendorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorCatId = table.Column<int>(type: "int", nullable: true),
                    VendorTypeId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    VendorCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VendorDescA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    VendorDescE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsTaxExempted = table.Column<bool>(type: "bit", nullable: true),
                    CreditPeriodType = table.Column<byte>(type: "tinyint", nullable: true),
                    CreditPeriod = table.Column<int>(type: "int", nullable: true),
                    CreditLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Barcode = table.Column<byte>(type: "tinyint", nullable: true),
                    ForAdjustOnly = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    IsBlocked = table.Column<bool>(type: "bit", nullable: true),
                    IsCreditEnabled = table.Column<bool>(type: "bit", nullable: true),
                    IsPricIncludTax = table.Column<bool>(type: "bit", nullable: true),
                    TaxExemptionNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PrePaidPercent = table.Column<decimal>(type: "decimal(18,5)", nullable: true),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    HomePage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    InvoiceCopies = table.Column<byte>(type: "tinyint", nullable: true),
                    dtReg = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    dtRegRenew = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Company = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    VendJob = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    VendID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    EtaxCustType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, comment: "Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required"),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    Evaluation = table.Column<decimal>(type: "numeric(10,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Vendor", x => x.VendorId);
                    table.ForeignKey(
                        name: "FK_MS_Vendor_MS_Currency",
                        column: x => x.CurrencyId,
                        principalTable: "MS_Currency",
                        principalColumn: "CurrencyId");
                    table.ForeignKey(
                        name: "FK_MS_Vendor_MS_VendorCategory",
                        column: x => x.VendorCatId,
                        principalTable: "MS_VendorCategory",
                        principalColumn: "VendorCatId");
                    table.ForeignKey(
                        name: "FK_MS_Vendor_Ms_VendorTypes",
                        column: x => x.VendorTypeId,
                        principalTable: "Ms_VendorTypes",
                        principalColumn: "VendorTypeId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_WeightcardItems",
                columns: table => new
                {
                    WeightItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScaleQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScaleQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_WeightcardItems", x => x.WeightItemId);
                    table.ForeignKey(
                        name: "FK_Ms_WeightcardItems_Ms_WeightCard",
                        column: x => x.ScaleCardId,
                        principalTable: "Ms_WeightCard",
                        principalColumn: "ScaleCardId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Hotels",
                columns: table => new
                {
                    HotelId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    HotelCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Stars = table.Column<byte>(type: "tinyint", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    ElevatorNum = table.Column<int>(type: "int", nullable: true),
                    RoomSingleCount = table.Column<int>(type: "int", nullable: true),
                    RoomSingleCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoubleRoomCount = table.Column<int>(type: "int", nullable: true),
                    DoubleRoomCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TribleRoomCount = table.Column<int>(type: "int", nullable: true),
                    TribleRoomCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuadRoomCount = table.Column<int>(type: "int", nullable: true),
                    QuadRoomCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SuitRoomCount = table.Column<int>(type: "int", nullable: true),
                    SuitRoomCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SpecialRoomCount = table.Column<int>(type: "int", nullable: true),
                    SpecialRoomCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SupportFB = table.Column<bool>(type: "bit", nullable: true),
                    SupportHB = table.Column<bool>(type: "bit", nullable: true),
                    SupportBB = table.Column<bool>(type: "bit", nullable: true),
                    SupportRO = table.Column<bool>(type: "bit", nullable: true),
                    RoomsWithWC = table.Column<bool>(type: "bit", nullable: true),
                    FBCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    HBCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BBCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    Remark = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Hoterls", x => x.HotelId);
                    table.ForeignKey(
                        name: "FK_Sr_Hotels_MSGA_City",
                        column: x => x.CityID,
                        principalTable: "MSGA_City",
                        principalColumn: "CityID");
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterExportDetail",
                columns: table => new
                {
                    LetExpDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LetterExportId = table.Column<int>(type: "int", nullable: true),
                    BuyerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BuyerAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BuyerId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsCurrentBuyer = table.Column<bool>(type: "bit", nullable: true),
                    colSalePrinted = table.Column<bool>(type: "bit", nullable: true),
                    colQutPrinted = table.Column<bool>(type: "bit", nullable: true),
                    colLetterPrinted = table.Column<bool>(type: "bit", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterExportDetail", x => x.LetExpDetailId);
                    table.ForeignKey(
                        name: "FK_MsGA_LetterExportDetail_MsGA_LetterExport",
                        column: x => x.LetterExportId,
                        principalTable: "MsGA_LetterExport",
                        principalColumn: "LetterExportId");
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterFayumDetail",
                columns: table => new
                {
                    LetFayumDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LetterFayumId = table.Column<int>(type: "int", nullable: true),
                    BuyerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BuyerAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BuyerId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsCurrentBuyer = table.Column<bool>(type: "bit", nullable: true),
                    colSalePrinted = table.Column<bool>(type: "bit", nullable: true),
                    colQutPrinted = table.Column<bool>(type: "bit", nullable: true),
                    colLetterPrinted = table.Column<bool>(type: "bit", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField11 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField21 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterFayumDetail", x => x.LetFayumDetailId);
                    table.ForeignKey(
                        name: "FK_MsGA_LetterFayumDetail_MsGA_LetterFayum",
                        column: x => x.LetterFayumId,
                        principalTable: "MsGA_LetterFayum",
                        principalColumn: "LetterFayumId");
                });

            migrationBuilder.CreateTable(
                name: "MsGA_LetterNormalDetail",
                columns: table => new
                {
                    LetNormDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LetterNormId = table.Column<int>(type: "int", nullable: true),
                    BuyerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    BuyerAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BuyerId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsCurrentBuyer = table.Column<bool>(type: "bit", nullable: true),
                    colSalePrinted = table.Column<bool>(type: "bit", nullable: true),
                    colQutPrinted = table.Column<bool>(type: "bit", nullable: true),
                    colLetterPrinted = table.Column<bool>(type: "bit", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TaxPrinted = table.Column<bool>(type: "bit", nullable: true),
                    AddField11 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField21 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PlateNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaxReg = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_LetterNormalDetail", x => x.LetNormDetailId);
                    table.ForeignKey(
                        name: "FK_MsGA_LetterNormalDetail_MsGA_LetterNormal",
                        column: x => x.LetterNormId,
                        principalTable: "MsGA_LetterNormal",
                        principalColumn: "LetterNormId");
                });

            migrationBuilder.CreateTable(
                name: "MsGA_MotorSNDetail",
                columns: table => new
                {
                    MotorSearialID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MotorDocId = table.Column<int>(type: "int", nullable: true),
                    LetterNormId = table.Column<int>(type: "int", nullable: true),
                    LetterFayumId = table.Column<int>(type: "int", nullable: true),
                    MororID = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    CapcityId = table.Column<int>(type: "int", nullable: true),
                    MachineID = table.Column<int>(type: "int", nullable: true),
                    MotorSN = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    BodySN = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    BasicSaleType = table.Column<byte>(type: "tinyint", nullable: true, defaultValueSql: "((0))", comment: "0 Cash ; 1 Installment"),
                    LetterType = table.Column<bool>(type: "bit", nullable: true),
                    Model = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_MotorSearial", x => x.MotorSearialID);
                    table.ForeignKey(
                        name: "FK_MsGA_MotorSNDetail_MsGA_LetterFayum",
                        column: x => x.LetterFayumId,
                        principalTable: "MsGA_LetterFayum",
                        principalColumn: "LetterFayumId");
                    table.ForeignKey(
                        name: "FK_MsGA_MotorSNDetail_MsGA_LetterNormal",
                        column: x => x.LetterNormId,
                        principalTable: "MsGA_LetterNormal",
                        principalColumn: "LetterNormId");
                    table.ForeignKey(
                        name: "FK_MsGA_MotorSNDetail_MsGA_MotorSN",
                        column: x => x.MotorDocId,
                        principalTable: "MsGA_MotorSN",
                        principalColumn: "MotorDocId");
                });

            migrationBuilder.CreateTable(
                name: "MsGA_PeriodicBookDetail",
                columns: table => new
                {
                    PeriodicBookDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PeriodicBookId = table.Column<int>(type: "int", nullable: true),
                    LetterNormId = table.Column<int>(type: "int", nullable: true),
                    Serial = table.Column<int>(type: "int", nullable: true),
                    MotorSN = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    BodySN = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MororID = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    CapcityId = table.Column<int>(type: "int", nullable: true),
                    MachineID = table.Column<int>(type: "int", nullable: true),
                    BasicSaleType = table.Column<byte>(type: "tinyint", nullable: true, defaultValueSql: "((0))", comment: "0 Cash ; 1 Installment"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Model = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_PeriodicBookDetail", x => x.PeriodicBookDetailId);
                    table.ForeignKey(
                        name: "FK_MsGA_PeriodicBookDetail_MsGA_LetterNormal",
                        column: x => x.LetterNormId,
                        principalTable: "MsGA_LetterNormal",
                        principalColumn: "LetterNormId");
                    table.ForeignKey(
                        name: "FK_MsGA_PeriodicBookDetail_MsGA_PeriodicBook",
                        column: x => x.PeriodicBookId,
                        principalTable: "MsGA_PeriodicBook",
                        principalColumn: "PeriodicBookId");
                });

            migrationBuilder.CreateTable(
                name: "MsGA_ShipmentDetail",
                columns: table => new
                {
                    ShipMentDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShipMentId = table.Column<int>(type: "int", nullable: false),
                    LetterExportId = table.Column<int>(type: "int", nullable: true),
                    Serial = table.Column<int>(type: "int", nullable: true),
                    MotorSN = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    BodySN = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    MororID = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    CapcityId = table.Column<int>(type: "int", nullable: true),
                    MachineID = table.Column<int>(type: "int", nullable: true),
                    BasicSaleType = table.Column<byte>(type: "tinyint", nullable: true, defaultValueSql: "((0))", comment: "0 Cash ; 1 Installment"),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Model = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MsGA_ShipmentDetail", x => x.ShipMentDetailId);
                    table.ForeignKey(
                        name: "FK_MsGA_ShipmentDetail_MsGA_LetterExport",
                        column: x => x.LetterExportId,
                        principalTable: "MsGA_LetterExport",
                        principalColumn: "LetterExportId");
                    table.ForeignKey(
                        name: "FK_MsGA_ShipmentDetail_MsGA_Shipment",
                        column: x => x.ShipMentId,
                        principalTable: "MsGA_Shipment",
                        principalColumn: "ShipMentId");
                });

            migrationBuilder.CreateTable(
                name: "Print_PricingDetails",
                columns: table => new
                {
                    PrinPriceIdDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrinPriceId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    GramTypeId = table.Column<int>(type: "int", nullable: true),
                    GofferId = table.Column<int>(type: "int", nullable: true),
                    ProductTypeId = table.Column<int>(type: "int", nullable: true),
                    PartSerial = table.Column<byte>(type: "tinyint", nullable: true),
                    Layer = table.Column<byte>(type: "tinyint", nullable: true),
                    Factor = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GramFactor = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Length = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Width = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Height = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDimension = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Weight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Materialgram = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OperationPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    KnifeLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    KnifeWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SolfanPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Slofan = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LayerPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_PricingDetails", x => x.PrinPriceIdDetailId);
                    table.ForeignKey(
                        name: "FK_Print_PricingDetails_Print_Pricing",
                        column: x => x.PrinPriceId,
                        principalTable: "Print_Pricing",
                        principalColumn: "PrinPriceId");
                });

            migrationBuilder.CreateTable(
                name: "Print_QoutationDetails",
                columns: table => new
                {
                    PrinQoutDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrinQoutId = table.Column<int>(type: "int", nullable: false),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OuterBoxesCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    EditTypeId = table.Column<int>(type: "int", nullable: true),
                    SizeSource = table.Column<byte>(type: "tinyint", nullable: true),
                    StockingId = table.Column<int>(type: "int", nullable: true),
                    DistributId = table.Column<int>(type: "int", nullable: true),
                    BoxTypeId = table.Column<int>(type: "int", nullable: true),
                    SectorId = table.Column<int>(type: "int", nullable: true),
                    GofferId = table.Column<int>(type: "int", nullable: true),
                    IsDraw = table.Column<bool>(type: "bit", nullable: true),
                    IsSample = table.Column<bool>(type: "bit", nullable: true),
                    PartsCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BoxCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Layers = table.Column<int>(type: "int", nullable: true),
                    OutOrderLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OutOrderWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OutOrderHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InOrderLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InOrderWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InOrderHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterHeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CutterMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GofferMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurpuraMetricLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_QoutationDetails", x => x.PrinQoutDetailId);
                    table.ForeignKey(
                        name: "FK_Print_QoutationDetails_Print_Qoutation",
                        column: x => x.PrinQoutId,
                        principalTable: "Print_Qoutation",
                        principalColumn: "PrinQoutId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_BillOfMaterialItems",
                columns: table => new
                {
                    BillItemsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: false),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaterialProductPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductionUnitId = table.Column<int>(type: "int", nullable: true),
                    ProductionUnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CostPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_BillOfMaterialItems", x => x.BillItemsId);
                    table.ForeignKey(
                        name: "FK_Prod_BillOfMaterialItems_Prod_BillOfMaterial",
                        column: x => x.BillOfMaterialId,
                        principalTable: "Prod_BillOfMaterial",
                        principalColumn: "BillOfMaterialId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_BillOfMaterialSecondaryItems",
                columns: table => new
                {
                    BillSecondaryItemsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: false),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductionUnitId = table.Column<int>(type: "int", nullable: true),
                    ProductionUnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SecondaryProductPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProductCostPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_BillOfMaterialSecondaryItems", x => x.BillSecondaryItemsId);
                    table.ForeignKey(
                        name: "FK_Prod_BillOfMaterialSecondaryItems_Prod_BillOfMaterial",
                        column: x => x.BillOfMaterialId,
                        principalTable: "Prod_BillOfMaterial",
                        principalColumn: "BillOfMaterialId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_EmpEquipDistribDetail",
                columns: table => new
                {
                    EmpEquipDistDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpEquipDistId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_EmpEquipDistribDetail", x => x.EmpEquipDistDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_EmpEquipDistribDetail_Prod_EmpEquipDistrib",
                        column: x => x.EmpEquipDistId,
                        principalTable: "Prod_EmpEquipDistrib",
                        principalColumn: "EmpEquipDistId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_EmpJobOrderDistribDetail",
                columns: table => new
                {
                    EmpJobOrderDistDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpJobOrderDistId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_EmpJobOrderDistribDetail", x => x.EmpJobOrderDistDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_EmpJobOrderDistribDetail_Prod_EmpJobOrderDistrib",
                        column: x => x.EmpJobOrderDistId,
                        principalTable: "Prod_EmpJobOrderDistrib",
                        principalColumn: "EmpJobOrderDistId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_EquipProfile",
                columns: table => new
                {
                    EquipProfileId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProfileCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    ProdileDesc = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_EquipProfile", x => x.EquipProfileId);
                    table.ForeignKey(
                        name: "FK_Prod_EquipProfile_Prod_Equipments",
                        column: x => x.EquipId,
                        principalTable: "Prod_Equipments",
                        principalColumn: "EquipId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_AttributeValue",
                columns: table => new
                {
                    AttribValuId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AttributId = table.Column<int>(type: "int", nullable: true),
                    AttributValuName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AttributValuName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AttributValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    LengthMeter = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LengthCentimeter = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LengthMillimeters = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WidthMeter = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WidthCentimeter = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WidthMillimeters = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HeightMeter = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HeightCentimeter = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HeightMillimeters = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_AttributeValue", x => x.AttribValuId);
                    table.ForeignKey(
                        name: "FK_Prod_AttributeValue_Prod_ItemAttributes",
                        column: x => x.AttributId,
                        principalTable: "Prod_ItemAttributes",
                        principalColumn: "AttributId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_ItemAttributesBatchesDetails",
                columns: table => new
                {
                    ItemAtrributBatchValuesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: false),
                    AttribValuId = table.Column<int>(type: "int", nullable: true),
                    AttributId = table.Column<int>(type: "int", nullable: true),
                    AttribValueDesc = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemAttributesBatchesDetails", x => x.ItemAtrributBatchValuesId);
                    table.ForeignKey(
                        name: "FK_Prod_ItemAttributesBatchesDetails_Prod_ItemAttributesBatche",
                        column: x => x.ItemAtrribBatchId,
                        principalTable: "Prod_ItemAttributesBatche",
                        principalColumn: "ItemAtrribBatchId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_ItemBatchPartition",
                columns: table => new
                {
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    QtyPartiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QtyInNotebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseNumber = table.Column<int>(type: "int", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    VarianceQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReservedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesNotDelivered = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurNotReceived = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutWithoutBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInWithoutCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WithoutCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemMax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TVersion = table.Column<long>(type: "bigint", nullable: true, comment: "number of updates on the table"),
                    TType = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true, comment: "i for inserted, u for updated", collation: "Arabic_CI_AI"),
                    QtyIUnit2Notebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QtyIUnit2Partiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemBatchPartition", x => x.ItemPatchPartitionId);
                    table.ForeignKey(
                        name: "FK_Prod_ItemBatchPartition_Prod_ItemAttributesBatche",
                        column: x => x.ItemAtrribBatchId,
                        principalTable: "Prod_ItemAttributesBatche",
                        principalColumn: "ItemAtrribBatchId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderEquipment",
                columns: table => new
                {
                    JobEquipId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    JOrderEquipDocDetailId = table.Column<int>(type: "int", nullable: true),
                    JOrderEquipDocId = table.Column<int>(type: "int", nullable: true),
                    TaskEquipJoinId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    EquipProfileId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    RequestedNumber = table.Column<int>(type: "int", nullable: true),
                    RealNumber = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    StandardHourlyCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FromTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderEquipment", x => x.JobEquipId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderEquipment_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderExpenses",
                columns: table => new
                {
                    JobExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    ExpensValue = table.Column<decimal>(type: "decimal(25,3)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    bitOnClient = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderExpenses", x => x.JobExpenseId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderExpenses_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderGoStock",
                columns: table => new
                {
                    jobGoStockId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemCardId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderGoStock", x => x.jobGoStockId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderGoStock_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderJobs",
                columns: table => new
                {
                    JobJobId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    TaskJobJoinId = table.Column<int>(type: "int", nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocDetailId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    RequestedNumber = table.Column<int>(type: "int", nullable: true),
                    RealNumber = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderJobs", x => x.JobJobId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderJobs_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderMaterials",
                columns: table => new
                {
                    jobMaterialId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AnWeightRateId = table.Column<int>(type: "int", nullable: true),
                    AnWeightRateDetailId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderMaterials", x => x.jobMaterialId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderMaterials_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderScrap",
                columns: table => new
                {
                    jobScrapId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemCardId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderScrap", x => x.jobScrapId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderScrap_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderServices",
                columns: table => new
                {
                    JobServiceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocDetailId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ServiceValue = table.Column<decimal>(type: "decimal(25,3)", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OtherCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderServices", x => x.JobServiceId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderServices_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderTasks",
                columns: table => new
                {
                    JobTaskId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderTasks", x => x.JobTaskId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderTasks_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderWorkFlow",
                columns: table => new
                {
                    JobOrderDepartId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    DepartMentId = table.Column<int>(type: "int", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    Note = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderWorkFlow", x => x.JobOrderDepartId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderWorkFlow_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderEmpCostDocDetail",
                columns: table => new
                {
                    JOrderEmpDocDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JOrderEmpDocId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    FromTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExecutTime = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CostHour = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderEmpCostDocDetail", x => x.JOrderEmpDocDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderEmpCostDocDetail_Prod_JobOrderEmpCostDoc",
                        column: x => x.JOrderEmpDocId,
                        principalTable: "Prod_JobOrderEmpCostDoc",
                        principalColumn: "JOrderEmpDocId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderEquipCostDocDetail",
                columns: table => new
                {
                    JOrderEquipDocDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JOrderEquipDocId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    FromTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExecutTime = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CostHour = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderEquipCostDocDetail", x => x.JOrderEquipDocDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderEquipCostDocDetail_Prod_JobOrderEquipCostDoc",
                        column: x => x.JOrderEquipDocId,
                        principalTable: "Prod_JobOrderEquipCostDoc",
                        principalColumn: "JOrderEquipDocId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_ProductionLineDetails",
                columns: table => new
                {
                    ProdLineDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProLineId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ProductionLineDetails", x => x.ProdLineDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_ProductionLineDetails_Prod_ProductionLine",
                        column: x => x.ProLineId,
                        principalTable: "Prod_ProductionLine",
                        principalColumn: "ProLineId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_ProductionOrderDetail",
                columns: table => new
                {
                    ProdOrderDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: true),
                    RecipeId = table.Column<int>(type: "int", nullable: true),
                    RecipeDetaiId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ProLineId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ProductionOrderDetail", x => x.ProdOrderDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_ProductionOrderDetail_Prod_ProductionOrder",
                        column: x => x.ProductionOrderId,
                        principalTable: "Prod_ProductionOrder",
                        principalColumn: "ProductionOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_RecipeDetail",
                columns: table => new
                {
                    RecipeDetaiId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RecipeId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ProLineId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_RecipeDetail", x => x.RecipeDetaiId);
                    table.ForeignKey(
                        name: "FK_Prod_RecipeDetail_Prod_Recipe",
                        column: x => x.RecipeId,
                        principalTable: "Prod_Recipe",
                        principalColumn: "RecipeId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JoinTaskEquipments",
                columns: table => new
                {
                    TaskEquipJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    RequestedNumber = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JoinTaskEquipments", x => x.TaskEquipJoinId);
                    table.ForeignKey(
                        name: "FK_Prod_JoinTaskEquipments_Prod_Tasks",
                        column: x => x.TaskId,
                        principalTable: "Prod_Tasks",
                        principalColumn: "TaskId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JoinTaskJob",
                columns: table => new
                {
                    TaskJobJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    JobId = table.Column<int>(type: "int", nullable: true),
                    RequestedNumber = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JoinTaskJob", x => x.TaskJobJoinId);
                    table.ForeignKey(
                        name: "FK_Prod_JoinTaskJob_Prod_Tasks",
                        column: x => x.TaskId,
                        principalTable: "Prod_Tasks",
                        principalColumn: "TaskId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderEquipment",
                columns: table => new
                {
                    WorkOrderEquipId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    JOrderEquipDocDetailId = table.Column<int>(type: "int", nullable: true),
                    JOrderEquipDocId = table.Column<int>(type: "int", nullable: true),
                    TaskEquipJoinId = table.Column<int>(type: "int", nullable: true),
                    EquipId = table.Column<int>(type: "int", nullable: true),
                    EquipProfileId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    RequestedNumber = table.Column<int>(type: "int", nullable: true),
                    RealNumber = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    StandardHourlyCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FromTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderEquipment", x => x.WorkOrderEquipId);
                    table.ForeignKey(
                        name: "FK_Prod_WorkOrderEquipment_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderExpenses",
                columns: table => new
                {
                    WorkOrderExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    ExpensValue = table.Column<decimal>(type: "decimal(25,3)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    bitOnClient = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderExpenses", x => x.WorkOrderExpenseId);
                    table.ForeignKey(
                        name: "FK_Prod_WorkOrderExpenses_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderItemRecQualityDocs",
                columns: table => new
                {
                    WorkOrderRecQualityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemRecQualityId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderItemRecQualityDocs", x => x.WorkOrderRecQualityId);
                    table.ForeignKey(
                        name: "FK_Prod_WorkOrderItemRecQualityDocs_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderMaterials",
                columns: table => new
                {
                    WorkOrderMaterialId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderMaterials", x => x.WorkOrderMaterialId);
                    table.ForeignKey(
                        name: "FK_Prod_WorkOrderMaterials_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderProdItems",
                columns: table => new
                {
                    WorkOrderProdItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemRecQualityDetailId = table.Column<int>(type: "int", nullable: true),
                    ItemRecQualityId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NormalCleanQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoubleCleanQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NormalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NormalQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoublCheckQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoublCheckQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RejectedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RejectedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceNormal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalNormal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceDoubleClean = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDoubleClean = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderProdItems", x => x.WorkOrderProdItemId);
                    table.ForeignKey(
                        name: "FK_Prod_WorkOrderProdItems_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_WorkOrderServices",
                columns: table => new
                {
                    WorkOrderServiceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocDetailId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ServiceValue = table.Column<decimal>(type: "decimal(25,3)", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OtherCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_WorkOrderServices", x => x.WorkOrderServiceId);
                    table.ForeignKey(
                        name: "FK_Prod_WorkOrderServices_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_Accounts",
                columns: table => new
                {
                    ProjectAccId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(25,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_Accounts", x => x.ProjectAccId);
                    table.ForeignKey(
                        name: "FK_Proj_Accounts_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_EstimateItems",
                columns: table => new
                {
                    ProjectEstimateItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    AttributeCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AttributeName = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    SuggestPrice = table.Column<decimal>(type: "numeric(25,2)", nullable: true),
                    EstimateCost = table.Column<decimal>(type: "numeric(25,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_EstimateItems", x => x.ProjectEstimateItemId);
                    table.ForeignKey(
                        name: "FK_Proj_EstimateItems_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_Expenses",
                columns: table => new
                {
                    ProjectExpensId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    EstimateValue = table.Column<decimal>(type: "numeric(25,2)", nullable: true),
                    EstimatePercent = table.Column<decimal>(type: "numeric(10,4)", nullable: true),
                    RealValue = table.Column<decimal>(type: "numeric(25,2)", nullable: true),
                    RealPercent = table.Column<decimal>(type: "numeric(10,4)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_Expenses", x => x.ProjectExpensId);
                    table.ForeignKey(
                        name: "FK_Proj_Expenses_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_Fund",
                columns: table => new
                {
                    ProjectFundId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    FundName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    FundName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    FundPercent = table.Column<decimal>(type: "numeric(10,4)", nullable: true),
                    FundValue = table.Column<decimal>(type: "numeric(25,2)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    Contact = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_Fund", x => x.ProjectFundId);
                    table.ForeignKey(
                        name: "FK_Proj_Fund_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjDocuments",
                columns: table => new
                {
                    ProjDocumentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    OwnShipBondId = table.Column<int>(type: "int", nullable: true),
                    ShelvId = table.Column<int>(type: "int", nullable: true),
                    PaperNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AttachSerial = table.Column<long>(type: "bigint", nullable: true),
                    SearchTags = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RenewalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjDocuments", x => x.ProjDocumentId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjDocuments_Cod_OwnershipBonds",
                        column: x => x.OwnShipBondId,
                        principalTable: "Cod_OwnershipBonds",
                        principalColumn: "OwnShipBondId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjDocuments_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjectItemsJoin",
                columns: table => new
                {
                    ProjItemsJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectItemsId = table.Column<int>(type: "int", nullable: true),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    ExpectItemPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpectItemValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualItemPercentExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualItemExpenseValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FinishPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjectItemsJoin", x => x.ProjItemsJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjectItemsJoin_Proj_ProjectItems",
                        column: x => x.ProjectItemsId,
                        principalTable: "Proj_ProjectItems",
                        principalColumn: "ProjectItemsId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjectItemsJoin_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjExploitJoin",
                columns: table => new
                {
                    ProjExploitJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    BuildExploitId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjExploitJoin", x => x.ProjExploitJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjExploitJoin_Cod_BuildingExploitation",
                        column: x => x.BuildExploitId,
                        principalTable: "Cod_BuildingExploitation",
                        principalColumn: "BuildExploitId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjExploitJoin_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjInsurance",
                columns: table => new
                {
                    ProjInsuranceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    BuildInsurStatId = table.Column<int>(type: "int", nullable: true),
                    InsurCovTypeId = table.Column<int>(type: "int", nullable: true),
                    InsuranceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjInsurance", x => x.ProjInsuranceId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjInsurance_Cod_BuildingInsuranceStatus",
                        column: x => x.BuildInsurStatId,
                        principalTable: "Cod_BuildingInsuranceStatus",
                        principalColumn: "BuildInsurStatId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjInsurance_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjOccupTypeJoin",
                columns: table => new
                {
                    ProjOccupTypeJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    BuildOccupTypeId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjOccupTypeJoin", x => x.ProjOccupTypeJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjOccupTypeJoin_Cod_BuildOccupTypes",
                        column: x => x.BuildOccupTypeId,
                        principalTable: "Cod_BuildOccupTypes",
                        principalColumn: "BuildOccupTypeId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjOccupTypeJoin_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjOwnerJoin",
                columns: table => new
                {
                    ProjOwnerJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceAccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShareValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SharePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjOwnerJoin", x => x.ProjOwnerJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjOwnerJoin_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjParkingJoin",
                columns: table => new
                {
                    ProjParkJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    ParkingId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjParkingJoin", x => x.ProjParkJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjParkingJoin_Cod_Parkings",
                        column: x => x.ParkingId,
                        principalTable: "Cod_Parkings",
                        principalColumn: "ParkingId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjParkingJoin_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjPermitActivityJoin",
                columns: table => new
                {
                    ProjPermitActivityJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    BuildPermitActivityId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjPermitActivityJoin", x => x.ProjPermitActivityJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjPermitActivityJoin_Cod_BuildPermitActiv",
                        column: x => x.BuildPermitActivityId,
                        principalTable: "Cod_BuildPermitActiv",
                        principalColumn: "BuildPermitActivityId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjPermitActivityJoin_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjPerspectiveJoin",
                columns: table => new
                {
                    ProjPerspectiveJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    BuildPerspectiveId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjPerspectiveJoin", x => x.ProjPerspectiveJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjPerspectiveJoin_Cod_BuildPerspective",
                        column: x => x.BuildPerspectiveId,
                        principalTable: "Cod_BuildPerspective",
                        principalColumn: "BuildPerspectiveId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjPerspectiveJoin_Proj_Projects2",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjPicture",
                columns: table => new
                {
                    ProjPictureId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())", comment: ""),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: true),
                    AttachPath = table.Column<string>(type: "varchar(max)", unicode: false, nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjPicture", x => x.ProjPictureId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjPicture_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnits",
                columns: table => new
                {
                    ProjUnitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    UnittypeId = table.Column<int>(type: "int", nullable: true),
                    UnitStatId = table.Column<int>(type: "int", nullable: true),
                    UnitDegreeId = table.Column<int>(type: "int", nullable: true),
                    UnFinLevelId = table.Column<int>(type: "int", nullable: true),
                    UnitInsurstatId = table.Column<int>(type: "int", nullable: true),
                    ParkingId = table.Column<int>(type: "int", nullable: true),
                    ContractTypeId = table.Column<int>(type: "int", nullable: true),
                    RentCaseId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    RoomCount = table.Column<int>(type: "int", nullable: true),
                    FloorNumber = table.Column<int>(type: "int", nullable: true),
                    WaterCounter = table.Column<long>(type: "bigint", nullable: true),
                    ElectricityCounter = table.Column<long>(type: "bigint", nullable: true),
                    CalcAllMeters = table.Column<bool>(type: "bit", nullable: true),
                    BuildingArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BuildingMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EstimatedUnitArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommissionIsPercent = table.Column<bool>(type: "bit", nullable: true),
                    CommissionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpectedDeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UnitStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UnitExpectedStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ParkArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ParkMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RoofArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RoofMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GardenArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GardenMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BaseMentArea = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BasementMeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CanSaleUnits = table.Column<bool>(type: "bit", nullable: true),
                    CanRentUnits = table.Column<bool>(type: "bit", nullable: true),
                    ProjectStopped = table.Column<bool>(type: "bit", nullable: true),
                    Sold = table.Column<bool>(type: "bit", nullable: true),
                    ContractDocNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    ContractDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Reserved = table.Column<bool>(type: "bit", nullable: true),
                    ReserveDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReserveDocNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Rented = table.Column<bool>(type: "bit", nullable: true),
                    RentDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RentDocNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    MaxRents = table.Column<byte>(type: "tinyint", nullable: true),
                    UnitOrderInFloor = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnits_1", x => x.ProjUnitId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnits_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_RealItems",
                columns: table => new
                {
                    ProjectRealItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    AttributeCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AttributeName = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    SuggestPrice = table.Column<decimal>(type: "numeric(25,2)", nullable: true),
                    RealCost = table.Column<decimal>(type: "numeric(25,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_RealItems", x => x.ProjectRealItemId);
                    table.ForeignKey(
                        name: "FK_Proj_RealItems_Proj_Projects",
                        column: x => x.ProjectId,
                        principalTable: "Proj_Projects",
                        principalColumn: "ProjectId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractAdds",
                columns: table => new
                {
                    TenderContractAddId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PercentNum = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddToExtract = table.Column<bool>(type: "bit", nullable: true),
                    AddPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AffectContract = table.Column<bool>(type: "bit", nullable: true),
                    CanExceedValu = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractAdds", x => x.TenderContractAddId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractAdds_Proj_TenderContract",
                        column: x => x.TenderContractId,
                        principalTable: "Proj_TenderContract",
                        principalColumn: "TenderContractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractDetail",
                columns: table => new
                {
                    TenderContractDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    TenderOfferDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemStatusDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractDetail", x => x.TenderContractDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractDetail_Proj_TenderContract",
                        column: x => x.TenderContractId,
                        principalTable: "Proj_TenderContract",
                        principalColumn: "TenderContractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractDiscounts",
                columns: table => new
                {
                    TenderContractDiscId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Accomulative = table.Column<bool>(type: "bit", nullable: true),
                    CurrentPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscFromExtract = table.Column<bool>(type: "bit", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AffectContract = table.Column<bool>(type: "bit", nullable: true),
                    CanExceedValu = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractDiscounts", x => x.TenderContractDiscId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractDiscounts_Proj_TenderContract",
                        column: x => x.TenderContractId,
                        principalTable: "Proj_TenderContract",
                        principalColumn: "TenderContractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorContractAdds",
                columns: table => new
                {
                    ContractorContractAddId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorContractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Accomulative = table.Column<bool>(type: "bit", nullable: true),
                    CurrentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddToExitract = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrentValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValuAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorContractAdds", x => x.ContractorContractAddId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractorContractAdds_Proj_TenderContractorContract",
                        column: x => x.ContractorContractId,
                        principalTable: "Proj_TenderContractorContract",
                        principalColumn: "ContractorContractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorContractDetails",
                columns: table => new
                {
                    ContractorContractDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorContractId = table.Column<int>(type: "int", nullable: true),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    TenderOfferDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemStatusDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorContractDetails", x => x.ContractorContractDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractorContractDetails_Proj_TenderContractorContract",
                        column: x => x.ContractorContractId,
                        principalTable: "Proj_TenderContractorContract",
                        principalColumn: "ContractorContractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorContractDiscounts",
                columns: table => new
                {
                    ContractorContractDiscId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorContractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PercentNum = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscFromExtract = table.Column<bool>(type: "bit", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AffectContract = table.Column<bool>(type: "bit", nullable: true),
                    CanExceedValu = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    DiscValuAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorContractDiscounts", x => x.ContractorContractDiscId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractorContractDiscounts_Proj_TenderContractorContract",
                        column: x => x.ContractorContractId,
                        principalTable: "Proj_TenderContractorContract",
                        principalColumn: "ContractorContractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorExitractAdds",
                columns: table => new
                {
                    ContractorExitractAddId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorExitractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Accomulative = table.Column<bool>(type: "bit", nullable: true),
                    PreviousValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PreviousValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValuAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorExitractAdds", x => x.ContractorExitractAddId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractorExitractAdds_Proj_TenderContractorExitract",
                        column: x => x.ContractorExitractId,
                        principalTable: "Proj_TenderContractorExitract",
                        principalColumn: "ContractorExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorExitractDetail",
                columns: table => new
                {
                    ContractorExitractDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorExitractId = table.Column<int>(type: "int", nullable: true),
                    TenderPlanDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    PrevQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PreviousRais = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PrevReturn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisBeforPrevReturn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderCat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderItemPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderTotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DistQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalSubDist = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPriceDist = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    PrevQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DistQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorExitractDetail", x => x.ContractorExitractDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractorExitractDetail_Proj_TenderContractorExitract",
                        column: x => x.ContractorExitractId,
                        principalTable: "Proj_TenderContractorExitract",
                        principalColumn: "ContractorExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderContractorExitractDiscounts",
                columns: table => new
                {
                    ContractorExitractDiscId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ContractorExitractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Accomulative = table.Column<bool>(type: "bit", nullable: true),
                    PreviousValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccomulativeValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccomulativePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PreviousValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValuAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccomulativeValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderContractorExitractDiscounts", x => x.ContractorExitractDiscId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderContractorExitractDiscounts_Proj_TenderContractorExitract",
                        column: x => x.ContractorExitractId,
                        principalTable: "Proj_TenderContractorExitract",
                        principalColumn: "ContractorExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderExecutionExitractDetail",
                columns: table => new
                {
                    ExecutExitractDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExecutExitractId = table.Column<int>(type: "int", nullable: true),
                    TenderPlanDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PrevQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderCat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalSubItem = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderItemPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderTotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DistQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalSubDist = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPriceDist = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PrevQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DistQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PrevReturn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisBeforPrevReturn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PreviousRais = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderExecutionExitractDetail", x => x.ExecutExitractDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderExecutionExitractDetail_Proj_TenderExecutionExitract",
                        column: x => x.ExecutExitractId,
                        principalTable: "Proj_TenderExecutionExitract",
                        principalColumn: "ExecutExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderOfferDetail",
                columns: table => new
                {
                    TenderOfferDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderOfferId = table.Column<int>(type: "int", nullable: true),
                    TenderQoutDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemStatusDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderOfferDetail", x => x.TenderOfferDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderOfferDetail_Proj_TenderOffer",
                        column: x => x.TenderOfferId,
                        principalTable: "Proj_TenderOffer",
                        principalColumn: "TenderOfferId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderOwnerExitractAdds",
                columns: table => new
                {
                    OwnerExitractAddId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OwnerExitractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Accomulative = table.Column<bool>(type: "bit", nullable: true),
                    PreviousValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PreviousValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AddValuAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderOwnerExitractAdds", x => x.OwnerExitractAddId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderOwnerExitractAdds_Proj_TenderOwnerExitract",
                        column: x => x.OwnerExitractId,
                        principalTable: "Proj_TenderOwnerExitract",
                        principalColumn: "OwnerExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderOwnerExitractDetail",
                columns: table => new
                {
                    OwnerExitractDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OwnerExitractId = table.Column<int>(type: "int", nullable: true),
                    TenderPlanDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    PrevQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PreviousRais = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PrevReturn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisBeforPrevReturn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderCat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderItemPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderTotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DistQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalSubDist = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPriceDist = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    PrevQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContractQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RaisQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RemainQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DistQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderOwnerExitractDetail", x => x.OwnerExitractDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderOwnerExitractDetail_Proj_TenderOwnerExitract",
                        column: x => x.OwnerExitractId,
                        principalTable: "Proj_TenderOwnerExitract",
                        principalColumn: "OwnerExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderOwnerExitractDiscounts",
                columns: table => new
                {
                    OwnerExitractDiscId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OwnerExitractId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Accomulative = table.Column<bool>(type: "bit", nullable: true),
                    PreviousValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccomulativeValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccomulativePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PreviousValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiscValuAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccomulativeValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderOwnerExitractDiscounts", x => x.OwnerExitractDiscId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderOwnerExitractDiscounts_Proj_TenderOwnerExitract",
                        column: x => x.OwnerExitractId,
                        principalTable: "Proj_TenderOwnerExitract",
                        principalColumn: "OwnerExitractId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderPlanDetails",
                columns: table => new
                {
                    TenderPlanDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderPlanId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualDeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LateDays = table.Column<int>(type: "int", nullable: true),
                    WorkPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderPlanDetails", x => x.TenderPlanDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderPlanDetails_Proj_TenderPlan",
                        column: x => x.TenderPlanId,
                        principalTable: "Proj_TenderPlan",
                        principalColumn: "TenderPlanId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderPlanDistributionDetails",
                columns: table => new
                {
                    TenderPlanJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderPlanDistId = table.Column<int>(type: "int", nullable: true),
                    TenderPlanDetailId = table.Column<int>(type: "int", nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EstimateDeliverDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderPlanDistributionDetails", x => x.TenderPlanJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderPlanDistributionDetails_Proj_TenderPlanDistribution",
                        column: x => x.TenderPlanDistId,
                        principalTable: "Proj_TenderPlanDistribution",
                        principalColumn: "TenderPlanDistId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TenderQoutationDetails",
                columns: table => new
                {
                    TenderQoutDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderQoutationId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    TenderQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderCat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TenderTotal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzCat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzTotalUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzTotalQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzTotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalProfit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemStatusDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TenderDetailId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    TenderQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnalyzTotalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TenderQoutationDetails", x => x.TenderQoutDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TenderQoutationDetails_Proj_TenderQoutation",
                        column: x => x.TenderQoutationId,
                        principalTable: "Proj_TenderQoutation",
                        principalColumn: "TenderQoutationId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_TendersDetails",
                columns: table => new
                {
                    TenderDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TenderId = table.Column<int>(type: "int", nullable: true),
                    TenderItemId = table.Column<int>(type: "int", nullable: true),
                    ParentTenderItemId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ItemStatusDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EstimateDeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ItemCardCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_TendersDetails", x => x.TenderDetailId);
                    table.ForeignKey(
                        name: "FK_Proj_TendersDetails_Proj_Tenders",
                        column: x => x.TenderId,
                        principalTable: "Proj_Tenders",
                        principalColumn: "TenderId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ReserveUnitDocuments",
                columns: table => new
                {
                    ReservDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    OwnShipBondId = table.Column<int>(type: "int", nullable: true),
                    ShelvId = table.Column<int>(type: "int", nullable: true),
                    PaperNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AttachSerial = table.Column<long>(type: "bigint", nullable: true),
                    SearchTags = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    IssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RenewalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ReserveUnitDocuments", x => x.ReservDocId);
                    table.ForeignKey(
                        name: "FK_Proj_ReserveUnitDocuments_Proj_UnitReservation",
                        column: x => x.ReservId,
                        principalTable: "Proj_UnitReservation",
                        principalColumn: "ReservId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ReserveUnitOwners",
                columns: table => new
                {
                    ReservOwnerId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    IsMainOwner = table.Column<bool>(type: "bit", nullable: true),
                    IsConcession = table.Column<bool>(type: "bit", nullable: true),
                    UnitConcessionId = table.Column<int>(type: "int", nullable: true),
                    ConcessionDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConcessionDocNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    OriginalResourceId = table.Column<int>(type: "int", nullable: true),
                    OriginalResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    OriginalResourceAccountId = table.Column<int>(type: "int", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceAccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShareValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SharePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ReserveUnitOwners", x => x.ReservOwnerId);
                    table.ForeignKey(
                        name: "FK_Proj_ReserveUnitOwners_Proj_UnitReservation",
                        column: x => x.ReservId,
                        principalTable: "Proj_UnitReservation",
                        principalColumn: "ReservId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ReserveUnitSellers",
                columns: table => new
                {
                    ReservSellerId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    IsMainOwner = table.Column<bool>(type: "bit", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceAccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShareValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SharePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ReserveUnitSellers", x => x.ReservSellerId);
                    table.ForeignKey(
                        name: "FK_Proj_ReserveUnitSellers_Proj_UnitReservation",
                        column: x => x.ReservId,
                        principalTable: "Proj_UnitReservation",
                        principalColumn: "ReservId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ReservInstallments",
                columns: table => new
                {
                    ReservInstallId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    Serial = table.Column<int>(type: "int", nullable: true),
                    InstallTempDetailId = table.Column<int>(type: "int", nullable: true),
                    PayTypeId = table.Column<int>(type: "int", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceAccountId = table.Column<int>(type: "int", nullable: true),
                    ProjUnitServiceId = table.Column<int>(type: "int", nullable: true),
                    UnitServId = table.Column<int>(type: "int", nullable: true),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    InstallValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidCash = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidCheques = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidBankDeposit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DelayDays = table.Column<int>(type: "int", nullable: true),
                    DelayFine = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Deleted = table.Column<bool>(type: "bit", nullable: true),
                    DeletReason = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ReservInstallments", x => x.ReservInstallId);
                    table.ForeignKey(
                        name: "FK_Proj_ReservInstallments_Proj_UnitReservation1",
                        column: x => x.ReservId,
                        principalTable: "Proj_UnitReservation",
                        principalColumn: "ReservId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_UnitReservationGuarantors",
                columns: table => new
                {
                    GuarantorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ContactName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IDNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ContactPhone1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone3 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone4 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone5 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AccountId1 = table.Column<int>(type: "int", nullable: true),
                    AccountId2 = table.Column<int>(type: "int", nullable: true),
                    AccountId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    ContactCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    ContactEmail1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Bank2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Remark1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remark2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Isprimary = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_UnitReservationGuarantors", x => x.GuarantorId);
                    table.ForeignKey(
                        name: "FK_Proj_UnitReservationGuarantors_Proj_UnitReservation",
                        column: x => x.ReservId,
                        principalTable: "Proj_UnitReservation",
                        principalColumn: "ReservId");
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemDeliverDetails",
                columns: table => new
                {
                    ItemDeliverDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDeliverId = table.Column<int>(type: "int", nullable: true),
                    ItemRecQualityDetailId = table.Column<int>(type: "int", nullable: true),
                    ProdItemRecDetailId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    QualityCatId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NormalCleanQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoubleCleanQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedMachinQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedMachinQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceNormal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalNormal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceDoubleClean = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDoubleClean = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NormalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NormalQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoublCheckQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoublCheckQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RejectedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RejectedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Quality_ItemDeliverDetails", x => x.ItemDeliverDetailId);
                    table.ForeignKey(
                        name: "FK_Quality_ItemDeliverDetails_Quality_ItemDelivery",
                        column: x => x.ItemDeliverId,
                        principalTable: "Quality_ItemDelivery",
                        principalColumn: "ItemDeliverId");
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemDeliveryPackages",
                columns: table => new
                {
                    ItemDeliceryPackId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDeliverId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PackageSerial = table.Column<int>(type: "int", nullable: true),
                    AlterSerial = table.Column<long>(type: "bigint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Quality_ItemDeliveryPackages", x => x.ItemDeliceryPackId);
                    table.ForeignKey(
                        name: "FK_Quality_ItemDeliveryPackages_Quality_ItemDelivery",
                        column: x => x.ItemDeliverId,
                        principalTable: "Quality_ItemDelivery",
                        principalColumn: "ItemDeliverId");
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemRecCheckDetail",
                columns: table => new
                {
                    ItemRecQualityDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemRecQualityId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    QualityCatId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceNormal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalNormal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceDoubleClean = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDoubleClean = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    NormalQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NormalQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoublCheckQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DoublCheckQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RejectedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RejectedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Quality_ItemRecCheckDetail", x => x.ItemRecQualityDetailId);
                    table.ForeignKey(
                        name: "FK_Quality_ItemRecCheckDetail_Quality_ItemRecCheck",
                        column: x => x.ItemRecQualityId,
                        principalTable: "Quality_ItemRecCheck",
                        principalColumn: "ItemRecQualityId");
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemRecPackages",
                columns: table => new
                {
                    ItemRecPackId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemRecQualityId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PackageSerial = table.Column<int>(type: "int", nullable: true),
                    WorkOrderId = table.Column<int>(type: "int", nullable: true),
                    AlterSerial = table.Column<long>(type: "bigint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Quality_ItemRecPackages", x => x.ItemRecPackId);
                    table.ForeignKey(
                        name: "FK_Quality_ItemRecPackages_Prod_WorkOrder",
                        column: x => x.WorkOrderId,
                        principalTable: "Prod_WorkOrder",
                        principalColumn: "WorkOrderId");
                    table.ForeignKey(
                        name: "FK_Quality_ItemRecPackages_Quality_ItemRecCheck",
                        column: x => x.ItemRecQualityId,
                        principalTable: "Quality_ItemRecCheck",
                        principalColumn: "ItemRecQualityId");
                });

            migrationBuilder.CreateTable(
                name: "Quality_ItemRecieveDetails",
                columns: table => new
                {
                    ProdItemRecDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProdItemRecId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MissedQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemRecieveDetails", x => x.ProdItemRecDetailId);
                    table.ForeignKey(
                        name: "FK_Prod_ItemRecieveDetails_Prod_ItemRecieve",
                        column: x => x.ProdItemRecId,
                        principalTable: "Quality_ItemRecieve",
                        principalColumn: "ProdItemRecId");
                });

            migrationBuilder.CreateTable(
                name: "Repair_JobOrderComments",
                columns: table => new
                {
                    RepairCommentsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepairId = table.Column<int>(type: "int", nullable: true),
                    EmpIdComBy = table.Column<int>(type: "int", nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repair_JobOrderComments", x => x.RepairCommentsId);
                    table.ForeignKey(
                        name: "FK_Repair_JobOrderComments_Repair_JobOrder",
                        column: x => x.RepairId,
                        principalTable: "Repair_JobOrder",
                        principalColumn: "RepairId");
                });

            migrationBuilder.CreateTable(
                name: "Repair_JobOrderEmps",
                columns: table => new
                {
                    RepairEmpId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepairId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ServiceValue = table.Column<decimal>(type: "decimal(25,3)", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OtherCost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repair_JobOrderEmps", x => x.RepairEmpId);
                    table.ForeignKey(
                        name: "FK_Repair_JobOrderEmps_Repair_JobOrder",
                        column: x => x.RepairId,
                        principalTable: "Repair_JobOrder",
                        principalColumn: "RepairId");
                });

            migrationBuilder.CreateTable(
                name: "Repair_JobOrderItems",
                columns: table => new
                {
                    RepairItemsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepairId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedMeter = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repair_JobOrderItems", x => x.RepairItemsId);
                    table.ForeignKey(
                        name: "FK_Repair_JobOrderItems_Repair_JobOrder",
                        column: x => x.RepairId,
                        principalTable: "Repair_JobOrder",
                        principalColumn: "RepairId");
                });

            migrationBuilder.CreateTable(
                name: "Repair_JobOrderScrapItems",
                columns: table => new
                {
                    RepairScrapItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepairId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemCardId = table.Column<int>(type: "int", nullable: true),
                    MaterialItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repair_JobOrderScrapItems", x => x.RepairScrapItemId);
                    table.ForeignKey(
                        name: "FK_Repair_JobOrderScrapItems_Repair_JobOrder",
                        column: x => x.RepairId,
                        principalTable: "Repair_JobOrder",
                        principalColumn: "RepairId");
                });

            migrationBuilder.CreateTable(
                name: "Repair_JobOrederExpenses",
                columns: table => new
                {
                    RepairExpensesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepairId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    ExpensValue = table.Column<decimal>(type: "decimal(25,3)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    TimeBeforFormat = table.Column<decimal>(type: "decimal(18,3)", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 Minutes, 2 Hours,3 Days, 4 Months"),
                    Minutes = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Hours = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Days = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Months = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    bitOnClient = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repair_JobOrederExpenses", x => x.RepairExpensesId);
                    table.ForeignKey(
                        name: "FK_Repair_JobOrederExpenses_Repair_JobOrder",
                        column: x => x.RepairId,
                        principalTable: "Repair_JobOrder",
                        principalColumn: "RepairId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Tasks",
                columns: table => new
                {
                    TaskId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComID = table.Column<int>(type: "int", nullable: true),
                    TaskCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    TaskName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TaskName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TaskDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Duration = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Tasks", x => x.TaskId);
                    table.ForeignKey(
                        name: "FK_Sr_Tasks_Sr_Complaints",
                        column: x => x.ComID,
                        principalTable: "Sr_Complaints",
                        principalColumn: "ComID");
                });

            migrationBuilder.CreateTable(
                name: "Sr_ReceptionImages",
                columns: table => new
                {
                    RecImgId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReciptionId = table.Column<int>(type: "int", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    ImgDesc = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ReceptionImages", x => x.RecImgId);
                    table.ForeignKey(
                        name: "FK_Sr_ReceptionImages_Sr_Reciption",
                        column: x => x.ReciptionId,
                        principalTable: "Sr_Reciption",
                        principalColumn: "ReciptionId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_ReciptionDetail",
                columns: table => new
                {
                    RecipDetlId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReciptionId = table.Column<int>(type: "int", nullable: true),
                    CustRequest = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ComID = table.Column<int>(type: "int", nullable: true),
                    Serial = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ReciptionDetail", x => x.RecipDetlId);
                    table.ForeignKey(
                        name: "FK_Sr_ReciptionDetail_Sr_Complaints",
                        column: x => x.ComID,
                        principalTable: "Sr_Complaints",
                        principalColumn: "ComID");
                    table.ForeignKey(
                        name: "FK_Sr_ReciptionDetail_Sr_Reciption",
                        column: x => x.ReciptionId,
                        principalTable: "Sr_Reciption",
                        principalColumn: "ReciptionId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_ServiceDistributionDetails",
                columns: table => new
                {
                    SerDistDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SerDistId = table.Column<int>(type: "int", nullable: true),
                    SerReqId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpId1 = table.Column<int>(type: "int", nullable: true),
                    EmpId2 = table.Column<int>(type: "int", nullable: true),
                    EmpId3 = table.Column<int>(type: "int", nullable: true),
                    EmpId4 = table.Column<int>(type: "int", nullable: true),
                    EmpId5 = table.Column<int>(type: "int", nullable: true),
                    EmpId6 = table.Column<int>(type: "int", nullable: true),
                    EmpId7 = table.Column<int>(type: "int", nullable: true),
                    EmpId8 = table.Column<int>(type: "int", nullable: true),
                    EmpId9 = table.Column<int>(type: "int", nullable: true),
                    EmpId10 = table.Column<int>(type: "int", nullable: true),
                    EmpId11 = table.Column<int>(type: "int", nullable: true),
                    EmpId12 = table.Column<int>(type: "int", nullable: true),
                    EmpId13 = table.Column<int>(type: "int", nullable: true),
                    EmpId14 = table.Column<int>(type: "int", nullable: true),
                    EmpId15 = table.Column<int>(type: "int", nullable: true),
                    EstimateStartTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RealStartTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateEndTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RealEndTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_ServiceDistributionDetails", x => x.SerDistDetailId);
                    table.ForeignKey(
                        name: "FK_Sr_ServiceDistributionDetails_Sr_ServiceDistribution",
                        column: x => x.SerDistId,
                        principalTable: "Sr_ServiceDistribution",
                        principalColumn: "SerDistId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Flight",
                columns: table => new
                {
                    FlightId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    FlightCompany = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Date = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Departure = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Arrival = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TrafficLineId = table.Column<int>(type: "int", nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    PlaceFrom = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PlaceTo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Flight", x => x.FlightId);
                    table.ForeignKey(
                        name: "FK_Sr_Flight_Sr_Trips",
                        column: x => x.TripId,
                        principalTable: "Sr_Trips",
                        principalColumn: "TripId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Transportation",
                columns: table => new
                {
                    TransPortId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true),
                    Date = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Departure = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Arrival = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TrafficLineId = table.Column<int>(type: "int", nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    PlaceFrom = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PlaceTo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Transportation", x => x.TransPortId);
                    table.ForeignKey(
                        name: "FK_Sr_Transportation_Sr_Trips",
                        column: x => x.TripId,
                        principalTable: "Sr_Trips",
                        principalColumn: "TripId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_TripProgramJoin",
                columns: table => new
                {
                    TripProgramJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    ProgramId = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Days = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    MTSCruze = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Number = table.Column<byte>(type: "tinyint", nullable: true, comment: "single, double, Trible")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_TripProgramJoin", x => x.TripProgramJoinId);
                    table.ForeignKey(
                        name: "FK_Sr_TripProgramJoin_Sr_Programs",
                        column: x => x.ProgramId,
                        principalTable: "Sr_Programs",
                        principalColumn: "ProgramId");
                    table.ForeignKey(
                        name: "FK_Sr_TripProgramJoin_Sr_Trips",
                        column: x => x.TripId,
                        principalTable: "Sr_Trips",
                        principalColumn: "TripId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleMovementDetails",
                columns: table => new
                {
                    VehiclMovDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VehiclMovId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true, comment: "ItemCardId"),
                    TimeStart = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NetTime = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DayCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DriverName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleMovementDetails", x => x.VehiclMovDetailId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleMovementDetails_Sr_VehicleMovement",
                        column: x => x.VehiclMovId,
                        principalTable: "Sr_VehicleMovement",
                        principalColumn: "VehiclMovId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Vehicles",
                columns: table => new
                {
                    VehicleId = table.Column<int>(type: "int", nullable: false, comment: "ItemCardId")
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VehicleCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    VehicleTypId = table.Column<int>(type: "int", nullable: true),
                    VehicleShapeId = table.Column<int>(type: "int", nullable: true),
                    TrafficLineId = table.Column<int>(type: "int", nullable: true),
                    WId = table.Column<int>(type: "int", nullable: true),
                    DriverId1 = table.Column<int>(type: "int", nullable: true),
                    DriverId2 = table.Column<int>(type: "int", nullable: true),
                    GarageId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    IsCompanyCar = table.Column<bool>(type: "bit", nullable: true),
                    InWarranty = table.Column<bool>(type: "bit", nullable: true),
                    RegNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    BodyNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    MotorNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    StartCounterNo = table.Column<long>(type: "bigint", nullable: true),
                    CounterNo = table.Column<long>(type: "bigint", nullable: true),
                    YearModel = table.Column<int>(type: "int", nullable: true),
                    Color = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    OwnerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    OwnerAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "Arabic_CI_AI"),
                    PurchaseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    VTypeConcrete = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 car,2 pump"),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Stopped = table.Column<bool>(type: "bit", nullable: true),
                    DayCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Vehicles_1", x => x.VehicleId);
                    table.ForeignKey(
                        name: "FK_Sr_Vehicles_Sr_Garage",
                        column: x => x.GarageId,
                        principalTable: "Sr_Garage",
                        principalColumn: "GarageId");
                    table.ForeignKey(
                        name: "FK_Sr_Vehicles_Sr_VehicleShapes",
                        column: x => x.VehicleShapeId,
                        principalTable: "Sr_VehicleShapes",
                        principalColumn: "VehicleShapeId");
                    table.ForeignKey(
                        name: "FK_Sr_Vehicles_Sr_VehicleTypes",
                        column: x => x.VehicleTypId,
                        principalTable: "Sr_VehicleTypes",
                        principalColumn: "VehicleTypId");
                    table.ForeignKey(
                        name: "FK_Sr_Vehicles_Sr_Warranty",
                        column: x => x.WId,
                        principalTable: "Sr_Warranty",
                        principalColumn: "WId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_OpenningBalanceDetails",
                columns: table => new
                {
                    StockOpenDetailId = table.Column<int>(type: "int", nullable: false),
                    StockOpenId = table.Column<int>(type: "int", nullable: true),
                    StockId = table.Column<int>(type: "int", nullable: true),
                    StockCurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPriceLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_OpenningBalanceDetails", x => x.StockOpenDetailId);
                    table.ForeignKey(
                        name: "FK_Stock_OpenningBalanceDetails_Stock_OpenningBalance",
                        column: x => x.StockOpenId,
                        principalTable: "Stock_OpenningBalance",
                        principalColumn: "StockOpenId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_SalesPurchaseDetails",
                columns: table => new
                {
                    StockSalPurchDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockSalPurchId = table.Column<int>(type: "int", nullable: true),
                    StockTranTypId = table.Column<int>(type: "int", nullable: true),
                    StockDealersId = table.Column<int>(type: "int", nullable: true),
                    DealNo = table.Column<int>(type: "int", nullable: true),
                    DealTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StockId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FixedCommision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OtherCommision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_SalesPurchaseDetails", x => x.StockSalPurchDetailId);
                    table.ForeignKey(
                        name: "FK_Stock_SalesPurchaseDetails_Stock_SalesPurchase",
                        column: x => x.StockSalPurchId,
                        principalTable: "Stock_SalesPurchase",
                        principalColumn: "StockSalPurchId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_Stocks",
                columns: table => new
                {
                    StockId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Symbol = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SymbolAr = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    SharePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StockMarketId = table.Column<int>(type: "int", nullable: true),
                    StockSectorsId = table.Column<int>(type: "int", nullable: true),
                    StockCatId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    FinancialEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Listed = table.Column<bool>(type: "bit", nullable: true),
                    StockPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ZakatOnInvest = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IslamicCompatibility = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DocType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Phone1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Phone2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    WebSite = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LastMemberDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    NextMemberDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstablishDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    MarketListDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PaidCapital = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StockNameValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    StockIssuesNo = table.Column<int>(type: "int", nullable: true),
                    StockCurrentNo = table.Column<int>(type: "int", nullable: true),
                    StockTreasuryNo = table.Column<int>(type: "int", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_Stocks", x => x.StockId);
                    table.ForeignKey(
                        name: "FK_Stock_Stocks_Stock_Categories",
                        column: x => x.StockCatId,
                        principalTable: "Stock_Categories",
                        principalColumn: "StockCatId");
                    table.ForeignKey(
                        name: "FK_Stock_Stocks_Stock_Markets",
                        column: x => x.StockMarketId,
                        principalTable: "Stock_Markets",
                        principalColumn: "StockMarketId");
                    table.ForeignKey(
                        name: "FK_Stock_Stocks_Stock_Sectors",
                        column: x => x.StockSectorsId,
                        principalTable: "Stock_Sectors",
                        principalColumn: "StockSectorsId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_TransferDetail",
                columns: table => new
                {
                    StockTransferDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockTransferId = table.Column<int>(type: "int", nullable: false),
                    StockTranTypId = table.Column<int>(type: "int", nullable: true),
                    StockId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: true),
                    CostAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitLoss = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_TransferDetail", x => x.StockTransferDetailId);
                    table.ForeignKey(
                        name: "FK_Stock_TransferDetail_Stock_Transfer",
                        column: x => x.StockTransferId,
                        principalTable: "Stock_Transfer",
                        principalColumn: "StockTransferId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_AccountChart",
                columns: table => new
                {
                    AccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountCode = table.Column<long>(type: "bigint", nullable: true),
                    AccountNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    mainAccountId = table.Column<int>(type: "int", nullable: true),
                    AccountLevel = table.Column<int>(type: "int", nullable: true),
                    AccountType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountNature = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountGroup = table.Column<byte>(type: "tinyint", nullable: true),
                    AccCashFlow = table.Column<byte>(type: "tinyint", nullable: true),
                    CalcMethod = table.Column<bool>(type: "bit", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Aid = table.Column<int>(type: "int", nullable: true),
                    AccBulkAccount = table.Column<int>(type: "int", nullable: true),
                    AccountCategory = table.Column<int>(type: "int", nullable: true),
                    CostCentersDistribute = table.Column<bool>(type: "bit", nullable: true),
                    CurrencyReevaluation = table.Column<bool>(type: "bit", nullable: true),
                    AccountStopped = table.Column<bool>(type: "bit", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccApproxim = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CostCenterOption = table.Column<byte>(type: "tinyint", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_AccountChart", x => x.AccountId);
                    table.ForeignKey(
                        name: "FK_Cal_AccountChart_Sys_AnalyticalCodes",
                        column: x => x.Aid,
                        principalTable: "Sys_AnalyticalCodes",
                        principalColumn: "AId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_AccountCategories",
                columns: table => new
                {
                    AccountCatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ParentAccountCatId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<long>(type: "bigint", nullable: true),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountCatType = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_AccountCategories", x => x.AccountCatId);
                    table.ForeignKey(
                        name: "FK_Cod_AccountCategories_Sys_AnalyticalCodes",
                        column: x => x.AId,
                        principalTable: "Sys_AnalyticalCodes",
                        principalColumn: "AId");
                });

            migrationBuilder.CreateTable(
                name: "sys_AnalyticalCodeProccess",
                columns: table => new
                {
                    ANProcessId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks5 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks6 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks7 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks8 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks9 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    Remarks10 = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sys_AnalyticalCodeProccess", x => x.ANProcessId);
                    table.ForeignKey(
                        name: "FK_sys_AnalyticalCodeProccess_Sys_AnalyticalCodes",
                        column: x => x.AId,
                        principalTable: "Sys_AnalyticalCodes",
                        principalColumn: "AId");
                });

            migrationBuilder.CreateTable(
                name: "sys_AnalyticalCodeUpdates",
                columns: table => new
                {
                    ANUpdateId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AnUpdateTypeId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    ValidityDays = table.Column<int>(type: "int", nullable: true),
                    Shipper = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    PortOfLoading = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    PortOfDischarge = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Commodity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Equipment = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Volume = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TargetRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Recommendation = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TruckingFrom = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TruckingTo = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_sys_AnalyticalCodeUpdates", x => x.ANUpdateId);
                    table.ForeignKey(
                        name: "FK_sys_AnalyticalCodeUpdates_Sys_AnalyticalCodes",
                        column: x => x.AId,
                        principalTable: "Sys_AnalyticalCodes",
                        principalColumn: "AId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_Country",
                columns: table => new
                {
                    CountryId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    NameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    NameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CountryCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_BIN"),
                    Lat = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    Lng = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    MinZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    MaxZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CurrentZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Country", x => x.CountryId);
                    table.ForeignKey(
                        name: "FK_Cod_Country_Sys_Countries",
                        column: x => x.CountryCode,
                        principalTable: "Sys_Countries",
                        principalColumn: "CountryCode");
                });

            migrationBuilder.CreateTable(
                name: "Sys_FinancialIntervals",
                columns: table => new
                {
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialIntervalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    MonthNameA = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    MonthNameE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StartingFrom = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StartingFromHijri = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    EndingDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EndToHijri = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsInUse = table.Column<bool>(type: "bit", nullable: true),
                    StopReason = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    StoppedByUserId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinancialYearId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_FinancialIntervals", x => x.FinancialIntervalsId);
                    table.ForeignKey(
                        name: "FK_Sys_FinancialIntervals_Sys_FinancialYears",
                        column: x => x.FinancialYearId,
                        principalTable: "Sys_FinancialYears",
                        principalColumn: "FinancialYearsId");
                });

            migrationBuilder.CreateTable(
                name: "SysRemoteBranchesLogDetaile",
                columns: table => new
                {
                    LogDetailId = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogId = table.Column<long>(type: "bigint", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LogType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 insert,2 update,3 delete,4 print, preview"),
                    FieldOldValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FieldNewValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SysRemoteBranchesLogDetaile", x => x.LogDetailId);
                    table.ForeignKey(
                        name: "FK_SysRemoteBranchesLogDetaile_Sys_RemotBranchesLog",
                        column: x => x.LogId,
                        principalTable: "Sys_RemotBranchesLog",
                        principalColumn: "LogId");
                });

            migrationBuilder.CreateTable(
                name: "Sys_RemotLogDetail",
                columns: table => new
                {
                    LogDetailId = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LogId = table.Column<long>(type: "bigint", nullable: true),
                    FieldName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    LogType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 insert,2 update,3 delete,4 print, preview"),
                    FieldOldValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    FieldNewValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sys_RemotLogDetail", x => x.LogDetailId);
                    table.ForeignKey(
                        name: "FK_Sys_RemotLogDetail_Sys_RemotTranLog",
                        column: x => x.LogId,
                        principalTable: "Sys_RemotTranLog",
                        principalColumn: "LogId");
                });

            migrationBuilder.CreateTable(
                name: "Tr_OpenningBalanceDetails",
                columns: table => new
                {
                    OpeningBalanceDetailsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tr_OpenningBalanceId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    LineNumber = table.Column<int>(type: "int", nullable: true),
                    Creditor = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Debitor = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tr_OpenningBalanceDetails", x => x.OpeningBalanceDetailsId);
                    table.ForeignKey(
                        name: "FK_Tr_OpenningBalanceDetails_Tr_OpenningBalance",
                        column: x => x.Tr_OpenningBalanceId,
                        principalTable: "Tr_OpenningBalance",
                        principalColumn: "Tr_OpenningBalanceId");
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_BloodExecludeDetails",
                columns: table => new
                {
                    ExecludPassId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BloodExecludId = table.Column<int>(type: "int", nullable: true),
                    WFPassPortId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Succeeded = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_BloodExecludeDetails", x => x.ExecludPassId);
                    table.ForeignKey(
                        name: "FK_WorkForc_BloodExecludeDetails_WorkForc_BloodExeclude",
                        column: x => x.BloodExecludId,
                        principalTable: "WorkForc_BloodExeclude",
                        principalColumn: "BloodExecludId");
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_FirstCustExecludeDetail",
                columns: table => new
                {
                    ExecludPassId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExecludId = table.Column<int>(type: "int", nullable: true),
                    WFPassPortId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_FirstCustExecludeDetail", x => x.ExecludPassId);
                    table.ForeignKey(
                        name: "FK_WorkForc_FirstCustExecludeDetail_WorkForc_FirstCustExeclude",
                        column: x => x.ExecludId,
                        principalTable: "WorkForc_FirstCustExeclude",
                        principalColumn: "ExecludId");
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_SecondCustExecludeDetail",
                columns: table => new
                {
                    ExecludPassId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ScndExecludId = table.Column<int>(type: "int", nullable: true),
                    WFPassPortId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_SecondCustExecludeDetail", x => x.ExecludPassId);
                    table.ForeignKey(
                        name: "FK_WorkForc_SecondCustExecludeDetail_WorkForc_SecondCustExeclude",
                        column: x => x.ScndExecludId,
                        principalTable: "WorkForc_SecondCustExeclude",
                        principalColumn: "ScndExecludId");
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_TemplatesDetails",
                columns: table => new
                {
                    WFTempDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WFTempId = table.Column<int>(type: "int", nullable: false),
                    WFPassPortId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_TemplatesDetails", x => x.WFTempDetailId);
                    table.ForeignKey(
                        name: "FK_WorkForc_TemplatesDetails_WorkForc_Templates",
                        column: x => x.WFTempId,
                        principalTable: "WorkForc_Templates",
                        principalColumn: "WFTempId");
                });

            migrationBuilder.CreateTable(
                name: "WorkForc_TestResultsDetails",
                columns: table => new
                {
                    TestResultDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TestResultId = table.Column<int>(type: "int", nullable: true),
                    WFtempId = table.Column<int>(type: "int", nullable: true),
                    WFPassPortId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Succeeded = table.Column<bool>(type: "bit", nullable: true),
                    Grad = table.Column<decimal>(type: "numeric(18,5)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkForc_TestResultsDetails", x => x.TestResultDetailId);
                    table.ForeignKey(
                        name: "FK_WorkForc_TestResultsDetails_WorkForc_TestResults",
                        column: x => x.TestResultId,
                        principalTable: "WorkForc_TestResults",
                        principalColumn: "TestResultId");
                });

            migrationBuilder.CreateTable(
                name: "Asset_AssetContacts",
                columns: table => new
                {
                    AssetContactId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    AccountId1 = table.Column<int>(type: "int", nullable: true),
                    AccountId2 = table.Column<int>(type: "int", nullable: true),
                    AccountId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    ContactCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    ContactName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactPhone1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone3 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone4 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone5 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IDNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Bank2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Remark1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remark2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Isprimary = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Asset_AssetContacts", x => x.AssetContactId);
                    table.ForeignKey(
                        name: "FK_Asset_AssetContacts_Asset_AssetCard",
                        column: x => x.AssetId,
                        principalTable: "Asset_AssetCard",
                        principalColumn: "AssetId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_AssetAccounts",
                columns: table => new
                {
                    AssetAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AssetId = table.Column<int>(type: "int", nullable: true),
                    AccountCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountStopped = table.Column<bool>(type: "bit", nullable: true),
                    AccountModel = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "discount, tax, master ...etc", collation: "Arabic_CI_AI"),
                    RemarksA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    IsPrimeAccount = table.Column<bool>(type: "bit", nullable: true),
                    IsInUse = table.Column<bool>(type: "bit", nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_AssetAccounts", x => x.AssetAccountId);
                    table.ForeignKey(
                        name: "FK_Cal_AssetAccounts_Asset_AssetCard",
                        column: x => x.AssetId,
                        principalTable: "Asset_AssetCard",
                        principalColumn: "AssetId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_LeadsMembersJoin",
                columns: table => new
                {
                    LeadMemberJoin = table.Column<int>(type: "int", nullable: false),
                    LeadMemberId = table.Column<int>(type: "int", nullable: true),
                    LeadId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_LeadsMembersJoin", x => x.LeadMemberJoin);
                    table.ForeignKey(
                        name: "FK_CRM_LeadsMembersJoin_CRM_Leads",
                        column: x => x.LeadId,
                        principalTable: "CRM_Leads",
                        principalColumn: "LeadId");
                    table.ForeignKey(
                        name: "FK_CRM_LeadsMembersJoin_CRM_LeadsMembers",
                        column: x => x.LeadMemberId,
                        principalTable: "CRM_LeadsMembers",
                        principalColumn: "LeadMemberId");
                });

            migrationBuilder.CreateTable(
                name: "CRM_VisitSurveys",
                columns: table => new
                {
                    VisitSurveyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VisitId = table.Column<int>(type: "int", nullable: true),
                    SurveyId = table.Column<int>(type: "int", nullable: true),
                    Answer1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Answer2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Answer3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Answer4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AnswerYorN = table.Column<bool>(type: "bit", nullable: true),
                    FilePath = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRM_VisitSurveys", x => x.VisitSurveyId);
                    table.ForeignKey(
                        name: "FK_CRM_VisitSurveys_CRM_Visits",
                        column: x => x.VisitId,
                        principalTable: "CRM_Visits",
                        principalColumn: "VisitId");
                });

            migrationBuilder.CreateTable(
                name: "G_USER_MODULE",
                columns: table => new
                {
                    UserModuleId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ModuleCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Arabic_CI_AI"),
                    ModuleDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    CanOpen = table.Column<bool>(type: "bit", nullable: false),
                    CanCreate = table.Column<bool>(type: "bit", nullable: false),
                    CanEdit = table.Column<bool>(type: "bit", nullable: false),
                    CanDelete = table.Column<bool>(type: "bit", nullable: false),
                    CanPrint = table.Column<bool>(type: "bit", nullable: false),
                    CanPreView = table.Column<bool>(type: "bit", nullable: false),
                    CanPost = table.Column<bool>(type: "bit", nullable: false),
                    PrintCopies = table.Column<byte>(type: "tinyint", nullable: true),
                    PrintWithSave = table.Column<bool>(type: "bit", nullable: true),
                    DefaultReport = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    CUSTOM1 = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_G_USER_MODULE", x => x.UserModuleId);
                    table.ForeignKey(
                        name: "FK_G_USER_MODULE_G_Users",
                        column: x => x.UserId,
                        principalTable: "G_Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Ms_BoxUsers",
                columns: table => new
                {
                    BoxUsersId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_BoxUsers", x => x.BoxUsersId);
                    table.ForeignKey(
                        name: "FK_Ms_BoxUsers_G_Users",
                        column: x => x.UserId,
                        principalTable: "G_Users",
                        principalColumn: "UserId");
                    table.ForeignKey(
                        name: "FK_Ms_BoxUsers_MS_BoxBank",
                        column: x => x.BoxId,
                        principalTable: "MS_BoxBank",
                        principalColumn: "BoxId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_ActivityDetailElements",
                columns: table => new
                {
                    ActivityElementId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpActivityDetailId = table.Column<int>(type: "int", nullable: true),
                    EmpActivityId = table.Column<int>(type: "int", nullable: true),
                    PeriodTableId = table.Column<int>(type: "int", nullable: true),
                    PeriodTablDetailId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AttendElementId = table.Column<int>(type: "int", nullable: true),
                    EmpElementId = table.Column<int>(type: "int", nullable: true),
                    TimeUnit = table.Column<byte>(type: "tinyint", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TextValu = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_ActivityDetailElements", x => x.ActivityElementId);
                    table.ForeignKey(
                        name: "FK_Hr_ActivityDetailElements_Hr_EmpActivityDetail",
                        column: x => x.EmpActivityDetailId,
                        principalTable: "Hr_EmpActivityDetail",
                        principalColumn: "EmpActivityDetailId");
                });

            migrationBuilder.CreateTable(
                name: "Hr_EmpSalaryTypes",
                columns: table => new
                {
                    EmpSalaryTypesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    SalaryTypId = table.Column<int>(type: "int", nullable: true),
                    SalaryValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitAccId = table.Column<int>(type: "int", nullable: true),
                    CreditAccId = table.Column<int>(type: "int", nullable: true),
                    DebitCostCenterId = table.Column<int>(type: "int", nullable: true),
                    CreditCostCenterId = table.Column<int>(type: "int", nullable: true),
                    DebitEmpAccountId = table.Column<int>(type: "int", nullable: true),
                    CreditEmpAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_EmpSalaryTypes", x => x.EmpSalaryTypesId);
                    table.ForeignKey(
                        name: "FK_Hr_EmpSalaryTypes_Hr_Employees",
                        column: x => x.EmpId,
                        principalTable: "Hr_Employees",
                        principalColumn: "EmpId");
                    table.ForeignKey(
                        name: "FK_Hr_EmpSalaryTypes_Hr_SalaryTypes",
                        column: x => x.SalaryTypId,
                        principalTable: "Hr_SalaryTypes",
                        principalColumn: "SalaryTypId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CheqBooks",
                columns: table => new
                {
                    CheqBookId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CheqBookCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CheqBookNamAR = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CheqBookNamEN = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    StartAt = table.Column<int>(type: "int", nullable: true),
                    CheqNum = table.Column<int>(type: "int", nullable: true),
                    CurrentNum = table.Column<int>(type: "int", nullable: true),
                    Active = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpDefaultBook = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_Books", x => x.CheqBookId);
                    table.ForeignKey(
                        name: "FK_Ms_Books_Hr_Employees",
                        column: x => x.EmpId,
                        principalTable: "Hr_Employees",
                        principalColumn: "EmpId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_EmpServicTypes",
                columns: table => new
                {
                    SR_ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    SrTypID = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_EmpServicTypes", x => x.SR_ID);
                    table.ForeignKey(
                        name: "FK_Sr_EmpServicTypes_Hr_Employees",
                        column: x => x.EmpId,
                        principalTable: "Hr_Employees",
                        principalColumn: "EmpId");
                    table.ForeignKey(
                        name: "FK_Sr_EmpServicTypes_Sr_ServiceTypes",
                        column: x => x.SrTypID,
                        principalTable: "Sr_ServiceTypes",
                        principalColumn: "SrTypID");
                });

            migrationBuilder.CreateTable(
                name: "Cal_JurnalEntry",
                columns: table => new
                {
                    JurnalId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StorId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    AdjustId = table.Column<int>(type: "int", nullable: true),
                    BoxTranId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    TranId = table.Column<int>(type: "int", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    StockAdjustId = table.Column<int>(type: "int", nullable: true),
                    Tr_OpenningBalanceId = table.Column<int>(type: "int", nullable: true),
                    KeeperId = table.Column<int>(type: "int", nullable: true),
                    BankNoticId = table.Column<int>(type: "int", nullable: true),
                    PettycashId = table.Column<int>(type: "int", nullable: true),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    SalesOfferId = table.Column<int>(type: "int", nullable: true),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    SalaryIssuDocId = table.Column<int>(type: "int", nullable: true),
                    DeprDocId = table.Column<int>(type: "int", nullable: true),
                    AssetTerminatId = table.Column<int>(type: "int", nullable: true),
                    AssetAddId = table.Column<int>(type: "int", nullable: true),
                    AssetDeductId = table.Column<int>(type: "int", nullable: true),
                    DeliverAssetId = table.Column<int>(type: "int", nullable: true),
                    FixAssetId = table.Column<int>(type: "int", nullable: true),
                    AssetMovId = table.Column<int>(type: "int", nullable: true),
                    ReceiveAssetId = table.Column<int>(type: "int", nullable: true),
                    JOrderEmpDocId = table.Column<int>(type: "int", nullable: true),
                    JOrderEquipDocId = table.Column<int>(type: "int", nullable: true),
                    JOrderClosId = table.Column<int>(type: "int", nullable: true),
                    LetOfGrnteeTranId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    TranReqId = table.Column<int>(type: "int", nullable: true),
                    Aid = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    JurnalDesc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    TotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsOpenning = table.Column<bool>(type: "bit", nullable: true),
                    IsManual = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DifferenceInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ResourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    VehiclMovId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    TenderContractId = table.Column<int>(type: "int", nullable: true),
                    ContractorContractId = table.Column<int>(type: "int", nullable: true),
                    ContractorExitractId = table.Column<int>(type: "int", nullable: true),
                    OwnerExitractId = table.Column<int>(type: "int", nullable: true),
                    ExecutExitractId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_JurnalEntry", x => x.JurnalId);
                    table.ForeignKey(
                        name: "FK_Cal_JurnalEntry_MS_Stores",
                        column: x => x.StorId,
                        principalTable: "MS_Stores",
                        principalColumn: "StoreId");
                    table.ForeignKey(
                        name: "FK_Cal_JurnalEntry_Sys_AnalyticalCodes",
                        column: x => x.Aid,
                        principalTable: "Sys_AnalyticalCodes",
                        principalColumn: "AId");
                });

            migrationBuilder.CreateTable(
                name: "MS_Partition",
                columns: table => new
                {
                    StorePartId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    PartCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    PartDescE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    StoreKeeper = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Address = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    strCustm2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm6 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    X = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Y = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Z = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    SharedPartition = table.Column<bool>(type: "bit", nullable: true),
                    Space = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Size = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnimalCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsAnimalStore = table.Column<bool>(type: "bit", nullable: true),
                    PartAccountId = table.Column<int>(type: "int", nullable: true),
                    InBookId = table.Column<int>(type: "int", nullable: true),
                    OutBookId = table.Column<int>(type: "int", nullable: true),
                    InTermId = table.Column<int>(type: "int", nullable: true),
                    OutTermId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_Partition", x => x.StorePartId);
                    table.ForeignKey(
                        name: "FK_MS_Partition_MS_Stores",
                        column: x => x.StoreId,
                        principalTable: "MS_Stores",
                        principalColumn: "StoreId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_BusinessPartnerAccounts",
                columns: table => new
                {
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BSPartnerId = table.Column<int>(type: "int", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableEntityId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AccountCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountStopped = table.Column<bool>(type: "bit", nullable: true),
                    AccountModel = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "discount, tax, master ...etc", collation: "Arabic_CI_AI"),
                    RemarksA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    IsPrimeAccount = table.Column<bool>(type: "bit", nullable: true),
                    IsInUse = table.Column<bool>(type: "bit", nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TaxRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    EtaxCustType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, comment: "Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_BusinessPartnerAccounts", x => x.BusinessPartnerAccId);
                    table.ForeignKey(
                        name: "FK_Cal_BusinessPartnerAccounts_Ms_BusinessPartners",
                        column: x => x.BSPartnerId,
                        principalTable: "Ms_BusinessPartners",
                        principalColumn: "BSPartnerId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_CustAccounts",
                columns: table => new
                {
                    CustAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    AccountCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountStopped = table.Column<bool>(type: "bit", nullable: true),
                    AccountModel = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    IsPrimeAccount = table.Column<bool>(type: "bit", nullable: true),
                    IsInUse = table.Column<bool>(type: "bit", nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_CustAccounts", x => x.CustAccountId);
                    table.ForeignKey(
                        name: "FK_Cal_CustAccounts_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "La_Lands",
                columns: table => new
                {
                    LandId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    LandMainNo = table.Column<int>(type: "int", nullable: true),
                    LandInternalNo = table.Column<int>(type: "int", nullable: true),
                    StreetNo = table.Column<int>(type: "int", nullable: true),
                    LandSize = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    IsResidential = table.Column<bool>(type: "bit", nullable: true),
                    RightLeft = table.Column<bool>(type: "bit", nullable: true),
                    BasicMemeber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_La_Lands", x => x.LandId);
                    table.ForeignKey(
                        name: "FK_La_Lands_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "La_PropSerial",
                columns: table => new
                {
                    PropId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustMain = table.Column<int>(type: "int", nullable: true),
                    CustProp = table.Column<int>(type: "int", nullable: true),
                    LandId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_La_PropSerial", x => x.PropId);
                    table.ForeignKey(
                        name: "FK_La_PropSerial_MS_Customer",
                        column: x => x.CustMain,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CusromerUsers",
                columns: table => new
                {
                    CustUserId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CusromerUsers", x => x.CustUserId);
                    table.ForeignKey(
                        name: "FK_Ms_CusromerUsers_G_Users",
                        column: x => x.UserId,
                        principalTable: "G_Users",
                        principalColumn: "UserId");
                    table.ForeignKey(
                        name: "FK_Ms_CusromerUsers_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CustImgs",
                columns: table => new
                {
                    CustImgId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    ImgDesc1 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ImgDesc2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustImgs", x => x.CustImgId);
                    table.ForeignKey(
                        name: "FK_Ms_CustImgs_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CustomerBranches",
                columns: table => new
                {
                    CustBranchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    CustBranchCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CustBranchName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CustBranchName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    Address = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CustomerBranches", x => x.CustBranchId);
                    table.ForeignKey(
                        name: "FK_Ms_CustomerBranches_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CustomerContacts",
                columns: table => new
                {
                    CustContactId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    AccountId1 = table.Column<int>(type: "int", nullable: true),
                    AccountId2 = table.Column<int>(type: "int", nullable: true),
                    AccountId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    ContactCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    ContactName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactPhone1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone3 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone4 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone5 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IDNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Bank2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Remark1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remark2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Isprimary = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CustomerContacts", x => x.CustContactId);
                    table.ForeignKey(
                        name: "FK_Ms_CustomerContacts_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_CustomersFollowUp",
                columns: table => new
                {
                    FollowUpUpdateId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    FollowUpTypeId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ValidityDays = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(2000)", maxLength: 2000, nullable: true),
                    AddField1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField8 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField9 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AddField10 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_CustomersFollowUp", x => x.FollowUpUpdateId);
                    table.ForeignKey(
                        name: "FK_Ms_CustomersFollowUp_MS_Customer",
                        column: x => x.CustomerId,
                        principalTable: "MS_Customer",
                        principalColumn: "CustomerId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemAlternatives",
                columns: table => new
                {
                    AlterId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    AlterItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemAlternatives", x => x.AlterId);
                    table.ForeignKey(
                        name: "FK_MS_ItemAlternatives_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemCardDefaulPartitions",
                columns: table => new
                {
                    ItemStorePrtId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemCardDefaulPartitions", x => x.ItemStorePrtId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemCardDefaulPartitions_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemCardOffers",
                columns: table => new
                {
                    OfferItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    BasicQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    GiftItemCardId = table.Column<int>(type: "int", nullable: true),
                    GiftUnitId = table.Column<int>(type: "int", nullable: true),
                    GiftQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsGiftDiscount = table.Column<bool>(type: "bit", nullable: true),
                    GiftDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDiscountPercent = table.Column<bool>(type: "bit", nullable: true),
                    PriceAfterDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsReplace = table.Column<bool>(type: "bit", nullable: true),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemCardOffers", x => x.OfferItemId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemCardOffers_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemCollection",
                columns: table => new
                {
                    ItemCollectId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    SubItemId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsNotBasic = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemCollection", x => x.ItemCollectId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemCollection_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemImages",
                columns: table => new
                {
                    ImgId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    ImgDesc1 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ImgDesc2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ImgPath = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemImages", x => x.ImgId);
                    table.ForeignKey(
                        name: "FK_MS_ItemImages_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemStartQty",
                columns: table => new
                {
                    StartQtyId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    QtyPartiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QtyInNotebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemStartQty", x => x.StartQtyId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemStartQty_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemStockAdjustmentDetail",
                columns: table => new
                {
                    StockAdjustItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockAdjustId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    NewQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateNew = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    OldQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateOld = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiffQuantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DiffQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostOld = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostOldUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostOld = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostOldUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageOld = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageOldUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemStockAdjustmentDetail", x => x.StockAdjustItemId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemStockAdjustmentDetail_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Ms_ItemStockAdjustmentDetail_Ms_ItemStockAdjustment",
                        column: x => x.StockAdjustId,
                        principalTable: "Ms_ItemStockAdjustment",
                        principalColumn: "StockAdjustId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemUnit",
                columns: table => new
                {
                    UnitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    BasUnitId = table.Column<int>(type: "int", nullable: true),
                    UnittRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    UnitNam = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    UnitNameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Symbol = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: true),
                    BarCode1 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode2 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode3 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode4 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode5 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode6 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode7 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode8 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode9 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode10 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode11 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode12 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode13 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode14 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    BarCode15 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true, collation: "Arabic_CI_AI"),
                    DefaultBarCode = table.Column<byte>(type: "tinyint", nullable: true),
                    ManualPurchasePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BeforLastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastSalePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostManual = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDefaultSale = table.Column<bool>(type: "bit", nullable: true),
                    IsDefaultPurchas = table.Column<bool>(type: "bit", nullable: true),
                    IsBasicUnit = table.Column<bool>(type: "bit", nullable: true),
                    IsNotRegular = table.Column<bool>(type: "bit", nullable: true),
                    Price1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeastSalesPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LeastProfitMargin = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Wheight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    X = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Y = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Z = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EtaxUnitCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    IsKarat = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    PurchDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CannotDevide = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemUnit", x => x.UnitId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemUnit_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Ms_ItemUnit_Prod_BasicUnits",
                        column: x => x.BasUnitId,
                        principalTable: "Prod_BasicUnits",
                        principalColumn: "BasUnitId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchOrderDetail",
                columns: table => new
                {
                    OrderDetailItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    QtyExecuted = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyExecutedBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceIncludTaxInPurch = table.Column<bool>(type: "bit", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchOrderDetail", x => x.OrderDetailItemCardId);
                    table.ForeignKey(
                        name: "FK_MS_PurchOrderDetail_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_PurchOrderDetail_Ms_PurchasOrder",
                        column: x => x.PurOrderId,
                        principalTable: "Ms_PurchasOrder",
                        principalColumn: "PurOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesOfferItemCard",
                columns: table => new
                {
                    SalesOffertemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesOfferId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecuteQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecuteQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesDepId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Table_1", x => x.SalesOffertemCardId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesOfferItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Ms_SalesOfferItemCard_Ms_SalesOffer",
                        column: x => x.SalesOfferId,
                        principalTable: "Ms_SalesOffer",
                        principalColumn: "SalesOfferId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_ItemAttributsJoin",
                columns: table => new
                {
                    ProdItemAtrribId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    AttributId = table.Column<int>(type: "int", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    IsMandatory = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemAttributs", x => x.ProdItemAtrribId);
                    table.ForeignKey(
                        name: "FK_Prod_ItemAttributsJoin_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Prod_ItemAttributsJoin_Prod_ItemAttributes",
                        column: x => x.AttributId,
                        principalTable: "Prod_ItemAttributes",
                        principalColumn: "AttributId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_ItemcardExpenses",
                columns: table => new
                {
                    ProdExpensId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    IsPercent = table.Column<bool>(type: "bit", nullable: true),
                    PercentOf = table.Column<byte>(type: "tinyint", nullable: true),
                    ExpenseValu = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_ItemcardExpenses", x => x.ProdExpensId);
                    table.ForeignKey(
                        name: "FK_Prod_ItemcardExpenses_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderProducts",
                columns: table => new
                {
                    jobProductId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemPatchPartitionId = table.Column<int>(type: "int", nullable: true),
                    ItemPartId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    DescriptionId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitIdEstimat = table.Column<int>(type: "int", nullable: true),
                    UnitRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRateEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceEstimat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchLength = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchWidth = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchHieght = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDelivered = table.Column<bool>(type: "bit", nullable: true),
                    IsProduced = table.Column<bool>(type: "bit", nullable: true),
                    ItemCostInPrcent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpensesCostInPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpensesCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JobsCostInPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JobsCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MachineCostInPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MachineCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapCostInPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScrapCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Duration = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AnWeightRateId = table.Column<int>(type: "int", nullable: true),
                    AnWeightRateDetailId = table.Column<int>(type: "int", nullable: true),
                    QtyBefore = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyAfter = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderProducts", x => x.jobProductId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderProducts_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderProducts_Prod_ItemAttributesBatche",
                        column: x => x.ItemAtrribBatchId,
                        principalTable: "Prod_ItemAttributesBatche",
                        principalColumn: "ItemAtrribBatchId");
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderProducts_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleItemCard",
                columns: table => new
                {
                    VehclItemPart = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCardIdIsVehicl = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleItemCard", x => x.VehclItemPart);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ReceiptNote",
                columns: table => new
                {
                    RectId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    RetPurId = table.Column<int>(type: "int", nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CollectorId = table.Column<int>(type: "int", nullable: true),
                    KeeperId = table.Column<int>(type: "int", nullable: true),
                    ChequeOpenId = table.Column<int>(type: "int", nullable: true),
                    BankNoticId = table.Column<int>(type: "int", nullable: true),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    InstallDates = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TranType = table.Column<byte>(type: "tinyint", nullable: true),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    OtherSource = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Commision = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value1BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value2BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value3BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value4BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value5BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value6BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value7BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value8BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value9BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value10BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Equation = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true)
                        .Annotation("SqlServer:Sparse", true),
                    CheckNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    BankAccNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PaidDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CheckType = table.Column<byte>(type: "tinyint", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ClientAccNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ClientBankId = table.Column<int>(type: "int", nullable: true),
                    strCustm1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    strCustm2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CheqBookId = table.Column<int>(type: "int", nullable: true),
                    NoteNum = table.Column<int>(type: "int", nullable: true),
                    IsKembiala = table.Column<bool>(type: "bit", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    ReturnDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ChequOwnerId = table.Column<bool>(type: "bit", nullable: true),
                    OwnerTranId = table.Column<int>(type: "int", nullable: true),
                    ChequeTran = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DifferenceInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ResourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainCustServerId = table.Column<int>(type: "int", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ReceiptNote", x => x.RectId);
                    table.ForeignKey(
                        name: "FK_Ms_ReceiptNote_MS_BoxBank",
                        column: x => x.BoxId,
                        principalTable: "MS_BoxBank",
                        principalColumn: "BoxId");
                    table.ForeignKey(
                        name: "FK_Ms_ReceiptNote_MS_ReturnPurchase",
                        column: x => x.RetPurId,
                        principalTable: "MS_ReturnPurchase",
                        principalColumn: "RetPurchId");
                    table.ForeignKey(
                        name: "FK_Ms_ReceiptNote_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvJobOrderJoin",
                columns: table => new
                {
                    SalesInvJobOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvJobOrderJoin", x => x.SalesInvJobOrderId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvJobOrderJoin_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvJobOrderJoin_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceCostDeliver",
                columns: table => new
                {
                    SaleNoCostDelId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoiceCostDeliver", x => x.SaleNoCostDelId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceCostDeliver_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceCurrencies",
                columns: table => new
                {
                    InvCurId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Count = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoiceCurrencies", x => x.InvCurId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceCurrencies_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceExpenses",
                columns: table => new
                {
                    SalesInvExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoiceExpenses", x => x.SalesInvExpenseId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceExpenses_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceMultiAccounts",
                columns: table => new
                {
                    SalesMultiAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    RectSourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoiceMultiAccounts", x => x.SalesMultiAccountId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceMultiAccounts_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceQualityDeliveryDocs",
                columns: table => new
                {
                    QualitySaleDelId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDeliverId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoiceQualityDeliveryDocs", x => x.QualitySaleDelId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceQualityDeliveryDocs_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceQualityMissedItems",
                columns: table => new
                {
                    QualitySaleDelMissedId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDeliverId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    EmpId = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvoiceQualityMissedItems", x => x.QualitySaleDelMissedId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceQualityMissedItems_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleRentSalesInvJoin",
                columns: table => new
                {
                    RentSaleJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VRentContractId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleRentSalesInvJoin", x => x.RentSaleJoinId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentSalesInvJoin_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentSalesInvJoin_Sr_VehicleRenalContract",
                        column: x => x.VRentContractId,
                        principalTable: "Sr_VehicleRenalContract",
                        principalColumn: "VRentContractId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PaymentNote",
                columns: table => new
                {
                    PayId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    BoxId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustodyEmpId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    ChequeOpenId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    BankNoticId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    DBTableId = table.Column<int>(type: "int", nullable: true),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: false),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TranType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0  Cash ; 1  Check"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true, comment: " 1  Customer ; 2 vendor ; 3  Other"),
                    OtherSource = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value1BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value2BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value3BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value4BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value5BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value6BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value7BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value8BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value9BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value10BeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Equation = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true)
                        .Annotation("SqlServer:Sparse", true),
                    CheckNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "Arabic_CI_AI"),
                    BankAccNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    PaidDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CheckType = table.Column<byte>(type: "tinyint", nullable: true, comment: "0 Paid ; 1 Back ; 2  Transfer;"),
                    strCustm1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    strCustm2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AddField3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField6 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AddField7 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsPrinted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    LastUpdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    IsPettyCash = table.Column<bool>(type: "bit", nullable: true),
                    CheqBookId = table.Column<int>(type: "int", nullable: true),
                    NoteNum = table.Column<int>(type: "int", nullable: true),
                    IsKembiala = table.Column<bool>(type: "bit", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DifferenceInvoices = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ResourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidDocId = table.Column<int>(type: "int", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalItems = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsRemoteEntity = table.Column<bool>(type: "bit", nullable: true),
                    RemotId = table.Column<int>(type: "int", nullable: true),
                    MainVendServerId = table.Column<int>(type: "int", nullable: true),
                    PayMethodId = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId2 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    PayMethodId3 = table.Column<int>(type: "int", nullable: true),
                    PayMethodPercent3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PayMethodDatafield3 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PaymentNote", x => x.PayId);
                    table.ForeignKey(
                        name: "FK_MS_PaymentNote_MS_BoxBank",
                        column: x => x.BoxId,
                        principalTable: "MS_BoxBank",
                        principalColumn: "BoxId");
                    table.ForeignKey(
                        name: "FK_MS_PaymentNote_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                    table.ForeignKey(
                        name: "FK_MS_PaymentNote_MS_ReturnSales",
                        column: x => x.RetSaleId,
                        principalTable: "MS_ReturnSales",
                        principalColumn: "RetSaleId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_PurchaseInvoiceCostReceived",
                columns: table => new
                {
                    PurNoCostStockId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PurchaseInvoiceCostReceived", x => x.PurNoCostStockId);
                    table.ForeignKey(
                        name: "FK_Ms_PurchaseInvoiceCostReceived_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchaseInvoiceExpenses",
                columns: table => new
                {
                    PurExpenseId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    ExpensesId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreditAccountId = table.Column<int>(type: "int", nullable: true),
                    IsAdvancedPay = table.Column<bool>(type: "bit", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    TaxCurrency1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxAfterRate1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsRefundableTax1 = table.Column<bool>(type: "bit", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    TaxCurrency2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxAfterRate2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsRefundableTax2 = table.Column<bool>(type: "bit", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    TaxCurrency3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxAfterRate3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsRefundableTax3 = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchaseInvoiceExpenses", x => x.PurExpenseId);
                    table.ForeignKey(
                        name: "FK_MS_PurchaseInvoiceExpenses_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchasInvoiceCurrencies",
                columns: table => new
                {
                    PurInvCurId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Count = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchasInvoiceCurrencies", x => x.PurInvCurId);
                    table.ForeignKey(
                        name: "FK_MS_PurchasInvoiceCurrencies_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchasInvoiceMultiAccounts",
                columns: table => new
                {
                    PurMultiAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    RectSourceBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchasInvoiceMultiAccounts", x => x.PurMultiAccountId);
                    table.ForeignKey(
                        name: "FK_MS_PurchasInvoiceMultiAccounts_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                });

            migrationBuilder.CreateTable(
                name: "Prod_JobOrderPurchaseInvoices",
                columns: table => new
                {
                    JobPurchasInvId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    NetPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Prod_JobOrderPurchaseInvoices", x => x.JobPurchasInvId);
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderPurchaseInvoices_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                    table.ForeignKey(
                        name: "FK_Prod_JobOrderPurchaseInvoices_Prod_JobOrder",
                        column: x => x.JobOrderId,
                        principalTable: "Prod_JobOrder",
                        principalColumn: "JobOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleRentPurchJoin",
                columns: table => new
                {
                    RentPurchJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VRentContractId = table.Column<int>(type: "int", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleRentPurchJoin", x => x.RentPurchJoinId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentPurchJoin_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentPurchJoin_Sr_VehicleRenalContract",
                        column: x => x.VRentContractId,
                        principalTable: "Sr_VehicleRenalContract",
                        principalColumn: "VRentContractId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_VendAccounts",
                columns: table => new
                {
                    VendAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    AccountCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountStopped = table.Column<bool>(type: "bit", nullable: true),
                    AccountModel = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "discount, tax, master ...etc", collation: "Arabic_CI_AI"),
                    RemarksA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    IsPrimeAccount = table.Column<bool>(type: "bit", nullable: true),
                    IsInUse = table.Column<bool>(type: "bit", nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_VendAccounts", x => x.VendAccountId);
                    table.ForeignKey(
                        name: "FK_Cal_VendAccounts_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemVendors",
                columns: table => new
                {
                    ItemVendorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity1 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price1 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity2 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price2 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity3 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price3 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity4 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price4 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity5 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price5 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity6 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price6 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity7 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price7 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity8 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price8 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity9 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price9 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Quantity10 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    Price10 = table.Column<string>(type: "nchar(10)", fixedLength: true, maxLength: 10, nullable: true),
                    IsBasicVendor = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemVendors", x => x.ItemVendorId);
                    table.ForeignKey(
                        name: "FK_MS_ItemVendors_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemVendors_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_VendImgs",
                columns: table => new
                {
                    VendImgId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    ImgDesc1 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    ImgDesc2 = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_VendImgs", x => x.VendImgId);
                    table.ForeignKey(
                        name: "FK_Ms_VendImgs_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_VendorBranches",
                columns: table => new
                {
                    VendBranchId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    VendBranchCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    VendBranchName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    VendBranchName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    Address = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_VendorBranches", x => x.VendBranchId);
                    table.ForeignKey(
                        name: "FK_Ms_VendorBranches_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_VendorContacts",
                columns: table => new
                {
                    VendContactId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    AccountId1 = table.Column<int>(type: "int", nullable: true),
                    AccountId2 = table.Column<int>(type: "int", nullable: true),
                    AccountId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    ContactCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CityId = table.Column<int>(type: "int", nullable: true),
                    ContactName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactName2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactPhone1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone3 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone4 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactPhone5 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: true),
                    ContactAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactAddress3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContactEmail3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IDNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Bank2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Bank3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    BankAccNo3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Remark1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remark2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Isprimary = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_VendorContacts", x => x.VendContactId);
                    table.ForeignKey(
                        name: "FK_Ms_VendorContacts_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_VendorUsers",
                columns: table => new
                {
                    VendUserId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_VendorUsers", x => x.VendUserId);
                    table.ForeignKey(
                        name: "FK_Ms_VendorUsers_G_Users",
                        column: x => x.UserId,
                        principalTable: "G_Users",
                        principalColumn: "UserId");
                    table.ForeignKey(
                        name: "FK_Ms_VendorUsers_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjectItemsVendors",
                columns: table => new
                {
                    ProjectItemsVendorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectItemsId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    VendorRate = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjectItemsVendors", x => x.ProjectItemsVendorId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjectItemsVendors_MS_Vendor",
                        column: x => x.VendorId,
                        principalTable: "MS_Vendor",
                        principalColumn: "VendorId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjectItemsVendors_Proj_ProjectItems",
                        column: x => x.ProjectItemsId,
                        principalTable: "Proj_ProjectItems",
                        principalColumn: "ProjectItemsId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Accomodation",
                columns: table => new
                {
                    AccomodationId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    HotelId = table.Column<int>(type: "int", nullable: true),
                    AccomodationType = table.Column<byte>(type: "tinyint", nullable: true, comment: "1 RO,2 BB,3 HB,4 FB"),
                    StartDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Accomodation", x => x.AccomodationId);
                    table.ForeignKey(
                        name: "FK_Sr_Accomodation_Sr_Hotels",
                        column: x => x.HotelId,
                        principalTable: "Sr_Hotels",
                        principalColumn: "HotelId");
                    table.ForeignKey(
                        name: "FK_Sr_Accomodation_Sr_Trips",
                        column: x => x.TripId,
                        principalTable: "Sr_Trips",
                        principalColumn: "TripId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_Extension",
                columns: table => new
                {
                    ExtensionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    CityID = table.Column<int>(type: "int", nullable: true),
                    HotelId = table.Column<int>(type: "int", nullable: true),
                    Number = table.Column<byte>(type: "tinyint", nullable: true, comment: "single, double, Trible"),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_Extension", x => x.ExtensionId);
                    table.ForeignKey(
                        name: "FK_Sr_Extension_MSGA_City",
                        column: x => x.CityID,
                        principalTable: "MSGA_City",
                        principalColumn: "CityID");
                    table.ForeignKey(
                        name: "FK_Sr_Extension_Sr_Hotels",
                        column: x => x.HotelId,
                        principalTable: "Sr_Hotels",
                        principalColumn: "HotelId");
                    table.ForeignKey(
                        name: "FK_Sr_Extension_Sr_Trips",
                        column: x => x.TripId,
                        principalTable: "Sr_Trips",
                        principalColumn: "TripId");
                });

            migrationBuilder.CreateTable(
                name: "Print_QoutationDetailsItems",
                columns: table => new
                {
                    PrintQoutItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrinQoutDetailId = table.Column<int>(type: "int", nullable: false),
                    Length = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Width = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Height = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalDimension = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks4 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Print_QoutationDetailsItems", x => x.PrintQoutItemId);
                    table.ForeignKey(
                        name: "FK_Print_QoutationDetailsItems_Print_QoutationDetails",
                        column: x => x.PrinQoutDetailId,
                        principalTable: "Print_QoutationDetails",
                        principalColumn: "PrinQoutDetailId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjectItemEmpJoin",
                columns: table => new
                {
                    ProjItemEmpId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjItemsJoinId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjectItemEmpJoin", x => x.ProjItemEmpId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjectItemEmpJoin_Hr_Employees",
                        column: x => x.EmpId,
                        principalTable: "Hr_Employees",
                        principalColumn: "EmpId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjectItemEmpJoin_Proj_ProjectItemsJoin",
                        column: x => x.ProjItemsJoinId,
                        principalTable: "Proj_ProjectItemsJoin",
                        principalColumn: "ProjItemsJoinId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjInsuranceUnit",
                columns: table => new
                {
                    ProjInsuranceUnitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    InsurCaseId = table.Column<int>(type: "int", nullable: true),
                    UnitInsurstatId = table.Column<int>(type: "int", nullable: true),
                    InsurCovTypeId = table.Column<int>(type: "int", nullable: true),
                    InsuranceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjInsuranceUnit", x => x.ProjInsuranceUnitId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjInsuranceUnit_Cod_InsuranceCases",
                        column: x => x.InsurCaseId,
                        principalTable: "Cod_InsuranceCases",
                        principalColumn: "InsurCaseId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjInsuranceUnit_Cod_UnitInsuranceStatus",
                        column: x => x.UnitInsurstatId,
                        principalTable: "Cod_UnitInsuranceStatus",
                        principalColumn: "UnitInsurstatId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjInsuranceUnit_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitDocument",
                columns: table => new
                {
                    ProjUnitDocumentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    OwnShipBondId = table.Column<int>(type: "int", nullable: true),
                    ShelvId = table.Column<int>(type: "int", nullable: true),
                    PaperNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AttachSerial = table.Column<long>(type: "bigint", nullable: true),
                    SearchTags = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    IssueDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RenewalDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IssuePlace = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitDocument", x => x.ProjUnitDocumentId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitDocument_Cod_OwnershipBonds",
                        column: x => x.OwnShipBondId,
                        principalTable: "Cod_OwnershipBonds",
                        principalColumn: "OwnShipBondId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitDocument_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitExploitJoin",
                columns: table => new
                {
                    ProjUnitExploitJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UnitExploitId = table.Column<int>(type: "int", nullable: true),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitExploitJoin", x => x.ProjUnitExploitJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitExploitJoin_Cod_UnitExploitation",
                        column: x => x.UnitExploitId,
                        principalTable: "Cod_UnitExploitation",
                        principalColumn: "UnitExploitId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitExploitJoin_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitInstallTemp",
                columns: table => new
                {
                    ProjUnitInstallTempId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    InstallTempId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitInstallTemp", x => x.ProjUnitInstallTempId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitInstallTemp_Cod_InstallmentTemps",
                        column: x => x.InstallTempId,
                        principalTable: "Cod_InstallmentTemps",
                        principalColumn: "InstallTempId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitInstallTemp_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitOccupTypeJoin",
                columns: table => new
                {
                    ProjUnitOccupTypeJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    UnitOccuTypeId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitOccupTypeJoin", x => x.ProjUnitOccupTypeJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitOccupTypeJoin_Cod_UnitOccupancyTypes",
                        column: x => x.UnitOccuTypeId,
                        principalTable: "Cod_UnitOccupancyTypes",
                        principalColumn: "UnitOccuTypeId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitOccupTypeJoin_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitOwnerJoin",
                columns: table => new
                {
                    ProjUnitOwnerJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    ResourceId = table.Column<int>(type: "int", nullable: true),
                    ResourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    ResourceAccountId = table.Column<int>(type: "int", nullable: true),
                    HelpAccId = table.Column<int>(type: "int", nullable: true),
                    HelpAccType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShareValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SharePercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsMainOwner = table.Column<bool>(type: "bit", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitOwnerJoin", x => x.ProjUnitOwnerJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitOwnerJoin_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitPermitActivityJoin",
                columns: table => new
                {
                    ProjUnitPermitActivityJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    UnitPermitActivId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitPermitActivityJoin", x => x.ProjUnitPermitActivityJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitPermitActivityJoin_Cod_UnitPermittedActivity",
                        column: x => x.UnitPermitActivId,
                        principalTable: "Cod_UnitPermittedActivity",
                        principalColumn: "UnitPermitActivId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitPermitActivityJoin_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitPerspectiveJoin",
                columns: table => new
                {
                    ProjUnitPerspectiveJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    UnitPerspectiveId = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitPerspectiveJoin", x => x.ProjUnitPerspectiveJoinId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitPerspectiveJoin_Cod_UnitPerspective",
                        column: x => x.UnitPerspectiveId,
                        principalTable: "Cod_UnitPerspective",
                        principalColumn: "UnitPerspectiveId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitPerspectiveJoin_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitPicture",
                columns: table => new
                {
                    ProjUnitPictureId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    AttachPath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FData = table.Column<byte[]>(type: "varbinary(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitPicture", x => x.ProjUnitPictureId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitPicture_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitService",
                columns: table => new
                {
                    ProjUnitServiceId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReservId = table.Column<int>(type: "int", nullable: true),
                    UnitServId = table.Column<int>(type: "int", nullable: true),
                    ProjUnitId = table.Column<int>(type: "int", nullable: true),
                    PeriodType = table.Column<byte>(type: "tinyint", nullable: true),
                    PeriodRepeat = table.Column<byte>(type: "tinyint", nullable: true),
                    ServiceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PerUnitOrMeter = table.Column<bool>(type: "bit", nullable: true),
                    MeterCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalServiceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Installed = table.Column<bool>(type: "bit", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitService", x => x.ProjUnitServiceId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitService_Cod_UnitServices",
                        column: x => x.UnitServId,
                        principalTable: "Cod_UnitServices",
                        principalColumn: "UnitServId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitService_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitService_Proj_UnitReservation",
                        column: x => x.ReservId,
                        principalTable: "Proj_UnitReservation",
                        principalColumn: "ReservId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjUnitSubUnits",
                columns: table => new
                {
                    SubUnitId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjUnitId = table.Column<int>(type: "int", nullable: false),
                    SubUnittypeId = table.Column<int>(type: "int", nullable: false),
                    CalcByMeter = table.Column<bool>(type: "bit", nullable: true),
                    MetersCount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MeterPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjUnitSubUnits", x => x.SubUnitId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitSubUnits_Code_SubUnitTypes",
                        column: x => x.SubUnittypeId,
                        principalTable: "Code_SubUnitTypes",
                        principalColumn: "SubUnittypeId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjUnitSubUnits_Proj_ProjUnits",
                        column: x => x.ProjUnitId,
                        principalTable: "Proj_ProjUnits",
                        principalColumn: "ProjUnitId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_TaskEmp",
                columns: table => new
                {
                    TskTech = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpRole = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_TaskEmp", x => x.TskTech);
                    table.ForeignKey(
                        name: "FK_Sr_TaskEmp_Hr_Employees",
                        column: x => x.EmpId,
                        principalTable: "Hr_Employees",
                        principalColumn: "EmpId");
                    table.ForeignKey(
                        name: "FK_Sr_TaskEmp_Sr_Tasks",
                        column: x => x.TaskId,
                        principalTable: "Sr_Tasks",
                        principalColumn: "TaskId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_TaskItem",
                columns: table => new
                {
                    TskItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    HowUse = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_TaskItem", x => x.TskItemId);
                    table.ForeignKey(
                        name: "FK_Sr_TaskItem_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Sr_TaskItem_Sr_Tasks",
                        column: x => x.TaskId,
                        principalTable: "Sr_Tasks",
                        principalColumn: "TaskId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobOrder",
                columns: table => new
                {
                    JorderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    SrTypID = table.Column<int>(type: "int", nullable: true),
                    ReciptionId = table.Column<int>(type: "int", nullable: true),
                    CustId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AddAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    SparePrts = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Wages = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Expense = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    OtherCosts = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    NetValue = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    CustSatisfy = table.Column<bool>(type: "bit", nullable: true),
                    ExitDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ApprovedBy = table.Column<int>(type: "int", nullable: true),
                    FreeService = table.Column<bool>(type: "bit", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobOrder", x => x.JorderId);
                    table.ForeignKey(
                        name: "FK_Sr_JobOrder_Sr_Reciption",
                        column: x => x.ReciptionId,
                        principalTable: "Sr_Reciption",
                        principalColumn: "ReciptionId");
                    table.ForeignKey(
                        name: "FK_Sr_JobOrder_Sr_ServiceTypes",
                        column: x => x.SrTypID,
                        principalTable: "Sr_ServiceTypes",
                        principalColumn: "SrTypID");
                    table.ForeignKey(
                        name: "FK_Sr_JobOrder_Sr_Vehicles",
                        column: x => x.VehicleId,
                        principalTable: "Sr_Vehicles",
                        principalColumn: "VehicleId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_TrafficLinePriceList",
                columns: table => new
                {
                    TrafficLineVeiclId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TrafficLineId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true),
                    ContainerTypeId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    Price1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price4 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price5 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price6 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price7 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price8 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price9 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price10 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Cost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_TrafficLinePriceList", x => x.TrafficLineVeiclId);
                    table.ForeignKey(
                        name: "FK_Sr_TrafficLinePriceList_Sr_ContainerTypes",
                        column: x => x.ContainerTypeId,
                        principalTable: "Sr_ContainerTypes",
                        principalColumn: "ContainerTypeId");
                    table.ForeignKey(
                        name: "FK_Sr_TrafficLinePriceList_Sr_TrafficLines",
                        column: x => x.TrafficLineId,
                        principalTable: "Sr_TrafficLines",
                        principalColumn: "TrafficLineId");
                    table.ForeignKey(
                        name: "FK_Sr_TrafficLinePriceList_Sr_Vehicles",
                        column: x => x.VehicleId,
                        principalTable: "Sr_Vehicles",
                        principalColumn: "VehicleId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleJobOrder",
                columns: table => new
                {
                    VJOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    BookId = table.Column<int>(type: "int", nullable: true),
                    TermId = table.Column<int>(type: "int", nullable: true),
                    FinancialIntervalsId = table.Column<int>(type: "int", nullable: true),
                    VOrderTypeId = table.Column<int>(type: "int", nullable: true),
                    GarageId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true, comment: "ItemCardId"),
                    DriverId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    VendorId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AddAccountId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    ContainerTypeId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemNewName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContainerNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId21 = table.Column<int>(type: "int", nullable: true),
                    TrNo = table.Column<int>(type: "int", nullable: true),
                    ManualTrNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StartCounter = table.Column<long>(type: "bigint", nullable: true),
                    EndCounter = table.Column<long>(type: "bigint", nullable: true),
                    TimeToLeav = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsClosed = table.Column<bool>(type: "bit", nullable: true, comment: "True Closed ;  False  Not Closed"),
                    Supervisor = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ContainersCount = table.Column<int>(type: "int", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    ShipExecuted = table.Column<bool>(type: "bit", nullable: true),
                    Tel = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Fax = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Email4 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Address3 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Tel2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    Tel5 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_CI_AI"),
                    AddField1 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField2 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField3 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField4 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AddField5 = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    TermCostCenterId = table.Column<int>(type: "int", nullable: true),
                    TermCostCenterValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsPosted = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    Postedby = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    PostedDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Closed = table.Column<bool>(type: "bit", nullable: true),
                    CloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UncloseDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ClosedBy = table.Column<int>(type: "int", nullable: true),
                    UnclosedBy = table.Column<int>(type: "int", nullable: true),
                    PermPrinted = table.Column<int>(type: "int", nullable: true),
                    PermPrintedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleJobOrder", x => x.VJOrderId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleJobOrder_Sr_Vehicles",
                        column: x => x.VehicleId,
                        principalTable: "Sr_Vehicles",
                        principalColumn: "VehicleId");
                    table.ForeignKey(
                        name: "FK_Sr_VehicleJobOrder_Sr_VheicleJobOrderType",
                        column: x => x.VOrderTypeId,
                        principalTable: "Sr_VheicleJobOrderType",
                        principalColumn: "VOrderTypeId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_CapitalUpdate",
                columns: table => new
                {
                    StockCapitalUpdatId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockId = table.Column<int>(type: "int", nullable: true),
                    CurrentCapital = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TrDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_CapitalUpdate", x => x.StockCapitalUpdatId);
                    table.ForeignKey(
                        name: "FK_Stock_CapitalUpdate_Stock_Stocks",
                        column: x => x.StockId,
                        principalTable: "Stock_Stocks",
                        principalColumn: "StockId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_PortfolioStocks",
                columns: table => new
                {
                    StockPortJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    StockId = table.Column<int>(type: "int", nullable: true),
                    StockQuantity = table.Column<int>(type: "int", nullable: true),
                    CostAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_PortfolioStocks", x => x.StockPortJoinId);
                    table.ForeignKey(
                        name: "FK_Stock_PortfolioStocks_Stock_Portfolio",
                        column: x => x.StockPortfolioId,
                        principalTable: "Stock_Portfolio",
                        principalColumn: "StockPortfolioId");
                    table.ForeignKey(
                        name: "FK_Stock_PortfolioStocks_Stock_Stocks",
                        column: x => x.StockId,
                        principalTable: "Stock_Stocks",
                        principalColumn: "StockId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_AccChrtDailyAssist",
                columns: table => new
                {
                    AccChrtDailyAssistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    DailyAssisId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_AccChrtDailyAssist", x => x.AccChrtDailyAssistId);
                    table.ForeignKey(
                        name: "FK_Cal_AccChrtDailyAssist_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_AccountClaasiJoin",
                columns: table => new
                {
                    AcChrtJoinClaasi = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AccountClassId = table.Column<int>(type: "int", nullable: true),
                    Operator = table.Column<byte>(type: "tinyint", nullable: true),
                    DaysCount = table.Column<int>(type: "int", nullable: true),
                    TypeOfAcc = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_AccountClaasiJoin", x => x.AcChrtJoinClaasi);
                    table.ForeignKey(
                        name: "FK_Cal_AccountClaasiJoin_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_AccountUsers",
                columns: table => new
                {
                    AccUserId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    ApprovedBy = table.Column<int>(type: "int", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    TranAndView = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_AccountUsers", x => x.AccUserId);
                    table.ForeignKey(
                        name: "FK_Cal_AccountUsers_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                    table.ForeignKey(
                        name: "FK_Cal_AccountUsers_G_Users",
                        column: x => x.UserId,
                        principalTable: "G_Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_CostCenterAccount",
                columns: table => new
                {
                    CostCenterAccId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    AccountPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_CostCenterAccount", x => x.CostCenterAccId);
                    table.ForeignKey(
                        name: "FK_Cal_CostCenterAccount_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                    table.ForeignKey(
                        name: "FK_Cal_CostCenterAccount_Cal_CostCenters",
                        column: x => x.CostCenterId,
                        principalTable: "Cal_CostCenters",
                        principalColumn: "CostCenterId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_EmpAccounts",
                columns: table => new
                {
                    EmpAccountId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    AccountCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameA = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "Arabic_CI_AI"),
                    AccountNameE = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountStopped = table.Column<bool>(type: "bit", nullable: true),
                    AccountModel = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "discount, tax, master ...etc", collation: "Arabic_CI_AI"),
                    RemarksA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    OpenningBalanceDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCredit = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    OpenningBalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancDepitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccCurrTrancCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotalDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    AccTotaCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceDebitCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    BalanceCreditCurncy = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    IsPrimeAccount = table.Column<bool>(type: "bit", nullable: true),
                    IsInUse = table.Column<bool>(type: "bit", nullable: true),
                    AccountDescription = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    IsServerEntity = table.Column<bool>(type: "bit", nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_EmpAccounts", x => x.EmpAccountId);
                    table.ForeignKey(
                        name: "FK_Cal_EmpAccounts_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                    table.ForeignKey(
                        name: "FK_Cal_EmpAccounts_Hr_Employees",
                        column: x => x.EmpId,
                        principalTable: "Hr_Employees",
                        principalColumn: "EmpId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_DailyAssistance",
                columns: table => new
                {
                    DailyAssisId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_DailyAssistance", x => x.DailyAssisId);
                    table.ForeignKey(
                        name: "FK_Cod_DailyAssistance_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                    table.ForeignKey(
                        name: "FK_Cod_DailyAssistance_Sys_AnalyticalCodes",
                        column: x => x.AId,
                        principalTable: "Sys_AnalyticalCodes",
                        principalColumn: "AId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_PortfolioAccounts",
                columns: table => new
                {
                    StockPortAccountsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockPortfolioId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    OpenningBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrentBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Auto = table.Column<bool>(type: "bit", nullable: true),
                    NoTranEffect = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_PortfolioAccounts", x => x.StockPortAccountsId);
                    table.ForeignKey(
                        name: "FK_Stock_PortfolioAccounts_Cal_AccountChart",
                        column: x => x.AccountId,
                        principalTable: "Cal_AccountChart",
                        principalColumn: "AccountId");
                    table.ForeignKey(
                        name: "FK_Stock_PortfolioAccounts_Stock_Portfolio",
                        column: x => x.StockPortfolioId,
                        principalTable: "Stock_Portfolio",
                        principalColumn: "StockPortfolioId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_AccountClassification",
                columns: table => new
                {
                    AccountClassId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ParentAccountClassId = table.Column<int>(type: "int", nullable: true),
                    Code = table.Column<long>(type: "bigint", nullable: true),
                    DescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountClassType = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AccountCatId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_AccountClassification", x => x.AccountClassId);
                    table.ForeignKey(
                        name: "FK_Cod_AccountClassification_Cod_AccountCategories",
                        column: x => x.AccountCatId,
                        principalTable: "Cod_AccountCategories",
                        principalColumn: "AccountCatId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_Region",
                columns: table => new
                {
                    RegionId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    NameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    NameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    Lat = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    Lng = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    MinZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    MaxZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CurrentZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_Region", x => x.RegionId);
                    table.ForeignKey(
                        name: "FK_Cod_Region_Cod_Country",
                        column: x => x.CountryId,
                        principalTable: "Cod_Country",
                        principalColumn: "CountryId");
                });

            migrationBuilder.CreateTable(
                name: "Cal_JurnalDetail",
                columns: table => new
                {
                    JurnalDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JurnalId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true),
                    CustAccountId = table.Column<int>(type: "int", nullable: true),
                    VendAccountId = table.Column<int>(type: "int", nullable: true),
                    EmpAccountId = table.Column<int>(type: "int", nullable: true),
                    AssetAccountId = table.Column<int>(type: "int", nullable: true),
                    BusinessPartnerAccId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: true),
                    CostCenterId1 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId2 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId3 = table.Column<int>(type: "int", nullable: true),
                    CostCenterId4 = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JurDesc = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true, collation: "Arabic_CI_AI"),
                    DebitCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditCurrency = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    DebitLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CreditLocal = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cal_JurnalDetail", x => x.JurnalDetailId);
                    table.ForeignKey(
                        name: "FK_Cal_JurnalDetail_Cal_JurnalEntry",
                        column: x => x.JurnalId,
                        principalTable: "Cal_JurnalEntry",
                        principalColumn: "JurnalId");
                    table.ForeignKey(
                        name: "FK_Cal_JurnalDetail_MS_Currency",
                        column: x => x.CurrencyId,
                        principalTable: "MS_Currency",
                        principalColumn: "CurrencyId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemPartition",
                columns: table => new
                {
                    ItemPartId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    QtyPartiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QtyInNotebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    TotalCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseNumber = table.Column<int>(type: "int", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    VarianceQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReservedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RequestedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SaleNotDelivered = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurNotReceived = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutWithoutBalance = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInWithoutCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurchaseOrder = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WithoutCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemLimit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemMax = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TVersion = table.Column<long>(type: "bigint", nullable: true, comment: "number of updates on the table"),
                    TType = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: true, comment: "i for inserted, u for updated", collation: "Arabic_CI_AI"),
                    QtyIUnit2Notebook = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    QtyIUnit2Partiation = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemPartition", x => x.ItemPartId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemPartition_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Ms_ItemPartition_MS_Partition",
                        column: x => x.StorePartId,
                        principalTable: "MS_Partition",
                        principalColumn: "StorePartId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_DeliverItemCard",
                columns: table => new
                {
                    DelivItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    jobMaterialId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Satus = table.Column<byte>(type: "tinyint", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    RetPurchItemCardId = table.Column<int>(type: "int", nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    VehicleId1 = table.Column<int>(type: "int", nullable: true),
                    VehicleId2 = table.Column<int>(type: "int", nullable: true),
                    DriverName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TimeEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    SalesOrdertemCardId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true),
                    SalesDepId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliverItemCard", x => x.DelivItemCardId);
                    table.ForeignKey(
                        name: "FK_Ms_DeliverItemCard_Ms_DeliverSalesInvoice",
                        column: x => x.DeliverId,
                        principalTable: "Ms_DeliverSalesInvoice",
                        principalColumn: "DeliverId");
                    table.ForeignKey(
                        name: "FK_Ms_DeliverItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_Ms_DeliverItemCard_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ItemUnitPackingJoin",
                columns: table => new
                {
                    ItemPackSizeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    PackSizeId = table.Column<int>(type: "int", nullable: true),
                    QtyInPackage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    RecomendedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MineQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaxQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MaxWheight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ItemUnitPackingJoin", x => x.ItemPackSizeId);
                    table.ForeignKey(
                        name: "FK_Ms_ItemUnitPackingJoin_Cod_PackingSize",
                        column: x => x.PackSizeId,
                        principalTable: "Cod_PackingSize",
                        principalColumn: "PackSizeId");
                    table.ForeignKey(
                        name: "FK_Ms_ItemUnitPackingJoin_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                });

            migrationBuilder.CreateTable(
                name: "MS_PurchaseInvoiceItemCard",
                columns: table => new
                {
                    InvItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    QuantityRecieved = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyRecievedBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceIncludTaxInPurch = table.Column<bool>(type: "bit", nullable: true),
                    IsNoCostDeliver = table.Column<int>(type: "int", nullable: true),
                    DeliverNoCostExecut = table.Column<bool>(type: "bit", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    StockRecItemCardId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true),
                    QtyBeforDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QualityDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QualityValueDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyScalDiffrence = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyScalDiffrenceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true),
                    AnimalAge = table.Column<int>(type: "int", nullable: true),
                    ISMedicinNotify = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_PurchaseInvoiceItemCard", x => x.InvItemCardId);
                    table.ForeignKey(
                        name: "FK_MS_PurchaseInvoiceItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_PurchaseInvoiceItemCard_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                    table.ForeignKey(
                        name: "FK_MS_PurchaseInvoiceItemCard_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnPurchaseItem",
                columns: table => new
                {
                    RetPurchItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityIn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityReceived = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyRecievedBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceIncludTaxInPurch = table.Column<bool>(type: "bit", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnPurchaseItem", x => x.RetPurchItemCardId);
                    table.ForeignKey(
                        name: "FK_MS_ReturnPurchaseItem_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ReturnPurchaseItem_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                    table.ForeignKey(
                        name: "FK_MS_ReturnPurchaseItem_MS_ReturnPurchase",
                        column: x => x.RetPurchId,
                        principalTable: "MS_ReturnPurchase",
                        principalColumn: "RetPurchId");
                });

            migrationBuilder.CreateTable(
                name: "MS_ReturnSalesItemCard",
                columns: table => new
                {
                    RetItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    jobProductId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    ItemOfferId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityIn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    InOffer = table.Column<bool>(type: "bit", nullable: true),
                    OfferPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true),
                    SalesDepId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ReturnSalesItemCard", x => x.RetItemCardId);
                    table.ForeignKey(
                        name: "FK_MS_ReturnSalesItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ReturnSalesItemCard_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                    table.ForeignKey(
                        name: "FK_MS_ReturnSalesItemCard_MS_ReturnSales",
                        column: x => x.RetSaleId,
                        principalTable: "MS_ReturnSales",
                        principalColumn: "RetSaleId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvoiceItemCard",
                columns: table => new
                {
                    InvItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    CityIDFrom = table.Column<int>(type: "int", nullable: true),
                    CityIDTo = table.Column<int>(type: "int", nullable: true),
                    AlterToItemCardId = table.Column<int>(type: "int", nullable: true),
                    CollectToItemCardId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    AlterTo = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    TaxesId1 = table.Column<int>(type: "int", nullable: true),
                    Tax1Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax1IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax1PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax1Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue1 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId2 = table.Column<int>(type: "int", nullable: true),
                    Tax2Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax2IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax2PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax2Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxesId3 = table.Column<int>(type: "int", nullable: true),
                    Tax3Style = table.Column<byte>(type: "tinyint", nullable: true),
                    Tax3IsAccomulative = table.Column<bool>(type: "bit", nullable: true),
                    Tax3PlusOrMinus = table.Column<bool>(type: "bit", nullable: true),
                    Tax3Percent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxValue3 = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    JobOrderId = table.Column<int>(type: "int", nullable: true),
                    jobProductId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    ItemOfferId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityOut = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyOutBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ReturnQtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    DisAmountAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    MainDiscValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TaxableValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCommisionPercent = table.Column<bool>(type: "bit", nullable: true),
                    CommisionPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CommisionValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_CI_AI"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PriceList = table.Column<byte>(type: "tinyint", nullable: true),
                    PriceIncludTaxInSales = table.Column<bool>(type: "bit", nullable: true),
                    InOffer = table.Column<bool>(type: "bit", nullable: true),
                    OfferPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    DelivItemCardId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    VehicleId1 = table.Column<int>(type: "int", nullable: true),
                    VehicleId2 = table.Column<int>(type: "int", nullable: true),
                    DriverName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TimeEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    PettycashId = table.Column<int>(type: "int", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true),
                    SalesDepId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    SalesOrdertemCardId = table.Column<int>(type: "int", nullable: true)
                        .Annotation("SqlServer:Sparse", true),
                    SalesOffertemCardId = table.Column<int>(type: "int", nullable: true)
                        .Annotation("SqlServer:Sparse", true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InvoiceItemCard", x => x.InvItemCardId);
                    table.ForeignKey(
                        name: "FK_InvoiceItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_InvoiceItemCard_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvoiceItemCard_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                });

            migrationBuilder.CreateTable(
                name: "MS_StockReceiptItemCard",
                columns: table => new
                {
                    StockRecItemCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    RetPurchItemCardId = table.Column<int>(type: "int", nullable: true),
                    jobGoStockId = table.Column<int>(type: "int", nullable: true),
                    jobProductId = table.Column<int>(type: "int", nullable: true),
                    jobScrapId = table.Column<int>(type: "int", nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    BillOfMaterialId = table.Column<int>(type: "int", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QuantityIn = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyInBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsBonus = table.Column<bool>(type: "bit", nullable: true, defaultValueSql: "((0))"),
                    FireTriger = table.Column<bool>(type: "bit", nullable: false),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Satus = table.Column<byte>(type: "tinyint", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    IsNoCostDeliver = table.Column<int>(type: "int", nullable: true),
                    DeliverNoCostExecut = table.Column<bool>(type: "bit", nullable: true),
                    AId = table.Column<int>(type: "int", nullable: true),
                    DBTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    DBTableId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    AccountTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceType = table.Column<byte>(type: "tinyint", nullable: true),
                    AccountId = table.Column<int>(type: "int", nullable: true, comment: "to attach any document in database to receiptnote"),
                    RectSourceTypeId = table.Column<int>(type: "int", nullable: true),
                    VehicleId = table.Column<int>(type: "int", nullable: true),
                    QtyBeforDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QualityDiscount = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QualityValueDisc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyScalDiffrence = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyScalDiffrenceValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    ServicePrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ProfitPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Kirat = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true),
                    AnimalAge = table.Column<int>(type: "int", nullable: true),
                    ISMedicinNotify = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_StockReceiptItemCard", x => x.StockRecItemCardId);
                    table.ForeignKey(
                        name: "FK_MS_StockReceiptItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_StockReceiptItemCard_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                    table.ForeignKey(
                        name: "FK_MS_StockReceiptItemCard_MS_StockRecript",
                        column: x => x.StockRecId,
                        principalTable: "MS_StockRecript",
                        principalColumn: "StockRecId");
                });

            migrationBuilder.CreateTable(
                name: "MS_StockTranItemCard",
                columns: table => new
                {
                    TrItenCardId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TranId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    PartFrom = table.Column<int>(type: "int", nullable: true),
                    PartTo = table.Column<int>(type: "int", nullable: true),
                    FollowCollectionId = table.Column<int>(type: "int", nullable: true),
                    ItemIdToFollow = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    ScaleCardId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    BatchNumberFifoOrLifo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ValueRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    FIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LIFOCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverage = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    CoastAverageUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    LastCostUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShare = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpenseShareAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpenseAfterCurr = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterExpensAfterCurrUnit = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Remarks3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    ItemAtrribBatchId = table.Column<int>(type: "int", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    QtyIUnit2 = table.Column<decimal>(type: "numeric(38,10)", nullable: true, defaultValueSql: "((0))"),
                    LastUpdateTime = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true),
                    MainServerId = table.Column<int>(type: "int", nullable: true),
                    ServerUnitId = table.Column<int>(type: "int", nullable: true),
                    ServerItemCardId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_StockTranItemCard", x => x.TrItenCardId);
                    table.ForeignKey(
                        name: "FK_MS_StockTranItemCard_MS_ItemCard",
                        column: x => x.ItemCardId,
                        principalTable: "MS_ItemCard",
                        principalColumn: "ItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_StockTranItemCard_Ms_ItemUnit",
                        column: x => x.UnitId,
                        principalTable: "Ms_ItemUnit",
                        principalColumn: "UnitId");
                    table.ForeignKey(
                        name: "FK_MS_StockTranItemCard_MS_StockTransferNote",
                        column: x => x.TranId,
                        principalTable: "MS_StockTransferNote",
                        principalColumn: "TranId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_ReceiptNoteCurrencies",
                columns: table => new
                {
                    RecCurId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Count = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_ReceiptNoteCurrencies", x => x.RecCurId);
                    table.ForeignKey(
                        name: "FK_Ms_ReceiptNoteCurrencies_Ms_ReceiptNote",
                        column: x => x.RectId,
                        principalTable: "Ms_ReceiptNote",
                        principalColumn: "RectId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleRentRecJoin",
                columns: table => new
                {
                    RentRecJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VRentContractId = table.Column<int>(type: "int", nullable: true),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleRentRecJoin", x => x.RentRecJoinId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentRecJoin_Ms_ReceiptNote",
                        column: x => x.RectId,
                        principalTable: "Ms_ReceiptNote",
                        principalColumn: "RectId");
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentRecJoin_Sr_VehicleRenalContract",
                        column: x => x.VRentContractId,
                        principalTable: "Sr_VehicleRenalContract",
                        principalColumn: "VRentContractId");
                });

            migrationBuilder.CreateTable(
                name: "MS_CashTransactionDetail",
                columns: table => new
                {
                    PaidDocId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RectId = table.Column<int>(type: "int", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    AdjustId = table.Column<int>(type: "int", nullable: true),
                    JurnalId = table.Column<int>(type: "int", nullable: true),
                    TableCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TableId = table.Column<int>(type: "int", nullable: true),
                    TermType = table.Column<byte>(type: "tinyint", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TrNoDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Paid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaid = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidByDoc = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    NotPaidBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PaidByDocBeforeRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_CashTransactionDetail", x => x.PaidDocId);
                    table.ForeignKey(
                        name: "FK_MS_CashTransactionDetail_Cal_JurnalEntry",
                        column: x => x.JurnalId,
                        principalTable: "Cal_JurnalEntry",
                        principalColumn: "JurnalId");
                    table.ForeignKey(
                        name: "FK_MS_CashTransactionDetail_Ms_AdjustMents",
                        column: x => x.AdjustId,
                        principalTable: "Ms_AdjustMents",
                        principalColumn: "AdjustId");
                    table.ForeignKey(
                        name: "FK_MS_CashTransactionDetail_MS_PaymentNote",
                        column: x => x.PayId,
                        principalTable: "MS_PaymentNote",
                        principalColumn: "PayId");
                    table.ForeignKey(
                        name: "FK_MS_CashTransactionDetail_Ms_ReceiptNote",
                        column: x => x.RectId,
                        principalTable: "Ms_ReceiptNote",
                        principalColumn: "RectId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_PaymentNoteCurrencies",
                columns: table => new
                {
                    PayCurId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCategoryId = table.Column<int>(type: "int", nullable: true),
                    Value = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Count = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Total = table.Column<decimal>(type: "numeric(38,10)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PaymentNoteCurrencies", x => x.PayCurId);
                    table.ForeignKey(
                        name: "FK_Ms_PaymentNoteCurrencies_MS_PaymentNote",
                        column: x => x.PayId,
                        principalTable: "MS_PaymentNote",
                        principalColumn: "PayId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_PaymentNoteItems",
                columns: table => new
                {
                    PayItemsId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemType = table.Column<byte>(type: "tinyint", nullable: true),
                    BarCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: true),
                    Quantity = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    QtyBeforRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExecutedQty = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    PriceAfterRate = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ItemCardDesc = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemCardDescE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ShipExecuted = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PaymentNoteItems", x => x.PayItemsId);
                    table.ForeignKey(
                        name: "FK_Ms_PaymentNoteItems_MS_PaymentNote",
                        column: x => x.PayId,
                        principalTable: "MS_PaymentNote",
                        principalColumn: "PayId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_PettyPaymentJoin",
                columns: table => new
                {
                    PetyPayId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    PettycashId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PettyPaymentJoin", x => x.PetyPayId);
                    table.ForeignKey(
                        name: "FK_Ms_PettyPaymentJoin_MS_PaymentNote",
                        column: x => x.PayId,
                        principalTable: "MS_PaymentNote",
                        principalColumn: "PayId");
                    table.ForeignKey(
                        name: "FK_Ms_PettyPaymentJoin_MS_Pettycash",
                        column: x => x.PettycashId,
                        principalTable: "MS_Pettycash",
                        principalColumn: "PettycashId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleRentPayJoin",
                columns: table => new
                {
                    RentPayJoinId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VRentContractId = table.Column<int>(type: "int", nullable: true),
                    PayId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleRentPayJoin", x => x.RentPayJoinId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentPayJoin_MS_PaymentNote",
                        column: x => x.PayId,
                        principalTable: "MS_PaymentNote",
                        principalColumn: "PayId");
                    table.ForeignKey(
                        name: "FK_Sr_VehicleRentPayJoin_Sr_VehicleRenalContract",
                        column: x => x.VRentContractId,
                        principalTable: "Sr_VehicleRenalContract",
                        principalColumn: "VRentContractId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_TripAccomDetail",
                columns: table => new
                {
                    TripAccomDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccomodationId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    Name1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Name2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PassPortNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    RoomNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PersonCount = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_TripAccomDetail", x => x.TripAccomDetailId);
                    table.ForeignKey(
                        name: "FK_Sr_TripAccomDetail_Sr_Accomodation",
                        column: x => x.AccomodationId,
                        principalTable: "Sr_Accomodation",
                        principalColumn: "AccomodationId");
                });

            migrationBuilder.CreateTable(
                name: "Proj_ProjItemEmpTaskJoin",
                columns: table => new
                {
                    ProjItemEmpTaskId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjItemEmpId = table.Column<int>(type: "int", nullable: true),
                    TaskId = table.Column<int>(type: "int", nullable: true),
                    ExpectItemPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ExpectItemValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualItemPercentExpense = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ActualItemExpenseValue = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    FinishPercent = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Remarks1 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true),
                    Remarks2 = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proj_ProjItemEmpTaskJoin", x => x.ProjItemEmpTaskId);
                    table.ForeignKey(
                        name: "FK_Proj_ProjItemEmpTaskJoin_Prod_Tasks",
                        column: x => x.TaskId,
                        principalTable: "Prod_Tasks",
                        principalColumn: "TaskId");
                    table.ForeignKey(
                        name: "FK_Proj_ProjItemEmpTaskJoin_Proj_ProjectItemEmpJoin",
                        column: x => x.ProjItemEmpId,
                        principalTable: "Proj_ProjectItemEmpJoin",
                        principalColumn: "ProjItemEmpId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobAdditionalCost",
                columns: table => new
                {
                    AddCostId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JorderId = table.Column<int>(type: "int", nullable: true),
                    AddCostDesc = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    AdCostValue = table.Column<decimal>(type: "numeric(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobAdditionalCost", x => x.AddCostId);
                    table.ForeignKey(
                        name: "FK_Sr_JobAdditionalCost_Sr_JobOrder",
                        column: x => x.JorderId,
                        principalTable: "Sr_JobOrder",
                        principalColumn: "JorderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobComments",
                columns: table => new
                {
                    JobComentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JorderId = table.Column<int>(type: "int", nullable: true),
                    EmpIdComBy = table.Column<int>(type: "int", nullable: true),
                    Comment = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobComments", x => x.JobComentId);
                    table.ForeignKey(
                        name: "FK_Sr_JobComments_Sr_JobOrder",
                        column: x => x.JorderId,
                        principalTable: "Sr_JobOrder",
                        principalColumn: "JorderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobExtrnalExpens",
                columns: table => new
                {
                    JobExpensId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JorderId = table.Column<int>(type: "int", nullable: true),
                    ResponsibleEmpId = table.Column<int>(type: "int", nullable: true),
                    EmpCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    EmpName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TotalHours = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    EXPValue = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    EXPDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobExtrnalExpens", x => x.JobExpensId);
                    table.ForeignKey(
                        name: "FK_Sr_JobExtrnalExpens_Sr_JobOrder",
                        column: x => x.JorderId,
                        principalTable: "Sr_JobOrder",
                        principalColumn: "JorderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobFiles",
                columns: table => new
                {
                    FileId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JorderId = table.Column<int>(type: "int", nullable: true),
                    FileName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    FileDesc = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: true),
                    Image = table.Column<byte[]>(type: "image", nullable: true),
                    binary = table.Column<byte[]>(type: "binary(4000)", fixedLength: true, maxLength: 4000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobFiles", x => x.FileId);
                    table.ForeignKey(
                        name: "FK_Sr_JobFiles_Sr_JobOrder",
                        column: x => x.JorderId,
                        principalTable: "Sr_JobOrder",
                        principalColumn: "JorderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobSparts",
                columns: table => new
                {
                    JobSpareId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JorderId = table.Column<int>(type: "int", nullable: true),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    ItemCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    ItemDescA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    Qty = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    SPValue = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    SPDescription = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    StoreId = table.Column<int>(type: "int", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobSparts", x => x.JobSpareId);
                    table.ForeignKey(
                        name: "FK_Sr_JobSparts_Sr_JobOrder",
                        column: x => x.JorderId,
                        principalTable: "Sr_JobOrder",
                        principalColumn: "JorderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_JobSWages",
                columns: table => new
                {
                    JobSTechId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JorderId = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    EmpCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    EmpName1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    TotalHours = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    HourlyCostRate = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    WValue = table.Column<decimal>(type: "numeric(18,2)", nullable: true),
                    WDescription = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_JobSWages", x => x.JobSTechId);
                    table.ForeignKey(
                        name: "FK_Sr_JobSWages_Sr_JobOrder",
                        column: x => x.JorderId,
                        principalTable: "Sr_JobOrder",
                        principalColumn: "JorderId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_PurchInvVehicleJobOrderJoin",
                columns: table => new
                {
                    PurchVehiclJobOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_PurchInvVehicleJobOrderJoin", x => x.PurchVehiclJobOrderId);
                    table.ForeignKey(
                        name: "FK_Ms_PurchInvVehicleJobOrderJoin_MS_PurchasInvoice",
                        column: x => x.PurInvId,
                        principalTable: "MS_PurchasInvoice",
                        principalColumn: "PurInvId");
                    table.ForeignKey(
                        name: "FK_Ms_PurchInvVehicleJobOrderJoin_Sr_VehicleJobOrder",
                        column: x => x.VJOrderId,
                        principalTable: "Sr_VehicleJobOrder",
                        principalColumn: "VJOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Ms_SalesInvVehiclJobOrderJoin",
                columns: table => new
                {
                    SalesVehiclJobOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ms_SalesInvVehiclJobOrderJoin", x => x.SalesVehiclJobOrderId);
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvVehiclJobOrderJoin_Ms_SalesInvoice",
                        column: x => x.InvId,
                        principalTable: "Ms_SalesInvoice",
                        principalColumn: "InvId");
                    table.ForeignKey(
                        name: "FK_Ms_SalesInvVehiclJobOrderJoin_Sr_VehicleJobOrder",
                        column: x => x.VJOrderId,
                        principalTable: "Sr_VehicleJobOrder",
                        principalColumn: "VJOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Sr_VehicleJobOrderDetail",
                columns: table => new
                {
                    VJOrderDetailId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VJOrderId = table.Column<int>(type: "int", nullable: true),
                    TrafficLineId = table.Column<int>(type: "int", nullable: true),
                    DriverId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    HotelId = table.Column<int>(type: "int", nullable: true),
                    TripId = table.Column<int>(type: "int", nullable: true),
                    ContainerTypeId = table.Column<int>(type: "int", nullable: true),
                    TimeStart = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TimeEnd = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    KM = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Price = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Cost = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    ContainersCount = table.Column<int>(type: "int", nullable: true),
                    ContainerWeight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    WaitTime = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    IsDamade = table.Column<bool>(type: "bit", nullable: true),
                    DamadeDesc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true),
                    representative = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PersonsCount = table.Column<int>(type: "int", nullable: true),
                    PlaceToStart = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    PlaceToEnd = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    CompanyName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sr_VehicleJobOrderDetail", x => x.VJOrderDetailId);
                    table.ForeignKey(
                        name: "FK_Sr_VehicleJobOrderDetail_Sr_Drivers",
                        column: x => x.DriverId,
                        principalTable: "Sr_Drivers",
                        principalColumn: "DriverId");
                    table.ForeignKey(
                        name: "FK_Sr_VehicleJobOrderDetail_Sr_VehicleJobOrder",
                        column: x => x.VJOrderId,
                        principalTable: "Sr_VehicleJobOrder",
                        principalColumn: "VJOrderId");
                });

            migrationBuilder.CreateTable(
                name: "Stock_PortfolioStockArchives",
                columns: table => new
                {
                    StockArchivesId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockPortJoinId = table.Column<int>(type: "int", nullable: true),
                    StockArchId = table.Column<int>(type: "int", nullable: true),
                    StockQuantity = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stock_PortfolioStockArchives", x => x.StockArchivesId);
                    table.ForeignKey(
                        name: "FK_Stock_PortfolioStockArchives_Stock_Archives",
                        column: x => x.StockArchId,
                        principalTable: "Stock_Archives",
                        principalColumn: "StockArchId");
                    table.ForeignKey(
                        name: "FK_Stock_PortfolioStockArchives_Stock_PortfolioStocks",
                        column: x => x.StockPortJoinId,
                        principalTable: "Stock_PortfolioStocks",
                        principalColumn: "StockPortJoinId");
                });

            migrationBuilder.CreateTable(
                name: "Cod_City",
                columns: table => new
                {
                    CityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<int>(type: "int", nullable: false),
                    NameA = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    NameE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RemarksA = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    RmarksE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    AId = table.Column<int>(type: "int", nullable: true),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    RegionId = table.Column<int>(type: "int", nullable: true),
                    SysCityID = table.Column<int>(type: "int", nullable: true),
                    Lat = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    Lng = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true, collation: "Arabic_BIN"),
                    MinZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    MaxZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CurrentZoom = table.Column<byte>(type: "tinyint", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    UpdatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "Arabic_BIN"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cod_City", x => x.CityId);
                    table.ForeignKey(
                        name: "FK_Cod_City_Cod_Region",
                        column: x => x.RegionId,
                        principalTable: "Cod_Region",
                        principalColumn: "RegionId");
                    table.ForeignKey(
                        name: "FK_Cod_City_Sys_City",
                        column: x => x.SysCityID,
                        principalTable: "Sys_City",
                        principalColumn: "SysCityID");
                });

            migrationBuilder.CreateTable(
                name: "MS_ItemSerials",
                columns: table => new
                {
                    ItemSerialId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemCardId = table.Column<int>(type: "int", nullable: true),
                    SRNo1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SRNo2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SRNo3 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SRNo4 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    SRNo5 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true),
                    PurInvId = table.Column<int>(type: "int", nullable: true),
                    RetPurchId = table.Column<int>(type: "int", nullable: true),
                    InvId = table.Column<int>(type: "int", nullable: true),
                    RetSaleId = table.Column<int>(type: "int", nullable: true),
                    StockRecId = table.Column<int>(type: "int", nullable: true),
                    DeliverId = table.Column<int>(type: "int", nullable: true),
                    TranId = table.Column<int>(type: "int", nullable: true),
                    SalesOrderId = table.Column<int>(type: "int", nullable: true),
                    StockAdjustId = table.Column<int>(type: "int", nullable: true),
                    TranReqId = table.Column<int>(type: "int", nullable: true),
                    PurInvItemCardId = table.Column<int>(type: "int", nullable: true),
                    InvItemCardId = table.Column<int>(type: "int", nullable: true),
                    DelivItemCardId = table.Column<int>(type: "int", nullable: true),
                    StockAdjustItemId = table.Column<int>(type: "int", nullable: true),
                    OrderDetailItemCardId = table.Column<int>(type: "int", nullable: true),
                    RetPurchItemCardId = table.Column<int>(type: "int", nullable: true),
                    RetItemCardId = table.Column<int>(type: "int", nullable: true),
                    StockRecItemCardId = table.Column<int>(type: "int", nullable: true),
                    TrItenCardId = table.Column<int>(type: "int", nullable: true),
                    TranReqItemCardId = table.Column<int>(type: "int", nullable: true),
                    WarrantyStrtDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    WarrantyEndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsInOrOut = table.Column<bool>(type: "bit", nullable: true),
                    StorePartId = table.Column<int>(type: "int", nullable: true),
                    LotNumberExpiryId = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CreatedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UpdateBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    UpdateAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DeletedBy = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: true, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Length = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Width = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Height = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Weight = table.Column<decimal>(type: "numeric(38,10)", nullable: true),
                    Color = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MS_ItemSerials_1", x => x.ItemSerialId);
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_Ms_DeliverItemCard",
                        column: x => x.DelivItemCardId,
                        principalTable: "Ms_DeliverItemCard",
                        principalColumn: "DelivItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_Ms_ItemStockAdjustmentDetail",
                        column: x => x.StockAdjustItemId,
                        principalTable: "Ms_ItemStockAdjustmentDetail",
                        principalColumn: "StockAdjustItemId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_MS_PurchaseInvoiceItemCard",
                        column: x => x.PurInvItemCardId,
                        principalTable: "MS_PurchaseInvoiceItemCard",
                        principalColumn: "InvItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_MS_ReturnPurchaseItem",
                        column: x => x.RetPurchItemCardId,
                        principalTable: "MS_ReturnPurchaseItem",
                        principalColumn: "RetPurchItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_MS_ReturnSalesItemCard",
                        column: x => x.RetItemCardId,
                        principalTable: "MS_ReturnSalesItemCard",
                        principalColumn: "RetItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_Ms_SalesInvoiceItemCard",
                        column: x => x.InvItemCardId,
                        principalTable: "Ms_SalesInvoiceItemCard",
                        principalColumn: "InvItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_Ms_SalesOrderItemCard",
                        column: x => x.OrderDetailItemCardId,
                        principalTable: "Ms_SalesOrderItemCard",
                        principalColumn: "SalesOrdertemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_MS_StockReceiptItemCard",
                        column: x => x.StockRecItemCardId,
                        principalTable: "MS_StockReceiptItemCard",
                        principalColumn: "StockRecItemCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_MS_StockTranItemCard",
                        column: x => x.TrItenCardId,
                        principalTable: "MS_StockTranItemCard",
                        principalColumn: "TrItenCardId");
                    table.ForeignKey(
                        name: "FK_MS_ItemSerials_Ms_StockTranItemCardReq",
                        column: x => x.TranReqItemCardId,
                        principalTable: "Ms_StockTranItemCardReq",
                        principalColumn: "TranReqItemCardId");
                });

            migrationBuilder.CreateIndex(
                name: "IX_An_AnimalDeathDetail_AnDeathId",
                table: "An_AnimalDeathDetail",
                column: "AnDeathId");

            migrationBuilder.CreateIndex(
                name: "IX_An_ANimalMidicin_AnMidicinId",
                table: "An_ANimalMidicin",
                column: "AnMidicinId");

            migrationBuilder.CreateIndex(
                name: "IX_An_ANimalMidicin_AnTypeId",
                table: "An_ANimalMidicin",
                column: "AnTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_An_AnimalWeightRateDetail_AnWeightRateId",
                table: "An_AnimalWeightRateDetail",
                column: "AnWeightRateId");

            migrationBuilder.CreateIndex(
                name: "IX_An_NewBornDetail_AnBornId",
                table: "An_NewBornDetail",
                column: "AnBornId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetAddDocDetail_AssetAddId",
                table: "Asset_AssetAddDocDetail",
                column: "AssetAddId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetCard_AssetCatId",
                table: "Asset_AssetCard",
                column: "AssetCatId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetCategory_ParentAssetCatId",
                table: "Asset_AssetCategory",
                column: "ParentAssetCatId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetContacts_AssetId",
                table: "Asset_AssetContacts",
                column: "AssetId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetDeductDocDetail_AssetDeductId",
                table: "Asset_AssetDeductDocDetail",
                column: "AssetDeductId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetDeliverDocDetail_DeliverAssetId",
                table: "Asset_AssetDeliverDocDetail",
                column: "DeliverAssetId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetFixDocDetail_FixAssetId",
                table: "Asset_AssetFixDocDetail",
                column: "FixAssetId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetMoveDocDetail_AssetMovId",
                table: "Asset_AssetMoveDocDetail",
                column: "AssetMovId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetReceiveDocDetail_ReceiveAssetId",
                table: "Asset_AssetReceiveDocDetail",
                column: "ReceiveAssetId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_AssetSettingDetails_AssetSetId",
                table: "Asset_AssetSettingDetails",
                column: "AssetSetId");

            migrationBuilder.CreateIndex(
                name: "IX_Asset_DepreciationDocDetail_DeprDocId",
                table: "Asset_DepreciationDocDetail",
                column: "DeprDocId");

            migrationBuilder.CreateIndex(
                name: "IX_BNK_BankNoticeDetail_BankNoticId",
                table: "BNK_BankNoticeDetail",
                column: "BankNoticId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_AccChrtDailyAssist_AccountId",
                table: "Cal_AccChrtDailyAssist",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_AccountChart_Aid",
                table: "Cal_AccountChart",
                column: "Aid");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_AccountClaasiJoin_AccountId",
                table: "Cal_AccountClaasiJoin",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_AccountUsers_AccountId",
                table: "Cal_AccountUsers",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_AccountUsers_UserId",
                table: "Cal_AccountUsers",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_AssetAccounts_AssetId",
                table: "Cal_AssetAccounts",
                column: "AssetId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_BudgetDetails_BudgetId",
                table: "Cal_BudgetDetails",
                column: "BudgetId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_BusinessPartnerAccounts_BSPartnerId",
                table: "Cal_BusinessPartnerAccounts",
                column: "BSPartnerId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_CostCenterAccount_AccountId",
                table: "Cal_CostCenterAccount",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_CostCenterAccount_CostCenterId",
                table: "Cal_CostCenterAccount",
                column: "CostCenterId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_CustAccounts_CustomerId",
                table: "Cal_CustAccounts",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_EmpAccounts_AccountId",
                table: "Cal_EmpAccounts",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_EmpAccounts_EmpId",
                table: "Cal_EmpAccounts",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_JurnalDetail_CurrencyId",
                table: "Cal_JurnalDetail",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_JurnalDetail_JurnalId",
                table: "Cal_JurnalDetail",
                column: "JurnalId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_JurnalEntry_Aid",
                table: "Cal_JurnalEntry",
                column: "Aid");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_JurnalEntry_StorId",
                table: "Cal_JurnalEntry",
                column: "StorId");

            migrationBuilder.CreateIndex(
                name: "IX_Cal_VendAccounts_VendorId",
                table: "Cal_VendAccounts",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_AccountCategories_AId",
                table: "Cod_AccountCategories",
                column: "AId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_AccountClassification_AccountCatId",
                table: "Cod_AccountClassification",
                column: "AccountCatId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_City_RegionId",
                table: "Cod_City",
                column: "RegionId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_City_SysCityID",
                table: "Cod_City",
                column: "SysCityID");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_Country_CountryCode",
                table: "Cod_Country",
                column: "CountryCode");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_DailyAssistance_AccountId",
                table: "Cod_DailyAssistance",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_DailyAssistance_AId",
                table: "Cod_DailyAssistance",
                column: "AId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_InstallmentTempsDetail_InstallTempId",
                table: "Cod_InstallmentTempsDetail",
                column: "InstallTempId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_LandPermitActivJoin_LandId",
                table: "Cod_LandPermitActivJoin",
                column: "LandId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_LandPermitActivJoin_LandPermitActivId",
                table: "Cod_LandPermitActivJoin",
                column: "LandPermitActivId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_LandPosJoin_LandId",
                table: "Cod_LandPosJoin",
                column: "LandId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_LandPosJoin_LandPosId",
                table: "Cod_LandPosJoin",
                column: "LandPosId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_LandRetainResJoin_LandId",
                table: "Cod_LandRetainResJoin",
                column: "LandId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_LandRetainResJoin_LandRetainResId",
                table: "Cod_LandRetainResJoin",
                column: "LandRetainResId");

            migrationBuilder.CreateIndex(
                name: "IX_Cod_Region_CountryId",
                table: "Cod_Region",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_Contr_InstallMentDetail_InstallId",
                table: "Contr_InstallMentDetail",
                column: "InstallId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Leads_LeadTypeId",
                table: "CRM_Leads",
                column: "LeadTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Leads_MarketChannelId",
                table: "CRM_Leads",
                column: "MarketChannelId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_LeadsMembersDetails_LeadMemberId",
                table: "CRM_LeadsMembersDetails",
                column: "LeadMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_LeadsMembersJoin_LeadId",
                table: "CRM_LeadsMembersJoin",
                column: "LeadId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_LeadsMembersJoin_LeadMemberId",
                table: "CRM_LeadsMembersJoin",
                column: "LeadMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_SalesPlanDetail_SalesPlanId",
                table: "CRM_SalesPlanDetail",
                column: "SalesPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Survey_VisitTypeId",
                table: "CRM_Survey",
                column: "VisitTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_TeamMembers_TeamId",
                table: "CRM_TeamMembers",
                column: "TeamId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_Visits_VisitTypeId",
                table: "CRM_Visits",
                column: "VisitTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CRM_VisitSurveys_VisitId",
                table: "CRM_VisitSurveys",
                column: "VisitId");

            migrationBuilder.CreateIndex(
                name: "IX_G_USER_MODULE_UserId",
                table: "G_USER_MODULE",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_G_UserRolePermissions_UserRoleId",
                table: "G_UserRolePermissions",
                column: "UserRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_G_Users_UserRoleId",
                table: "G_Users",
                column: "UserRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_AcheivedTargetDetails_AcheivedTargetId",
                table: "HR_AcheivedTargetDetails",
                column: "AcheivedTargetId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_ActivityDetailElements_EmpActivityDetailId",
                table: "Hr_ActivityDetailElements",
                column: "EmpActivityDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_AttendDocDetails_AttendDocId",
                table: "Hr_AttendDocDetails",
                column: "AttendDocId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_AttendDocFactElements_AttendDocId",
                table: "Hr_AttendDocFactElements",
                column: "AttendDocId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Departments_ParentId",
                table: "Hr_Departments",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpActivityDetail_EmpActivityId",
                table: "Hr_EmpActivityDetail",
                column: "EmpActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpDocuments_EmpDocTypId",
                table: "Hr_EmpDocuments",
                column: "EmpDocTypId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpGroups_ParentId",
                table: "Hr_EmpGroups",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Employees_DepartMentId",
                table: "Hr_Employees",
                column: "DepartMentId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Employees_HREmpGroupId",
                table: "Hr_Employees",
                column: "HREmpGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Employees_JobId",
                table: "Hr_Employees",
                column: "JobId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Employees_PeriodTableId",
                table: "Hr_Employees",
                column: "PeriodTableId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Employees_ShiftId",
                table: "Hr_Employees",
                column: "ShiftId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpMovePromotDetail_EmpMoveId",
                table: "Hr_EmpMovePromotDetail",
                column: "EmpMoveId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpSalaryTypes_EmpId",
                table: "Hr_EmpSalaryTypes",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpSalaryTypes_SalaryTypId",
                table: "Hr_EmpSalaryTypes",
                column: "SalaryTypId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpsSalaryTemp_SalaryTypId",
                table: "Hr_EmpsSalaryTemp",
                column: "SalaryTypId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_EmpVacationsDetails_EmpVacId",
                table: "Hr_EmpVacationsDetails",
                column: "EmpVacId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_PeriodTableDetail_PeriodTableId",
                table: "Hr_PeriodTableDetail",
                column: "PeriodTableId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_PeriodTablePolicy_PeriodTableId",
                table: "Hr_PeriodTablePolicy",
                column: "PeriodTableId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_PeriodTableVacations_PeriodTableId",
                table: "Hr_PeriodTableVacations",
                column: "PeriodTableId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_SalaryIssueDetails_SalaryIssuDocId",
                table: "Hr_SalaryIssueDetails",
                column: "SalaryIssuDocId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_SalaryIssueDistribution_SalaryIssuDocId",
                table: "Hr_SalaryIssueDistribution",
                column: "SalaryIssuDocId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_Segments_SalaryTypId",
                table: "Hr_Segments",
                column: "SalaryTypId");

            migrationBuilder.CreateIndex(
                name: "IX_La_Lands_CustomerId",
                table: "La_Lands",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_La_PropSerial_CustMain",
                table: "La_PropSerial",
                column: "CustMain");

            migrationBuilder.CreateIndex(
                name: "IX_Mob_SalesInvoiceItemCard_InvId",
                table: "Mob_SalesInvoiceItemCard",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_BoxCurrency_AccountId",
                table: "MS_BoxCurrency",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_BoxCurrency_BoxId",
                table: "MS_BoxCurrency",
                column: "BoxId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_BoxCurrency_CurrencyId",
                table: "MS_BoxCurrency",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_BoxTransferDetail_BoxTranId",
                table: "MS_BoxTransferDetail",
                column: "BoxTranId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_BoxUsers_BoxId",
                table: "Ms_BoxUsers",
                column: "BoxId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_BoxUsers_UserId",
                table: "Ms_BoxUsers",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_BusinessPartners_BsPartnerCatId",
                table: "Ms_BusinessPartners",
                column: "BsPartnerCatId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_BusinessPartners_BsPartnerTypeId",
                table: "Ms_BusinessPartners",
                column: "BsPartnerTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_CashTransactionDetail_AdjustId",
                table: "MS_CashTransactionDetail",
                column: "AdjustId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_CashTransactionDetail_JurnalId",
                table: "MS_CashTransactionDetail",
                column: "JurnalId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_CashTransactionDetail_PayId",
                table: "MS_CashTransactionDetail",
                column: "PayId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_CashTransactionDetail_RectId",
                table: "MS_CashTransactionDetail",
                column: "RectId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CheqBooks_EmpId",
                table: "Ms_CheqBooks",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CurrencyCategoryJoin_CurrencyCategoryId",
                table: "Ms_CurrencyCategoryJoin",
                column: "CurrencyCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CurrencyCategoryJoin_CurrencyId",
                table: "Ms_CurrencyCategoryJoin",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CurrencyRate_CurrencyId",
                table: "Ms_CurrencyRate",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CusromerUsers_CustomerId",
                table: "Ms_CusromerUsers",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CusromerUsers_UserId",
                table: "Ms_CusromerUsers",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CustImgs_CustomerId",
                table: "Ms_CustImgs",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Customer_CurrencyId",
                table: "MS_Customer",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Customer_CustomerCatId",
                table: "MS_Customer",
                column: "CustomerCatId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Customer_CustomerTypeId",
                table: "MS_Customer",
                column: "CustomerTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CustomerBranches_CustomerId",
                table: "Ms_CustomerBranches",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CustomerContacts_CustomerId",
                table: "Ms_CustomerContacts",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_CustomersFollowUp_CustomerId",
                table: "Ms_CustomersFollowUp",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_DeliverItemCard_DeliverId",
                table: "Ms_DeliverItemCard",
                column: "DeliverId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_DeliverItemCard_ItemCardId",
                table: "Ms_DeliverItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_DeliverItemCard_UnitId",
                table: "Ms_DeliverItemCard",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_DeliverSalesInvoiceExpenses_DeliverId",
                table: "Ms_DeliverSalesInvoiceExpenses",
                column: "DeliverId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_DeliverSalesInvoiceMultiAccounts_DeliverId",
                table: "Ms_DeliverSalesInvoiceMultiAccounts",
                column: "DeliverId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemAlternatives_ItemCardId",
                table: "MS_ItemAlternatives",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemCard_ItemCategoryId",
                table: "MS_ItemCard",
                column: "ItemCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemCardDefaulPartitions_ItemCardId",
                table: "Ms_ItemCardDefaulPartitions",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemCardOffers_ItemCardId",
                table: "Ms_ItemCardOffers",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemCollection_ItemCardId",
                table: "Ms_ItemCollection",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemImages_ItemCardId",
                table: "MS_ItemImages",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemPartition_ItemCardId",
                table: "Ms_ItemPartition",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemPartition_StorePartId",
                table: "Ms_ItemPartition",
                column: "StorePartId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemPricintDetail_ItemPricintId",
                table: "Ms_ItemPricintDetail",
                column: "ItemPricintId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_DelivItemCardId",
                table: "MS_ItemSerials",
                column: "DelivItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_InvItemCardId",
                table: "MS_ItemSerials",
                column: "InvItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_OrderDetailItemCardId",
                table: "MS_ItemSerials",
                column: "OrderDetailItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_PurInvItemCardId",
                table: "MS_ItemSerials",
                column: "PurInvItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_RetItemCardId",
                table: "MS_ItemSerials",
                column: "RetItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_RetPurchItemCardId",
                table: "MS_ItemSerials",
                column: "RetPurchItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_StockAdjustItemId",
                table: "MS_ItemSerials",
                column: "StockAdjustItemId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_StockRecItemCardId",
                table: "MS_ItemSerials",
                column: "StockRecItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_TranReqItemCardId",
                table: "MS_ItemSerials",
                column: "TranReqItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemSerials_TrItenCardId",
                table: "MS_ItemSerials",
                column: "TrItenCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemStartQty_ItemCardId",
                table: "Ms_ItemStartQty",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemStockAdjustmentDetail_ItemCardId",
                table: "Ms_ItemStockAdjustmentDetail",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemStockAdjustmentDetail_StockAdjustId",
                table: "Ms_ItemStockAdjustmentDetail",
                column: "StockAdjustId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemUnit_BasUnitId",
                table: "Ms_ItemUnit",
                column: "BasUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemUnit_ItemCardId",
                table: "Ms_ItemUnit",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemUnitPackingJoin_PackSizeId",
                table: "Ms_ItemUnitPackingJoin",
                column: "PackSizeId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ItemUnitPackingJoin_UnitId",
                table: "Ms_ItemUnitPackingJoin",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemVendors_ItemCardId",
                table: "MS_ItemVendors",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ItemVendors_VendorId",
                table: "MS_ItemVendors",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_KeeperBankDetail_KeeperId",
                table: "Ms_KeeperBankDetail",
                column: "KeeperId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_LetterOfGuaranteeTrans_LetOfGrnteeId",
                table: "Ms_LetterOfGuaranteeTrans",
                column: "LetOfGrnteeId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Partition_StoreId",
                table: "MS_Partition",
                column: "StoreId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PaymentNote_BoxId",
                table: "MS_PaymentNote",
                column: "BoxId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PaymentNote_PurInvId",
                table: "MS_PaymentNote",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PaymentNote_RetSaleId",
                table: "MS_PaymentNote",
                column: "RetSaleId");

            migrationBuilder.CreateIndex(
                name: "StopDoubleTrNoPayment",
                table: "MS_PaymentNote",
                columns: new[] { "TrNo", "BookId" },
                unique: true,
                filter: "[BookId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PaymentNoteCurrencies_PayId",
                table: "Ms_PaymentNoteCurrencies",
                column: "PayId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PaymentNoteItems_PayId",
                table: "Ms_PaymentNoteItems",
                column: "PayId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PettyCashDetails_PettycashId",
                table: "MS_PettyCashDetails",
                column: "PettycashId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PettyPaymentJoin_PayId",
                table: "Ms_PettyPaymentJoin",
                column: "PayId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PettyPaymentJoin_PettycashId",
                table: "Ms_PettyPaymentJoin",
                column: "PettycashId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PurchaseInvoiceCostReceived_PurInvId",
                table: "Ms_PurchaseInvoiceCostReceived",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchaseInvoiceExpenses_PurInvId",
                table: "MS_PurchaseInvoiceExpenses",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchaseInvoiceItemCard_ItemCardId",
                table: "MS_PurchaseInvoiceItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchaseInvoiceItemCard_PurInvId",
                table: "MS_PurchaseInvoiceItemCard",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchaseInvoiceItemCard_UnitId",
                table: "MS_PurchaseInvoiceItemCard",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchasInvoice_PurOrderId",
                table: "MS_PurchasInvoice",
                column: "PurOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchasInvoice_TaxesId1",
                table: "MS_PurchasInvoice",
                column: "TaxesId1");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchasInvoiceCurrencies_PurInvId",
                table: "MS_PurchasInvoiceCurrencies",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchasInvoiceMultiAccounts_PurInvId",
                table: "MS_PurchasInvoiceMultiAccounts",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PurchInvVehicleJobOrderJoin_PurInvId",
                table: "Ms_PurchInvVehicleJobOrderJoin",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_PurchInvVehicleJobOrderJoin_VJOrderId",
                table: "Ms_PurchInvVehicleJobOrderJoin",
                column: "VJOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchOrderDetail_ItemCardId",
                table: "MS_PurchOrderDetail",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchOrderDetail_PurOrderId",
                table: "MS_PurchOrderDetail",
                column: "PurOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_PurchOrderReqDetail_PurOrderReqId",
                table: "MS_PurchOrderReqDetail",
                column: "PurOrderReqId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ReceiptNote_BoxId",
                table: "Ms_ReceiptNote",
                column: "BoxId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ReceiptNote_InvId",
                table: "Ms_ReceiptNote",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ReceiptNote_RetPurId",
                table: "Ms_ReceiptNote",
                column: "RetPurId");

            migrationBuilder.CreateIndex(
                name: "StopDoubleTrNo",
                table: "Ms_ReceiptNote",
                columns: new[] { "TrNo", "BookId" },
                unique: true,
                filter: "[BookId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ReceiptNoteCurrencies_RectId",
                table: "Ms_ReceiptNoteCurrencies",
                column: "RectId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnPurchaseCurrencies_RetPurchId",
                table: "MS_ReturnPurchaseCurrencies",
                column: "RetPurchId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ReturnPurchaseExpenses_RetPurchId",
                table: "Ms_ReturnPurchaseExpenses",
                column: "RetPurchId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnPurchaseItem_ItemCardId",
                table: "MS_ReturnPurchaseItem",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnPurchaseItem_RetPurchId",
                table: "MS_ReturnPurchaseItem",
                column: "RetPurchId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnPurchaseItem_UnitId",
                table: "MS_ReturnPurchaseItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnPurchaseMultiAccounts_RetPurchId",
                table: "MS_ReturnPurchaseMultiAccounts",
                column: "RetPurchId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnSalesCurrencies_RetSaleId",
                table: "MS_ReturnSalesCurrencies",
                column: "RetSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_ReturnSalesExpenses_RetSaleId",
                table: "Ms_ReturnSalesExpenses",
                column: "RetSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnSalesItemCard_ItemCardId",
                table: "MS_ReturnSalesItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnSalesItemCard_RetSaleId",
                table: "MS_ReturnSalesItemCard",
                column: "RetSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnSalesItemCard_UnitId",
                table: "MS_ReturnSalesItemCard",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_ReturnSalesMultiAccounts_RetSaleId",
                table: "MS_ReturnSalesMultiAccounts",
                column: "RetSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvJobOrderJoin_InvId",
                table: "Ms_SalesInvJobOrderJoin",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvJobOrderJoin_JobOrderId",
                table: "Ms_SalesInvJobOrderJoin",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoice_SalesOfferId",
                table: "Ms_SalesInvoice",
                column: "SalesOfferId");

            migrationBuilder.CreateIndex(
                name: "StoreIdIndex",
                table: "Ms_SalesInvoice",
                column: "StoreId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceCostDeliver_InvId",
                table: "Ms_SalesInvoiceCostDeliver",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceCurrencies_InvId",
                table: "Ms_SalesInvoiceCurrencies",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceExpenses_InvId",
                table: "Ms_SalesInvoiceExpenses",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "Inv",
                table: "Ms_SalesInvoiceItemCard",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceItemCard_ItemCardId",
                table: "Ms_SalesInvoiceItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceItemCard_UnitId",
                table: "Ms_SalesInvoiceItemCard",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceMultiAccounts_InvId",
                table: "Ms_SalesInvoiceMultiAccounts",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceQualityDeliveryDocs_InvId",
                table: "Ms_SalesInvoiceQualityDeliveryDocs",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvoiceQualityMissedItems_InvId",
                table: "Ms_SalesInvoiceQualityMissedItems",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvVehiclJobOrderJoin_InvId",
                table: "Ms_SalesInvVehiclJobOrderJoin",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesInvVehiclJobOrderJoin_VJOrderId",
                table: "Ms_SalesInvVehiclJobOrderJoin",
                column: "VJOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesItemsOffersDetails_PromoOfferId",
                table: "Ms_SalesItemsOffersDetails",
                column: "PromoOfferId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesOfferItemCard_ItemCardId",
                table: "Ms_SalesOfferItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesOfferItemCard_SalesOfferId",
                table: "Ms_SalesOfferItemCard",
                column: "SalesOfferId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesOfferItemRequest_SalesOfferReqId",
                table: "Ms_SalesOfferItemRequest",
                column: "SalesOfferReqId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_SalesOrderItemCard_SalesOrderId",
                table: "Ms_SalesOrderItemCard",
                column: "SalesOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockReceiptItemCard_ItemCardId",
                table: "MS_StockReceiptItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockReceiptItemCard_StockRecId",
                table: "MS_StockReceiptItemCard",
                column: "StockRecId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockReceiptItemCard_UnitId",
                table: "MS_StockReceiptItemCard",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockRecriptExpenses_StockRecId",
                table: "MS_StockRecriptExpenses",
                column: "StockRecId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockRecriptMultiAccounts_StockRecId",
                table: "MS_StockRecriptMultiAccounts",
                column: "StockRecId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockTranItemCard_ItemCardId",
                table: "MS_StockTranItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockTranItemCard_TranId",
                table: "MS_StockTranItemCard",
                column: "TranId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_StockTranItemCard_UnitId",
                table: "MS_StockTranItemCard",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_StockTranItemCardReq_TranReqId",
                table: "Ms_StockTranItemCardReq",
                column: "TranReqId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Stores_BoxId",
                table: "MS_Stores",
                column: "BoxId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_TermsCostCenter_TermId",
                table: "Ms_TermsCostCenter",
                column: "TermId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_TermsDetails_TermId",
                table: "Ms_TermsDetails",
                column: "TermId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_VendImgs_VendorId",
                table: "Ms_VendImgs",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Vendor_CurrencyId",
                table: "MS_Vendor",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Vendor_VendorCatId",
                table: "MS_Vendor",
                column: "VendorCatId");

            migrationBuilder.CreateIndex(
                name: "IX_MS_Vendor_VendorTypeId",
                table: "MS_Vendor",
                column: "VendorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_VendorBranches_VendorId",
                table: "Ms_VendorBranches",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_VendorContacts_VendorId",
                table: "Ms_VendorContacts",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_VendorUsers_UserId",
                table: "Ms_VendorUsers",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_VendorUsers_VendorId",
                table: "Ms_VendorUsers",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_Ms_WeightcardItems_ScaleCardId",
                table: "Ms_WeightcardItems",
                column: "ScaleCardId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_LetterExportDetail_LetterExportId",
                table: "MsGA_LetterExportDetail",
                column: "LetterExportId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_LetterFayumDetail_LetterFayumId",
                table: "MsGA_LetterFayumDetail",
                column: "LetterFayumId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_LetterNormalDetail_LetterNormId",
                table: "MsGA_LetterNormalDetail",
                column: "LetterNormId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_MotorSNDetail_LetterFayumId",
                table: "MsGA_MotorSNDetail",
                column: "LetterFayumId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_MotorSNDetail_LetterNormId",
                table: "MsGA_MotorSNDetail",
                column: "LetterNormId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_MotorSNDetail_MotorDocId",
                table: "MsGA_MotorSNDetail",
                column: "MotorDocId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_PeriodicBookDetail_LetterNormId",
                table: "MsGA_PeriodicBookDetail",
                column: "LetterNormId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_PeriodicBookDetail_PeriodicBookId",
                table: "MsGA_PeriodicBookDetail",
                column: "PeriodicBookId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_ShipmentDetail_LetterExportId",
                table: "MsGA_ShipmentDetail",
                column: "LetterExportId");

            migrationBuilder.CreateIndex(
                name: "IX_MsGA_ShipmentDetail_ShipMentId",
                table: "MsGA_ShipmentDetail",
                column: "ShipMentId");

            migrationBuilder.CreateIndex(
                name: "IX_Print_PricingDetails_PrinPriceId",
                table: "Print_PricingDetails",
                column: "PrinPriceId");

            migrationBuilder.CreateIndex(
                name: "IX_Print_QoutationDetails_PrinQoutId",
                table: "Print_QoutationDetails",
                column: "PrinQoutId");

            migrationBuilder.CreateIndex(
                name: "IX_Print_QoutationDetailsItems_PrinQoutDetailId",
                table: "Print_QoutationDetailsItems",
                column: "PrinQoutDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_AttributeValue_AttributId",
                table: "Prod_AttributeValue",
                column: "AttributId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_BasicUnits_ParentUnit",
                table: "Prod_BasicUnits",
                column: "ParentUnit");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_BillOfMaterialItems_BillOfMaterialId",
                table: "Prod_BillOfMaterialItems",
                column: "BillOfMaterialId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_BillOfMaterialSecondaryItems_BillOfMaterialId",
                table: "Prod_BillOfMaterialSecondaryItems",
                column: "BillOfMaterialId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_EmpEquipDistribDetail_EmpEquipDistId",
                table: "Prod_EmpEquipDistribDetail",
                column: "EmpEquipDistId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_EmpJobOrderDistribDetail_EmpJobOrderDistId",
                table: "Prod_EmpJobOrderDistribDetail",
                column: "EmpJobOrderDistId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_EquipProfile_EquipId",
                table: "Prod_EquipProfile",
                column: "EquipId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ItemAttributesBatchesDetails_ItemAtrribBatchId",
                table: "Prod_ItemAttributesBatchesDetails",
                column: "ItemAtrribBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ItemAttributsJoin_AttributId",
                table: "Prod_ItemAttributsJoin",
                column: "AttributId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ItemAttributsJoin_ItemCardId",
                table: "Prod_ItemAttributsJoin",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ItemBatchPartition_ItemAtrribBatchId",
                table: "Prod_ItemBatchPartition",
                column: "ItemAtrribBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ItemcardExpenses_ItemCardId",
                table: "Prod_ItemcardExpenses",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderEmpCostDocDetail_JOrderEmpDocId",
                table: "Prod_JobOrderEmpCostDocDetail",
                column: "JOrderEmpDocId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderEquipCostDocDetail_JOrderEquipDocId",
                table: "Prod_JobOrderEquipCostDocDetail",
                column: "JOrderEquipDocId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderEquipment_JobOrderId",
                table: "Prod_JobOrderEquipment",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderExpenses_JobOrderId",
                table: "Prod_JobOrderExpenses",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderGoStock_JobOrderId",
                table: "Prod_JobOrderGoStock",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderJobs_JobOrderId",
                table: "Prod_JobOrderJobs",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderMaterials_JobOrderId",
                table: "Prod_JobOrderMaterials",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderProducts_ItemAtrribBatchId",
                table: "Prod_JobOrderProducts",
                column: "ItemAtrribBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderProducts_ItemCardId",
                table: "Prod_JobOrderProducts",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderProducts_JobOrderId",
                table: "Prod_JobOrderProducts",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderPurchaseInvoices_JobOrderId",
                table: "Prod_JobOrderPurchaseInvoices",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderPurchaseInvoices_PurInvId",
                table: "Prod_JobOrderPurchaseInvoices",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderScrap_JobOrderId",
                table: "Prod_JobOrderScrap",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderServices_JobOrderId",
                table: "Prod_JobOrderServices",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderTasks_JobOrderId",
                table: "Prod_JobOrderTasks",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JobOrderWorkFlow_JobOrderId",
                table: "Prod_JobOrderWorkFlow",
                column: "JobOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JoinTaskEquipments_TaskId",
                table: "Prod_JoinTaskEquipments",
                column: "TaskId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_JoinTaskJob_TaskId",
                table: "Prod_JoinTaskJob",
                column: "TaskId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ProductionLineDetails_ProLineId",
                table: "Prod_ProductionLineDetails",
                column: "ProLineId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_ProductionOrderDetail_ProductionOrderId",
                table: "Prod_ProductionOrderDetail",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_RecipeDetail_RecipeId",
                table: "Prod_RecipeDetail",
                column: "RecipeId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_WorkOrderEquipment_WorkOrderId",
                table: "Prod_WorkOrderEquipment",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_WorkOrderExpenses_WorkOrderId",
                table: "Prod_WorkOrderExpenses",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_WorkOrderItemRecQualityDocs_WorkOrderId",
                table: "Prod_WorkOrderItemRecQualityDocs",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_WorkOrderMaterials_WorkOrderId",
                table: "Prod_WorkOrderMaterials",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_WorkOrderProdItems_WorkOrderId",
                table: "Prod_WorkOrderProdItems",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Prod_WorkOrderServices_WorkOrderId",
                table: "Prod_WorkOrderServices",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_Accounts_ProjectId",
                table: "Proj_Accounts",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_EstimateItems_ProjectId",
                table: "Proj_EstimateItems",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_Expenses_ProjectId",
                table: "Proj_Expenses",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_Fund_ProjectId",
                table: "Proj_Fund",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjDocuments_OwnShipBondId",
                table: "Proj_ProjDocuments",
                column: "OwnShipBondId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjDocuments_ProjectId",
                table: "Proj_ProjDocuments",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Pro__9C4B07173ED718FB",
                table: "Proj_ProjDocuments",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjectItemEmpJoin_EmpId",
                table: "Proj_ProjectItemEmpJoin",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjectItemEmpJoin_ProjItemsJoinId",
                table: "Proj_ProjectItemEmpJoin",
                column: "ProjItemsJoinId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjectItemsJoin_ProjectId",
                table: "Proj_ProjectItemsJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjectItemsJoin_ProjectItemsId",
                table: "Proj_ProjectItemsJoin",
                column: "ProjectItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjectItemsVendors_ProjectItemsId",
                table: "Proj_ProjectItemsVendors",
                column: "ProjectItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjectItemsVendors_VendorId",
                table: "Proj_ProjectItemsVendors",
                column: "VendorId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjExploitJoin_BuildExploitId",
                table: "Proj_ProjExploitJoin",
                column: "BuildExploitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjExploitJoin_ProjectId",
                table: "Proj_ProjExploitJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjInsurance_BuildInsurStatId",
                table: "Proj_ProjInsurance",
                column: "BuildInsurStatId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjInsurance_ProjectId",
                table: "Proj_ProjInsurance",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjInsuranceUnit_InsurCaseId",
                table: "Proj_ProjInsuranceUnit",
                column: "InsurCaseId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjInsuranceUnit_ProjUnitId",
                table: "Proj_ProjInsuranceUnit",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjInsuranceUnit_UnitInsurstatId",
                table: "Proj_ProjInsuranceUnit",
                column: "UnitInsurstatId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjItemEmpTaskJoin_ProjItemEmpId",
                table: "Proj_ProjItemEmpTaskJoin",
                column: "ProjItemEmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjItemEmpTaskJoin_TaskId",
                table: "Proj_ProjItemEmpTaskJoin",
                column: "TaskId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjOccupTypeJoin_BuildOccupTypeId",
                table: "Proj_ProjOccupTypeJoin",
                column: "BuildOccupTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjOccupTypeJoin_ProjectId",
                table: "Proj_ProjOccupTypeJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjOwnerJoin_ProjectId",
                table: "Proj_ProjOwnerJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjParkingJoin_ParkingId",
                table: "Proj_ProjParkingJoin",
                column: "ParkingId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjParkingJoin_ProjectId",
                table: "Proj_ProjParkingJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjPermitActivityJoin_BuildPermitActivityId",
                table: "Proj_ProjPermitActivityJoin",
                column: "BuildPermitActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjPermitActivityJoin_ProjectId",
                table: "Proj_ProjPermitActivityJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjPerspectiveJoin_BuildPerspectiveId",
                table: "Proj_ProjPerspectiveJoin",
                column: "BuildPerspectiveId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjPerspectiveJoin_ProjectId",
                table: "Proj_ProjPerspectiveJoin",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Pro__9C4B07178AD73A3B",
                table: "Proj_ProjPerspectiveJoin",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjPicture_ProjectId",
                table: "Proj_ProjPicture",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Pro__9C4B071785FAAD21",
                table: "Proj_ProjPicture",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitDocument_OwnShipBondId",
                table: "Proj_ProjUnitDocument",
                column: "OwnShipBondId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitDocument_ProjUnitId",
                table: "Proj_ProjUnitDocument",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Pro__9C4B07170092463A",
                table: "Proj_ProjUnitDocument",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitExploitJoin_ProjUnitId",
                table: "Proj_ProjUnitExploitJoin",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitExploitJoin_UnitExploitId",
                table: "Proj_ProjUnitExploitJoin",
                column: "UnitExploitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitInstallTemp_InstallTempId",
                table: "Proj_ProjUnitInstallTemp",
                column: "InstallTempId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitInstallTemp_ProjUnitId",
                table: "Proj_ProjUnitInstallTemp",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitOccupTypeJoin_ProjUnitId",
                table: "Proj_ProjUnitOccupTypeJoin",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitOccupTypeJoin_UnitOccuTypeId",
                table: "Proj_ProjUnitOccupTypeJoin",
                column: "UnitOccuTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitOwnerJoin_ProjUnitId",
                table: "Proj_ProjUnitOwnerJoin",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitPermitActivityJoin_ProjUnitId",
                table: "Proj_ProjUnitPermitActivityJoin",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitPermitActivityJoin_UnitPermitActivId",
                table: "Proj_ProjUnitPermitActivityJoin",
                column: "UnitPermitActivId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitPerspectiveJoin_ProjUnitId",
                table: "Proj_ProjUnitPerspectiveJoin",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitPerspectiveJoin_UnitPerspectiveId",
                table: "Proj_ProjUnitPerspectiveJoin",
                column: "UnitPerspectiveId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Pro__9C4B07177DDE556F",
                table: "Proj_ProjUnitPerspectiveJoin",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitPicture_ProjUnitId",
                table: "Proj_ProjUnitPicture",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Pro__9C4B07174432347E",
                table: "Proj_ProjUnitPicture",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnits_ProjectId",
                table: "Proj_ProjUnits",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitService_ProjUnitId",
                table: "Proj_ProjUnitService",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitService_ReservId",
                table: "Proj_ProjUnitService",
                column: "ReservId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitService_UnitServId",
                table: "Proj_ProjUnitService",
                column: "UnitServId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitSubUnits_ProjUnitId",
                table: "Proj_ProjUnitSubUnits",
                column: "ProjUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ProjUnitSubUnits_SubUnittypeId",
                table: "Proj_ProjUnitSubUnits",
                column: "SubUnittypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_RealItems_ProjectId",
                table: "Proj_RealItems",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ReserveUnitDocuments_ReservId",
                table: "Proj_ReserveUnitDocuments",
                column: "ReservId");

            migrationBuilder.CreateIndex(
                name: "UQ__Proj_Res__9C4B0717908FFF11",
                table: "Proj_ReserveUnitDocuments",
                column: "FSId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ReserveUnitOwners_ReservId",
                table: "Proj_ReserveUnitOwners",
                column: "ReservId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ReserveUnitSellers_ReservId",
                table: "Proj_ReserveUnitSellers",
                column: "ReservId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_ReservInstallments_ReservId",
                table: "Proj_ReservInstallments",
                column: "ReservId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractAdds_TenderContractId",
                table: "Proj_TenderContractAdds",
                column: "TenderContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractDetail_TenderContractId",
                table: "Proj_TenderContractDetail",
                column: "TenderContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractDiscounts_TenderContractId",
                table: "Proj_TenderContractDiscounts",
                column: "TenderContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractorContractAdds_ContractorContractId",
                table: "Proj_TenderContractorContractAdds",
                column: "ContractorContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractorContractDetails_ContractorContractId",
                table: "Proj_TenderContractorContractDetails",
                column: "ContractorContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractorContractDiscounts_ContractorContractId",
                table: "Proj_TenderContractorContractDiscounts",
                column: "ContractorContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractorExitractAdds_ContractorExitractId",
                table: "Proj_TenderContractorExitractAdds",
                column: "ContractorExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractorExitractDetail_ContractorExitractId",
                table: "Proj_TenderContractorExitractDetail",
                column: "ContractorExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderContractorExitractDiscounts_ContractorExitractId",
                table: "Proj_TenderContractorExitractDiscounts",
                column: "ContractorExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderExecutionExitractDetail_ExecutExitractId",
                table: "Proj_TenderExecutionExitractDetail",
                column: "ExecutExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderOfferDetail_TenderOfferId",
                table: "Proj_TenderOfferDetail",
                column: "TenderOfferId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderOwnerExitractAdds_OwnerExitractId",
                table: "Proj_TenderOwnerExitractAdds",
                column: "OwnerExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderOwnerExitractDetail_OwnerExitractId",
                table: "Proj_TenderOwnerExitractDetail",
                column: "OwnerExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderOwnerExitractDiscounts_OwnerExitractId",
                table: "Proj_TenderOwnerExitractDiscounts",
                column: "OwnerExitractId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderPlanDetails_TenderPlanId",
                table: "Proj_TenderPlanDetails",
                column: "TenderPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderPlanDistributionDetails_TenderPlanDistId",
                table: "Proj_TenderPlanDistributionDetails",
                column: "TenderPlanDistId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TenderQoutationDetails_TenderQoutationId",
                table: "Proj_TenderQoutationDetails",
                column: "TenderQoutationId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_TendersDetails_TenderId",
                table: "Proj_TendersDetails",
                column: "TenderId");

            migrationBuilder.CreateIndex(
                name: "IX_Proj_UnitReservationGuarantors_ReservId",
                table: "Proj_UnitReservationGuarantors",
                column: "ReservId");

            migrationBuilder.CreateIndex(
                name: "IX_Quality_ItemDeliverDetails_ItemDeliverId",
                table: "Quality_ItemDeliverDetails",
                column: "ItemDeliverId");

            migrationBuilder.CreateIndex(
                name: "IX_Quality_ItemDeliveryPackages_ItemDeliverId",
                table: "Quality_ItemDeliveryPackages",
                column: "ItemDeliverId");

            migrationBuilder.CreateIndex(
                name: "IX_Quality_ItemRecCheckDetail_ItemRecQualityId",
                table: "Quality_ItemRecCheckDetail",
                column: "ItemRecQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_Quality_ItemRecieveDetails_ProdItemRecId",
                table: "Quality_ItemRecieveDetails",
                column: "ProdItemRecId");

            migrationBuilder.CreateIndex(
                name: "IX_Quality_ItemRecPackages_ItemRecQualityId",
                table: "Quality_ItemRecPackages",
                column: "ItemRecQualityId");

            migrationBuilder.CreateIndex(
                name: "IX_Quality_ItemRecPackages_WorkOrderId",
                table: "Quality_ItemRecPackages",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Repair_JobOrderComments_RepairId",
                table: "Repair_JobOrderComments",
                column: "RepairId");

            migrationBuilder.CreateIndex(
                name: "IX_Repair_JobOrderEmps_RepairId",
                table: "Repair_JobOrderEmps",
                column: "RepairId");

            migrationBuilder.CreateIndex(
                name: "IX_Repair_JobOrderItems_RepairId",
                table: "Repair_JobOrderItems",
                column: "RepairId");

            migrationBuilder.CreateIndex(
                name: "IX_Repair_JobOrderScrapItems_RepairId",
                table: "Repair_JobOrderScrapItems",
                column: "RepairId");

            migrationBuilder.CreateIndex(
                name: "IX_Repair_JobOrederExpenses_RepairId",
                table: "Repair_JobOrederExpenses",
                column: "RepairId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Accomodation_HotelId",
                table: "Sr_Accomodation",
                column: "HotelId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Accomodation_TripId",
                table: "Sr_Accomodation",
                column: "TripId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_EmpServicTypes_EmpId",
                table: "Sr_EmpServicTypes",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_EmpServicTypes_SrTypID",
                table: "Sr_EmpServicTypes",
                column: "SrTypID");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Extension_CityID",
                table: "Sr_Extension",
                column: "CityID");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Extension_HotelId",
                table: "Sr_Extension",
                column: "HotelId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Extension_TripId",
                table: "Sr_Extension",
                column: "TripId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Flight_TripId",
                table: "Sr_Flight",
                column: "TripId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Hotels_CityID",
                table: "Sr_Hotels",
                column: "CityID");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobAdditionalCost_JorderId",
                table: "Sr_JobAdditionalCost",
                column: "JorderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobComments_JorderId",
                table: "Sr_JobComments",
                column: "JorderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobExtrnalExpens_JorderId",
                table: "Sr_JobExtrnalExpens",
                column: "JorderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobFiles_JorderId",
                table: "Sr_JobFiles",
                column: "JorderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobOrder_ReciptionId",
                table: "Sr_JobOrder",
                column: "ReciptionId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobOrder_SrTypID",
                table: "Sr_JobOrder",
                column: "SrTypID");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobOrder_VehicleId",
                table: "Sr_JobOrder",
                column: "VehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobSparts_JorderId",
                table: "Sr_JobSparts",
                column: "JorderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_JobSWages_JorderId",
                table: "Sr_JobSWages",
                column: "JorderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_ReceptionImages_ReciptionId",
                table: "Sr_ReceptionImages",
                column: "ReciptionId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_ReciptionDetail_ComID",
                table: "Sr_ReciptionDetail",
                column: "ComID");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_ReciptionDetail_ReciptionId",
                table: "Sr_ReciptionDetail",
                column: "ReciptionId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_ServiceDistributionDetails_SerDistId",
                table: "Sr_ServiceDistributionDetails",
                column: "SerDistId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TaskEmp_EmpId",
                table: "Sr_TaskEmp",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TaskEmp_TaskId",
                table: "Sr_TaskEmp",
                column: "TaskId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TaskItem_ItemCardId",
                table: "Sr_TaskItem",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TaskItem_TaskId",
                table: "Sr_TaskItem",
                column: "TaskId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Tasks_ComID",
                table: "Sr_Tasks",
                column: "ComID");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TrafficLinePriceList_ContainerTypeId",
                table: "Sr_TrafficLinePriceList",
                column: "ContainerTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TrafficLinePriceList_TrafficLineId",
                table: "Sr_TrafficLinePriceList",
                column: "TrafficLineId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TrafficLinePriceList_VehicleId",
                table: "Sr_TrafficLinePriceList",
                column: "VehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Transportation_TripId",
                table: "Sr_Transportation",
                column: "TripId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TripAccomDetail_AccomodationId",
                table: "Sr_TripAccomDetail",
                column: "AccomodationId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TripProgramJoin_ProgramId",
                table: "Sr_TripProgramJoin",
                column: "ProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_TripProgramJoin_TripId",
                table: "Sr_TripProgramJoin",
                column: "TripId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleItemCard_ItemCardId",
                table: "Sr_VehicleItemCard",
                column: "ItemCardId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleJobOrder_VehicleId",
                table: "Sr_VehicleJobOrder",
                column: "VehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleJobOrder_VOrderTypeId",
                table: "Sr_VehicleJobOrder",
                column: "VOrderTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleJobOrderDetail_DriverId",
                table: "Sr_VehicleJobOrderDetail",
                column: "DriverId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleJobOrderDetail_VJOrderId",
                table: "Sr_VehicleJobOrderDetail",
                column: "VJOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleMovementDetails_VehiclMovId",
                table: "Sr_VehicleMovementDetails",
                column: "VehiclMovId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentPayJoin_PayId",
                table: "Sr_VehicleRentPayJoin",
                column: "PayId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentPayJoin_VRentContractId",
                table: "Sr_VehicleRentPayJoin",
                column: "VRentContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentPurchJoin_PurInvId",
                table: "Sr_VehicleRentPurchJoin",
                column: "PurInvId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentPurchJoin_VRentContractId",
                table: "Sr_VehicleRentPurchJoin",
                column: "VRentContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentRecJoin_RectId",
                table: "Sr_VehicleRentRecJoin",
                column: "RectId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentRecJoin_VRentContractId",
                table: "Sr_VehicleRentRecJoin",
                column: "VRentContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentSalesInvJoin_InvId",
                table: "Sr_VehicleRentSalesInvJoin",
                column: "InvId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_VehicleRentSalesInvJoin_VRentContractId",
                table: "Sr_VehicleRentSalesInvJoin",
                column: "VRentContractId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Vehicles_GarageId",
                table: "Sr_Vehicles",
                column: "GarageId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Vehicles_VehicleShapeId",
                table: "Sr_Vehicles",
                column: "VehicleShapeId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Vehicles_VehicleTypId",
                table: "Sr_Vehicles",
                column: "VehicleTypId");

            migrationBuilder.CreateIndex(
                name: "IX_Sr_Vehicles_WId",
                table: "Sr_Vehicles",
                column: "WId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_CapitalUpdate_StockId",
                table: "Stock_CapitalUpdate",
                column: "StockId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_OpenningBalanceDetails_StockOpenId",
                table: "Stock_OpenningBalanceDetails",
                column: "StockOpenId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_PortfolioAccounts_AccountId",
                table: "Stock_PortfolioAccounts",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_PortfolioAccounts_StockPortfolioId",
                table: "Stock_PortfolioAccounts",
                column: "StockPortfolioId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_PortfolioStockArchives_StockArchId",
                table: "Stock_PortfolioStockArchives",
                column: "StockArchId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_PortfolioStockArchives_StockPortJoinId",
                table: "Stock_PortfolioStockArchives",
                column: "StockPortJoinId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_PortfolioStocks_StockId",
                table: "Stock_PortfolioStocks",
                column: "StockId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_PortfolioStocks_StockPortfolioId",
                table: "Stock_PortfolioStocks",
                column: "StockPortfolioId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_SalesPurchaseDetails_StockSalPurchId",
                table: "Stock_SalesPurchaseDetails",
                column: "StockSalPurchId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_Stocks_StockCatId",
                table: "Stock_Stocks",
                column: "StockCatId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_Stocks_StockMarketId",
                table: "Stock_Stocks",
                column: "StockMarketId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_Stocks_StockSectorsId",
                table: "Stock_Stocks",
                column: "StockSectorsId");

            migrationBuilder.CreateIndex(
                name: "IX_Stock_TransferDetail_StockTransferId",
                table: "Stock_TransferDetail",
                column: "StockTransferId");

            migrationBuilder.CreateIndex(
                name: "IX_sys_AnalyticalCodeProccess_AId",
                table: "sys_AnalyticalCodeProccess",
                column: "AId");

            migrationBuilder.CreateIndex(
                name: "IX_sys_AnalyticalCodeUpdates_AId",
                table: "sys_AnalyticalCodeUpdates",
                column: "AId");

            migrationBuilder.CreateIndex(
                name: "IX_Sys_FinancialIntervals_FinancialYearId",
                table: "Sys_FinancialIntervals",
                column: "FinancialYearId");

            migrationBuilder.CreateIndex(
                name: "IX_Sys_RemotLogDetail_LogId",
                table: "Sys_RemotLogDetail",
                column: "LogId");

            migrationBuilder.CreateIndex(
                name: "IX_SysRemoteBranchesLogDetaile_LogId",
                table: "SysRemoteBranchesLogDetaile",
                column: "LogId");

            migrationBuilder.CreateIndex(
                name: "IX_Tr_OpenningBalanceDetails_Tr_OpenningBalanceId",
                table: "Tr_OpenningBalanceDetails",
                column: "Tr_OpenningBalanceId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkForc_BloodExecludeDetails_BloodExecludId",
                table: "WorkForc_BloodExecludeDetails",
                column: "BloodExecludId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkForc_FirstCustExecludeDetail_ExecludId",
                table: "WorkForc_FirstCustExecludeDetail",
                column: "ExecludId");

            migrationBuilder.CreateIndex(
                name: "Code_UniqueCode",
                table: "WorkForc_PassPorts",
                column: "Code",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_WorkForc_SecondCustExecludeDetail_ScndExecludId",
                table: "WorkForc_SecondCustExecludeDetail",
                column: "ScndExecludId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkForc_TemplatesDetails_WFTempId",
                table: "WorkForc_TemplatesDetails",
                column: "WFTempId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkForc_TestResultsDetails_TestResultId",
                table: "WorkForc_TestResultsDetails",
                column: "TestResultId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "An_AnimalDeathDetail");

            migrationBuilder.DropTable(
                name: "An_ANimalMidicin");

            migrationBuilder.DropTable(
                name: "An_AnimalWeightRateDetail");

            migrationBuilder.DropTable(
                name: "An_NewBornDetail");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Asset_AssetAddDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_AssetContacts");

            migrationBuilder.DropTable(
                name: "Asset_AssetDeductDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_AssetDeliverDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_AssetFixDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_AssetMoveDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_AssetReceiveDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_AssetSettingDetails");

            migrationBuilder.DropTable(
                name: "Asset_DepreciationDocDetail");

            migrationBuilder.DropTable(
                name: "Asset_Termination");

            migrationBuilder.DropTable(
                name: "BNK_BankNoticeDetail");

            migrationBuilder.DropTable(
                name: "Cal_AccChrtDailyAssist");

            migrationBuilder.DropTable(
                name: "Cal_AccountClaasiJoin");

            migrationBuilder.DropTable(
                name: "Cal_AccountingFix");

            migrationBuilder.DropTable(
                name: "Cal_AccountUsers");

            migrationBuilder.DropTable(
                name: "Cal_AssetAccounts");

            migrationBuilder.DropTable(
                name: "Cal_BudgetDetails");

            migrationBuilder.DropTable(
                name: "Cal_BusinessPartnerAccounts");

            migrationBuilder.DropTable(
                name: "Cal_CostCenterAccount");

            migrationBuilder.DropTable(
                name: "Cal_CustAccounts");

            migrationBuilder.DropTable(
                name: "Cal_EmpAccounts");

            migrationBuilder.DropTable(
                name: "Cal_JurnalDetail");

            migrationBuilder.DropTable(
                name: "Cal_PostOrder");

            migrationBuilder.DropTable(
                name: "Cal_QueueOrder");

            migrationBuilder.DropTable(
                name: "Cal_VendAccounts");

            migrationBuilder.DropTable(
                name: "Cod_AccountClassification");

            migrationBuilder.DropTable(
                name: "Cod_BuildingDegree");

            migrationBuilder.DropTable(
                name: "Cod_BuildingFinishingLevel");

            migrationBuilder.DropTable(
                name: "Cod_BuildingStatus");

            migrationBuilder.DropTable(
                name: "Cod_BuildingTypes");

            migrationBuilder.DropTable(
                name: "Cod_City");

            migrationBuilder.DropTable(
                name: "Cod_Colors");

            migrationBuilder.DropTable(
                name: "Cod_ContractType");

            migrationBuilder.DropTable(
                name: "Cod_DailyAssistance");

            migrationBuilder.DropTable(
                name: "Cod_ElectInsurStatus");

            migrationBuilder.DropTable(
                name: "Cod_Explanations");

            migrationBuilder.DropTable(
                name: "Cod_FurnitAndEqupmnts");

            migrationBuilder.DropTable(
                name: "Cod_InstallmentTempsDetail");

            migrationBuilder.DropTable(
                name: "Cod_InsurCovTypes");

            migrationBuilder.DropTable(
                name: "Cod_LandPermitActivJoin");

            migrationBuilder.DropTable(
                name: "Cod_LandPosJoin");

            migrationBuilder.DropTable(
                name: "Cod_LandRetainResJoin");

            migrationBuilder.DropTable(
                name: "Cod_LandStatus");

            migrationBuilder.DropTable(
                name: "Cod_LandTypes");

            migrationBuilder.DropTable(
                name: "Cod_MaintenanceTypes");

            migrationBuilder.DropTable(
                name: "Cod_NonRenewalReasons");

            migrationBuilder.DropTable(
                name: "Cod_OperatingOrders");

            migrationBuilder.DropTable(
                name: "Cod_PaymentTerms");

            migrationBuilder.DropTable(
                name: "Cod_PaymentTypes");

            migrationBuilder.DropTable(
                name: "Cod_PostalCodes");

            migrationBuilder.DropTable(
                name: "Cod_RentCase");

            migrationBuilder.DropTable(
                name: "Cod_SavingFiles");

            migrationBuilder.DropTable(
                name: "Cod_Services");

            migrationBuilder.DropTable(
                name: "Cod_Shelves");

            migrationBuilder.DropTable(
                name: "Cod_SubRegion");

            migrationBuilder.DropTable(
                name: "Cod_TaskTypes");

            migrationBuilder.DropTable(
                name: "Cod_TrmsModifiRsons");

            migrationBuilder.DropTable(
                name: "Cod_UnitDegree");

            migrationBuilder.DropTable(
                name: "Cod_UnitFinishingLevel");

            migrationBuilder.DropTable(
                name: "Cod_UnitStatus");

            migrationBuilder.DropTable(
                name: "Cod_UnitTypes");

            migrationBuilder.DropTable(
                name: "Cod_UntMntanItmBylndownrTnant");

            migrationBuilder.DropTable(
                name: "Contr_InstallMentDetail");

            migrationBuilder.DropTable(
                name: "CRM_LeadsMembersDetails");

            migrationBuilder.DropTable(
                name: "CRM_LeadsMembersJoin");

            migrationBuilder.DropTable(
                name: "CRM_SalesPlanDetail");

            migrationBuilder.DropTable(
                name: "CRM_Survey");

            migrationBuilder.DropTable(
                name: "CRM_SurveyMemberJoin");

            migrationBuilder.DropTable(
                name: "CRM_TeamMembers");

            migrationBuilder.DropTable(
                name: "CRM_VisitSurveys");

            migrationBuilder.DropTable(
                name: "G_PrintLog");

            migrationBuilder.DropTable(
                name: "G_USER_MODULE");

            migrationBuilder.DropTable(
                name: "G_UserGroups");

            migrationBuilder.DropTable(
                name: "G_UserRolePermissions");

            migrationBuilder.DropTable(
                name: "G_UserScreenFields");

            migrationBuilder.DropTable(
                name: "HR_AcheivedTargetDetails");

            migrationBuilder.DropTable(
                name: "Hr_ActivityDetailElements");

            migrationBuilder.DropTable(
                name: "Hr_Attend");

            migrationBuilder.DropTable(
                name: "Hr_AttendanceElements");

            migrationBuilder.DropTable(
                name: "Hr_AttendDocDetails");

            migrationBuilder.DropTable(
                name: "Hr_AttendDocFactElements");

            migrationBuilder.DropTable(
                name: "Hr_AttendElementTrans");

            migrationBuilder.DropTable(
                name: "Hr_Attendhestory");

            migrationBuilder.DropTable(
                name: "Hr_Attendop");

            migrationBuilder.DropTable(
                name: "Hr_attendrole");

            migrationBuilder.DropTable(
                name: "Hr_DevicesCon");

            migrationBuilder.DropTable(
                name: "Hr_Education");

            migrationBuilder.DropTable(
                name: "Hr_EmpDocuments");

            migrationBuilder.DropTable(
                name: "Hr_EmpElementPeriodBalance");

            migrationBuilder.DropTable(
                name: "Hr_EmpLoanRequest");

            migrationBuilder.DropTable(
                name: "Hr_EmpLoans");

            migrationBuilder.DropTable(
                name: "Hr_EmpMovePromotDetail");

            migrationBuilder.DropTable(
                name: "Hr_EmpSalaryDistribution");

            migrationBuilder.DropTable(
                name: "Hr_EmpSalaryTypes");

            migrationBuilder.DropTable(
                name: "Hr_EmpsSalaryTemp");

            migrationBuilder.DropTable(
                name: "Hr_EmpVacationsDetails");

            migrationBuilder.DropTable(
                name: "Hr_KPIS");

            migrationBuilder.DropTable(
                name: "Hr_LeavePermision");

            migrationBuilder.DropTable(
                name: "Hr_LeavPermissionRequest");

            migrationBuilder.DropTable(
                name: "HR_MobileSetting");

            migrationBuilder.DropTable(
                name: "Hr_PeriodTableDetail");

            migrationBuilder.DropTable(
                name: "Hr_PeriodTablePolicy");

            migrationBuilder.DropTable(
                name: "Hr_PeriodTableVacations");

            migrationBuilder.DropTable(
                name: "Hr_RewardAndPenalty");

            migrationBuilder.DropTable(
                name: "Hr_SalaryCalcMethod");

            migrationBuilder.DropTable(
                name: "Hr_SalaryIssueDetails");

            migrationBuilder.DropTable(
                name: "Hr_SalaryIssueDistribution");

            migrationBuilder.DropTable(
                name: "Hr_Segments");

            migrationBuilder.DropTable(
                name: "hr_sysgenral");

            migrationBuilder.DropTable(
                name: "Hr_syssettinges");

            migrationBuilder.DropTable(
                name: "HR_Targets");

            migrationBuilder.DropTable(
                name: "Hr_Termination");

            migrationBuilder.DropTable(
                name: "Hr_VacationDoc");

            migrationBuilder.DropTable(
                name: "Hr_VacationEdit");

            migrationBuilder.DropTable(
                name: "Hr_VacationRequest");

            migrationBuilder.DropTable(
                name: "La_Lands");

            migrationBuilder.DropTable(
                name: "La_PropSerial");

            migrationBuilder.DropTable(
                name: "Mob_SalesInvoiceItemCard");

            migrationBuilder.DropTable(
                name: "Ms_Attachments");

            migrationBuilder.DropTable(
                name: "MS_BoxCurrency");

            migrationBuilder.DropTable(
                name: "MS_BoxTransferDetail");

            migrationBuilder.DropTable(
                name: "Ms_BoxUsers");

            migrationBuilder.DropTable(
                name: "MS_CashTransactionDetail");

            migrationBuilder.DropTable(
                name: "Ms_CheqBooks");

            migrationBuilder.DropTable(
                name: "Ms_ChequesOpenning");

            migrationBuilder.DropTable(
                name: "Ms_ChequeTransfer");

            migrationBuilder.DropTable(
                name: "Ms_ChequeTransferDetail");

            migrationBuilder.DropTable(
                name: "Ms_Commission");

            migrationBuilder.DropTable(
                name: "MS_Company");

            migrationBuilder.DropTable(
                name: "Ms_CurrencyCategoryJoin");

            migrationBuilder.DropTable(
                name: "Ms_CurrencyDailyRateChanges");

            migrationBuilder.DropTable(
                name: "Ms_CurrencyRate");

            migrationBuilder.DropTable(
                name: "Ms_CusromerUsers");

            migrationBuilder.DropTable(
                name: "Ms_CustImgs");

            migrationBuilder.DropTable(
                name: "Ms_CustomerBranches");

            migrationBuilder.DropTable(
                name: "Ms_CustomerContacts");

            migrationBuilder.DropTable(
                name: "Ms_CustomerFollowUpTypes");

            migrationBuilder.DropTable(
                name: "Ms_CustomersFollowUp");

            migrationBuilder.DropTable(
                name: "Ms_DeliverSalesInvoiceExpenses");

            migrationBuilder.DropTable(
                name: "Ms_DeliverSalesInvoiceMultiAccounts");

            migrationBuilder.DropTable(
                name: "Ms_Description");

            migrationBuilder.DropTable(
                name: "MS_Expenses");

            migrationBuilder.DropTable(
                name: "MS_ItemAlternatives");

            migrationBuilder.DropTable(
                name: "Ms_ItemCardDefaulPartitions");

            migrationBuilder.DropTable(
                name: "Ms_ItemCardOffers");

            migrationBuilder.DropTable(
                name: "Ms_ItemCardVendors");

            migrationBuilder.DropTable(
                name: "Ms_ItemCollection");

            migrationBuilder.DropTable(
                name: "MS_ItemCostHistory");

            migrationBuilder.DropTable(
                name: "MS_ItemImages");

            migrationBuilder.DropTable(
                name: "Ms_ItemPartition");

            migrationBuilder.DropTable(
                name: "Ms_ItemPricintDetail");

            migrationBuilder.DropTable(
                name: "MS_ItemSerials");

            migrationBuilder.DropTable(
                name: "MS_ItemSerialsTransactions");

            migrationBuilder.DropTable(
                name: "Ms_ItemShortage");

            migrationBuilder.DropTable(
                name: "Ms_ItemStartQty");

            migrationBuilder.DropTable(
                name: "Ms_ItemUnitPackingJoin");

            migrationBuilder.DropTable(
                name: "MS_ItemVendors");

            migrationBuilder.DropTable(
                name: "Ms_JewelryPricing");

            migrationBuilder.DropTable(
                name: "Ms_KeeperBankDetail");

            migrationBuilder.DropTable(
                name: "Ms_LetterOfGuaranteeCategory");

            migrationBuilder.DropTable(
                name: "Ms_LetterOfGuaranteeStatus");

            migrationBuilder.DropTable(
                name: "Ms_LetterOfGuaranteeTrans");

            migrationBuilder.DropTable(
                name: "Ms_LetterOfGuaranteeTypes");

            migrationBuilder.DropTable(
                name: "MS_LotNumberConfiguration");

            migrationBuilder.DropTable(
                name: "MS_LotNumberExpiry");

            migrationBuilder.DropTable(
                name: "Ms_MobSettings");

            migrationBuilder.DropTable(
                name: "Ms_PaymentNoteCurrencies");

            migrationBuilder.DropTable(
                name: "Ms_PaymentNoteItems");

            migrationBuilder.DropTable(
                name: "MS_PettyCashDetails");

            migrationBuilder.DropTable(
                name: "Ms_PettyPaymentJoin");

            migrationBuilder.DropTable(
                name: "Ms_PosItemCategory");

            migrationBuilder.DropTable(
                name: "Ms_PosPaymentMethods");

            migrationBuilder.DropTable(
                name: "Ms_POSSettings");

            migrationBuilder.DropTable(
                name: "Ms_PosShifts");

            migrationBuilder.DropTable(
                name: "Ms_PosSpecialItems");

            migrationBuilder.DropTable(
                name: "Ms_PurchaseInvoiceCostReceived");

            migrationBuilder.DropTable(
                name: "MS_PurchaseInvoiceExpenses");

            migrationBuilder.DropTable(
                name: "MS_PurchasInvoiceCurrencies");

            migrationBuilder.DropTable(
                name: "MS_PurchasInvoiceMultiAccounts");

            migrationBuilder.DropTable(
                name: "Ms_PurchInvVehicleJobOrderJoin");

            migrationBuilder.DropTable(
                name: "MS_PurchOrderDetail");

            migrationBuilder.DropTable(
                name: "MS_PurchOrderReqDetail");

            migrationBuilder.DropTable(
                name: "Ms_ReceiptNoteCurrencies");

            migrationBuilder.DropTable(
                name: "Ms_RecPayDocJoin");

            migrationBuilder.DropTable(
                name: "MS_ReturnPurchaseCurrencies");

            migrationBuilder.DropTable(
                name: "Ms_ReturnPurchaseExpenses");

            migrationBuilder.DropTable(
                name: "MS_ReturnPurchaseMultiAccounts");

            migrationBuilder.DropTable(
                name: "MS_ReturnSalesCurrencies");

            migrationBuilder.DropTable(
                name: "Ms_ReturnSalesExpenses");

            migrationBuilder.DropTable(
                name: "MS_ReturnSalesMultiAccounts");

            migrationBuilder.DropTable(
                name: "Ms_ReturnSalesReq");

            migrationBuilder.DropTable(
                name: "Ms_ReturnSalesReqItemCard");

            migrationBuilder.DropTable(
                name: "Ms_SalesDepartments");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvJobOrderJoin");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceCostDeliver");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceCurrencies");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceExpenses");

            migrationBuilder.DropTable(
                name: "MS_SalesInvoiceItemCard_Deleted");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceMultiAccounts");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceQualityDeliveryDocs");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceQualityMissedItems");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvVehiclJobOrderJoin");

            migrationBuilder.DropTable(
                name: "Ms_SalesItemsOffersDetails");

            migrationBuilder.DropTable(
                name: "Ms_SalesOfferItemCard");

            migrationBuilder.DropTable(
                name: "Ms_SalesOfferItemRequest");

            migrationBuilder.DropTable(
                name: "MS_Settings");

            migrationBuilder.DropTable(
                name: "MS_StockRecriptExpenses");

            migrationBuilder.DropTable(
                name: "MS_StockRecriptMultiAccounts");

            migrationBuilder.DropTable(
                name: "Ms_TermsCostCenter");

            migrationBuilder.DropTable(
                name: "Ms_TermsDetails");

            migrationBuilder.DropTable(
                name: "MS_UpdateReplication");

            migrationBuilder.DropTable(
                name: "MS_UserAuthentications");

            migrationBuilder.DropTable(
                name: "Ms_VendImgs");

            migrationBuilder.DropTable(
                name: "Ms_VendorBranches");

            migrationBuilder.DropTable(
                name: "Ms_VendorContacts");

            migrationBuilder.DropTable(
                name: "Ms_VendorUsers");

            migrationBuilder.DropTable(
                name: "Ms_WeightcardItems");

            migrationBuilder.DropTable(
                name: "MsGA_Capacity");

            migrationBuilder.DropTable(
                name: "MsGA_LetterExportDetail");

            migrationBuilder.DropTable(
                name: "MsGA_LetterFayumDetail");

            migrationBuilder.DropTable(
                name: "MsGA_LetterNormalDetail");

            migrationBuilder.DropTable(
                name: "MsGA_LetterQuery");

            migrationBuilder.DropTable(
                name: "MsGA_LetterTax");

            migrationBuilder.DropTable(
                name: "MsGA_LetterTempTax");

            migrationBuilder.DropTable(
                name: "MsGA_MachineType");

            migrationBuilder.DropTable(
                name: "MsGA_Moror");

            migrationBuilder.DropTable(
                name: "MsGA_MotorSNDetail");

            migrationBuilder.DropTable(
                name: "MsGA_PeriodicBookDetail");

            migrationBuilder.DropTable(
                name: "MsGA_ShipmentDetail");

            migrationBuilder.DropTable(
                name: "Names");

            migrationBuilder.DropTable(
                name: "ou");

            migrationBuilder.DropTable(
                name: "Print_BoxType");

            migrationBuilder.DropTable(
                name: "Print_BreakType");

            migrationBuilder.DropTable(
                name: "Print_Closing");

            migrationBuilder.DropTable(
                name: "Print_ConnectionType");

            migrationBuilder.DropTable(
                name: "Print_CoverType");

            migrationBuilder.DropTable(
                name: "Print_CutterTypeId");

            migrationBuilder.DropTable(
                name: "Print_Distribution");

            migrationBuilder.DropTable(
                name: "Print_EditType");

            migrationBuilder.DropTable(
                name: "Print_FaceType");

            migrationBuilder.DropTable(
                name: "Print_GofferType");

            migrationBuilder.DropTable(
                name: "Print_GradeType");

            migrationBuilder.DropTable(
                name: "Print_GramType");

            migrationBuilder.DropTable(
                name: "Print_Industry");

            migrationBuilder.DropTable(
                name: "Print_JobOrderCreationType");

            migrationBuilder.DropTable(
                name: "Print_PadingType");

            migrationBuilder.DropTable(
                name: "Print_PricingDetails");

            migrationBuilder.DropTable(
                name: "Print_QoutationDetailsItems");

            migrationBuilder.DropTable(
                name: "Print_Sectors");

            migrationBuilder.DropTable(
                name: "Print_SizeType");

            migrationBuilder.DropTable(
                name: "Print_StickyType");

            migrationBuilder.DropTable(
                name: "Print_Stocking");

            migrationBuilder.DropTable(
                name: "Prod_AttributeValue");

            migrationBuilder.DropTable(
                name: "Prod_BillOfMaterialItems");

            migrationBuilder.DropTable(
                name: "Prod_BillOfMaterialSecondaryItems");

            migrationBuilder.DropTable(
                name: "Prod_EmpEquipDistribDetail");

            migrationBuilder.DropTable(
                name: "Prod_EmpJobOrderDistribDetail");

            migrationBuilder.DropTable(
                name: "Prod_EquipProfile");

            migrationBuilder.DropTable(
                name: "Prod_ItemAttributesBatchesDetails");

            migrationBuilder.DropTable(
                name: "Prod_ItemAttributsJoin");

            migrationBuilder.DropTable(
                name: "Prod_ItemBatchPartition");

            migrationBuilder.DropTable(
                name: "Prod_ItemcardExpenses");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderClosing");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderEmpCostDocDetail");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderEquipCostDocDetail");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderEquipment");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderExpenses");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderGoStock");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderJobs");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderMaterials");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderProducts");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderPurchaseInvoices");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderScrap");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderServices");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderTasks");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderType");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderWorkFlow");

            migrationBuilder.DropTable(
                name: "Prod_JoinTaskEquipments");

            migrationBuilder.DropTable(
                name: "Prod_JoinTaskJob");

            migrationBuilder.DropTable(
                name: "Prod_ProductionLineDetails");

            migrationBuilder.DropTable(
                name: "Prod_ProductionOrderDetail");

            migrationBuilder.DropTable(
                name: "Prod_RecipeDetail");

            migrationBuilder.DropTable(
                name: "Prod_Settings");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderEquipment");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderExpenses");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderItemRecQualityDocs");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderMaterials");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderProdItems");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderScrap");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrderServices");

            migrationBuilder.DropTable(
                name: "Proj_Accounts");

            migrationBuilder.DropTable(
                name: "Proj_EstimateItems");

            migrationBuilder.DropTable(
                name: "Proj_Expenses");

            migrationBuilder.DropTable(
                name: "Proj_Fund");

            migrationBuilder.DropTable(
                name: "Proj_ProjDocuments");

            migrationBuilder.DropTable(
                name: "Proj_ProjectItemsVendors");

            migrationBuilder.DropTable(
                name: "Proj_ProjExploitJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjInsurance");

            migrationBuilder.DropTable(
                name: "Proj_ProjInsuranceUnit");

            migrationBuilder.DropTable(
                name: "Proj_ProjItemEmpTaskJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjOccupTypeJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjOwnerJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjParkingJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjPermitActivityJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjPerspectiveJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjPicture");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitDocument");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitExploitJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitInstallTemp");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitOccupTypeJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitOwnerJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitPermitActivityJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitPerspectiveJoin");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitPicture");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitService");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnitSubUnits");

            migrationBuilder.DropTable(
                name: "Proj_RealItems");

            migrationBuilder.DropTable(
                name: "Proj_ReInstallment");

            migrationBuilder.DropTable(
                name: "Proj_ReserveUnitDocuments");

            migrationBuilder.DropTable(
                name: "Proj_ReserveUnitOwners");

            migrationBuilder.DropTable(
                name: "Proj_ReserveUnitSellers");

            migrationBuilder.DropTable(
                name: "Proj_ReservInstallments");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractAdds");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractDetail");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractDiscounts");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorContractAdds");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorContractDetails");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorContractDiscounts");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorExitractAdds");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorExitractDetail");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorExitractDiscounts");

            migrationBuilder.DropTable(
                name: "Proj_TenderExecutionExitractDetail");

            migrationBuilder.DropTable(
                name: "Proj_TenderItems");

            migrationBuilder.DropTable(
                name: "Proj_TenderItemsCategory");

            migrationBuilder.DropTable(
                name: "Proj_TenderOfferDetail");

            migrationBuilder.DropTable(
                name: "Proj_TenderOwnerExitractAdds");

            migrationBuilder.DropTable(
                name: "Proj_TenderOwnerExitractDetail");

            migrationBuilder.DropTable(
                name: "Proj_TenderOwnerExitractDiscounts");

            migrationBuilder.DropTable(
                name: "Proj_TenderPlanDetails");

            migrationBuilder.DropTable(
                name: "Proj_TenderPlanDistributionDetails");

            migrationBuilder.DropTable(
                name: "Proj_TenderQoutationDetails");

            migrationBuilder.DropTable(
                name: "Proj_TendersDetails");

            migrationBuilder.DropTable(
                name: "Proj_TendersReviewReasons");

            migrationBuilder.DropTable(
                name: "Proj_UnitConcession");

            migrationBuilder.DropTable(
                name: "Proj_UnitHistoryLog");

            migrationBuilder.DropTable(
                name: "Proj_UnitReplacement");

            migrationBuilder.DropTable(
                name: "Proj_UnitReservationGuarantors");

            migrationBuilder.DropTable(
                name: "Proj_UnitReservationHistory");

            migrationBuilder.DropTable(
                name: "Quality_Categories");

            migrationBuilder.DropTable(
                name: "Quality_ItemDeliverDetails");

            migrationBuilder.DropTable(
                name: "Quality_ItemDeliveryPackages");

            migrationBuilder.DropTable(
                name: "Quality_ItemRecCheckDetail");

            migrationBuilder.DropTable(
                name: "Quality_ItemReceivTypes");

            migrationBuilder.DropTable(
                name: "Quality_ItemRecieveDetails");

            migrationBuilder.DropTable(
                name: "Quality_ItemRecPackages");

            migrationBuilder.DropTable(
                name: "Repair_JobOrderComments");

            migrationBuilder.DropTable(
                name: "Repair_JobOrderEmps");

            migrationBuilder.DropTable(
                name: "Repair_JobOrderItems");

            migrationBuilder.DropTable(
                name: "Repair_JobOrderScrapItems");

            migrationBuilder.DropTable(
                name: "Repair_JobOrederExpenses");

            migrationBuilder.DropTable(
                name: "Sr_Brands");

            migrationBuilder.DropTable(
                name: "Sr_EmpServicTypes");

            migrationBuilder.DropTable(
                name: "Sr_Extension");

            migrationBuilder.DropTable(
                name: "Sr_FlateRate");

            migrationBuilder.DropTable(
                name: "Sr_Flight");

            migrationBuilder.DropTable(
                name: "Sr_Harbors");

            migrationBuilder.DropTable(
                name: "Sr_JobAdditionalCost");

            migrationBuilder.DropTable(
                name: "Sr_JobComments");

            migrationBuilder.DropTable(
                name: "Sr_JobExtrnalExpens");

            migrationBuilder.DropTable(
                name: "Sr_JobFiles");

            migrationBuilder.DropTable(
                name: "Sr_JobSparts");

            migrationBuilder.DropTable(
                name: "Sr_JobSWages");

            migrationBuilder.DropTable(
                name: "Sr_Malfunctions");

            migrationBuilder.DropTable(
                name: "Sr_ProductsTypes");

            migrationBuilder.DropTable(
                name: "Sr_ReceptionImages");

            migrationBuilder.DropTable(
                name: "Sr_ReciptionDetail");

            migrationBuilder.DropTable(
                name: "Sr_ReqOfQoutation");

            migrationBuilder.DropTable(
                name: "Sr_ServiceDistributionDetails");

            migrationBuilder.DropTable(
                name: "Sr_ServiceRequest");

            migrationBuilder.DropTable(
                name: "Sr_ServiceRequestResources");

            migrationBuilder.DropTable(
                name: "Sr_ShippingDeclaration");

            migrationBuilder.DropTable(
                name: "Sr_TaskEmp");

            migrationBuilder.DropTable(
                name: "Sr_TaskItem");

            migrationBuilder.DropTable(
                name: "Sr_TrafficLinePriceList");

            migrationBuilder.DropTable(
                name: "Sr_Transportation");

            migrationBuilder.DropTable(
                name: "Sr_TripAccomDetail");

            migrationBuilder.DropTable(
                name: "Sr_TripProgramJoin");

            migrationBuilder.DropTable(
                name: "Sr_VehicleItemCard");

            migrationBuilder.DropTable(
                name: "Sr_VehicleJobOrderDetail");

            migrationBuilder.DropTable(
                name: "Sr_VehicleMovementDetails");

            migrationBuilder.DropTable(
                name: "Sr_VehicleRentPayJoin");

            migrationBuilder.DropTable(
                name: "Sr_VehicleRentPurchJoin");

            migrationBuilder.DropTable(
                name: "Sr_VehicleRentRecJoin");

            migrationBuilder.DropTable(
                name: "Sr_VehicleRentSalesInvJoin");

            migrationBuilder.DropTable(
                name: "Stock_Brokers");

            migrationBuilder.DropTable(
                name: "Stock_CapitalUpdate");

            migrationBuilder.DropTable(
                name: "Stock_CashTransfer");

            migrationBuilder.DropTable(
                name: "Stock_CashWithdrawalReasons");

            migrationBuilder.DropTable(
                name: "Stock_Dealers");

            migrationBuilder.DropTable(
                name: "Stock_OpenningBalanceDetails");

            migrationBuilder.DropTable(
                name: "Stock_PortfolioAccounts");

            migrationBuilder.DropTable(
                name: "Stock_PortfolioStockArchives");

            migrationBuilder.DropTable(
                name: "Stock_SalesPurchaseDetails");

            migrationBuilder.DropTable(
                name: "Stock_ShareholdersNames");

            migrationBuilder.DropTable(
                name: "Stock_TransferDetail");

            migrationBuilder.DropTable(
                name: "Stock_TranTypes");

            migrationBuilder.DropTable(
                name: "sys_AnalyticalCodeProccess");

            migrationBuilder.DropTable(
                name: "sys_AnalyticalCodeUpdates");

            migrationBuilder.DropTable(
                name: "sys_AnalyticalCodeUpdateTypes");

            migrationBuilder.DropTable(
                name: "Sys_Basket");

            migrationBuilder.DropTable(
                name: "Sys_Books");

            migrationBuilder.DropTable(
                name: "sys_configsms");

            migrationBuilder.DropTable(
                name: "Sys_Counter");

            migrationBuilder.DropTable(
                name: "Sys_FinancialIntervals");

            migrationBuilder.DropTable(
                name: "Sys_FinancialYearsClosing");

            migrationBuilder.DropTable(
                name: "sys_FlexLists");

            migrationBuilder.DropTable(
                name: "Sys_Naming");

            migrationBuilder.DropTable(
                name: "Sys_Notifications");

            migrationBuilder.DropTable(
                name: "Sys_NotificationTypes");

            migrationBuilder.DropTable(
                name: "Sys_RemotLogDetail");

            migrationBuilder.DropTable(
                name: "SysLog");

            migrationBuilder.DropTable(
                name: "SysRemoteBranchesLogDetaile");

            migrationBuilder.DropTable(
                name: "Tr_OpenningBalanceDetails");

            migrationBuilder.DropTable(
                name: "WorForc_Firms");

            migrationBuilder.DropTable(
                name: "WorkForc_ActionTypes");

            migrationBuilder.DropTable(
                name: "WorkForc_BloodExecludeDetails");

            migrationBuilder.DropTable(
                name: "WorkForc_FirstCustExecludeDetail");

            migrationBuilder.DropTable(
                name: "WorkForc_PassPorts");

            migrationBuilder.DropTable(
                name: "WorkForc_PassPortsArchives");

            migrationBuilder.DropTable(
                name: "WorkForc_Problems");

            migrationBuilder.DropTable(
                name: "WorkForc_Queue");

            migrationBuilder.DropTable(
                name: "WorkForc_Seasons");

            migrationBuilder.DropTable(
                name: "WorkForc_SecondCustExecludeDetail");

            migrationBuilder.DropTable(
                name: "WorkForc_TempIds");

            migrationBuilder.DropTable(
                name: "WorkForc_TemplatesDetails");

            migrationBuilder.DropTable(
                name: "WorkForc_TestResultsDetails");

            migrationBuilder.DropTable(
                name: "YearMonthes");

            migrationBuilder.DropTable(
                name: "An_AnimalDeath");

            migrationBuilder.DropTable(
                name: "An_AnimalType");

            migrationBuilder.DropTable(
                name: "An_Medicin");

            migrationBuilder.DropTable(
                name: "An_AnimalWeightRate");

            migrationBuilder.DropTable(
                name: "An_NewBorn");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Asset_AssetAddDoc");

            migrationBuilder.DropTable(
                name: "Asset_AssetDeductDoc");

            migrationBuilder.DropTable(
                name: "Asset_AssetDeliverDoc");

            migrationBuilder.DropTable(
                name: "Asset_AssetFixDoc");

            migrationBuilder.DropTable(
                name: "Asset_AssetMoveDoc");

            migrationBuilder.DropTable(
                name: "Asset_AssetReceiveDoc");

            migrationBuilder.DropTable(
                name: "Asset_AssetSettings");

            migrationBuilder.DropTable(
                name: "Asset_DepreciationDoc");

            migrationBuilder.DropTable(
                name: "BNk_BankNotice");

            migrationBuilder.DropTable(
                name: "Asset_AssetCard");

            migrationBuilder.DropTable(
                name: "Cal_Budget");

            migrationBuilder.DropTable(
                name: "Ms_BusinessPartners");

            migrationBuilder.DropTable(
                name: "Cal_CostCenters");

            migrationBuilder.DropTable(
                name: "Cod_AccountCategories");

            migrationBuilder.DropTable(
                name: "Cod_Region");

            migrationBuilder.DropTable(
                name: "Sys_City");

            migrationBuilder.DropTable(
                name: "Cod_LandPermtActiv");

            migrationBuilder.DropTable(
                name: "Cod_LandPositions");

            migrationBuilder.DropTable(
                name: "Cod_LandRetainRsons");

            migrationBuilder.DropTable(
                name: "Cod_Lands");

            migrationBuilder.DropTable(
                name: "Contr_InstallMent");

            migrationBuilder.DropTable(
                name: "CRM_Leads");

            migrationBuilder.DropTable(
                name: "CRM_LeadsMembers");

            migrationBuilder.DropTable(
                name: "CRM_SalesPlan");

            migrationBuilder.DropTable(
                name: "CRM_Teams");

            migrationBuilder.DropTable(
                name: "CRM_Visits");

            migrationBuilder.DropTable(
                name: "HR_AcheivedTargets");

            migrationBuilder.DropTable(
                name: "Hr_EmpActivityDetail");

            migrationBuilder.DropTable(
                name: "Hr_AttendanceDoc");

            migrationBuilder.DropTable(
                name: "Hr_EmpDocTypes");

            migrationBuilder.DropTable(
                name: "Hr_EmpMovePromotion");

            migrationBuilder.DropTable(
                name: "Hr_EmpVacation");

            migrationBuilder.DropTable(
                name: "Hr_SalaryIssueDoc");

            migrationBuilder.DropTable(
                name: "Hr_SalaryTypes");

            migrationBuilder.DropTable(
                name: "Mob_SalesInvoice");

            migrationBuilder.DropTable(
                name: "Ms_BankAccount");

            migrationBuilder.DropTable(
                name: "MS_BoxTransferNote");

            migrationBuilder.DropTable(
                name: "Cal_JurnalEntry");

            migrationBuilder.DropTable(
                name: "Ms_AdjustMents");

            migrationBuilder.DropTable(
                name: "MS_CurrencyCategory");

            migrationBuilder.DropTable(
                name: "MS_Customer");

            migrationBuilder.DropTable(
                name: "MS_Partition");

            migrationBuilder.DropTable(
                name: "Ms_ItemPricing");

            migrationBuilder.DropTable(
                name: "Ms_DeliverItemCard");

            migrationBuilder.DropTable(
                name: "Ms_ItemStockAdjustmentDetail");

            migrationBuilder.DropTable(
                name: "MS_PurchaseInvoiceItemCard");

            migrationBuilder.DropTable(
                name: "MS_ReturnPurchaseItem");

            migrationBuilder.DropTable(
                name: "MS_ReturnSalesItemCard");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoiceItemCard");

            migrationBuilder.DropTable(
                name: "Ms_SalesOrderItemCard");

            migrationBuilder.DropTable(
                name: "MS_StockReceiptItemCard");

            migrationBuilder.DropTable(
                name: "MS_StockTranItemCard");

            migrationBuilder.DropTable(
                name: "Ms_StockTranItemCardReq");

            migrationBuilder.DropTable(
                name: "Cod_PackingSize");

            migrationBuilder.DropTable(
                name: "Ms_KeeperBank");

            migrationBuilder.DropTable(
                name: "Ms_LetterOfGuarantee");

            migrationBuilder.DropTable(
                name: "MS_Pettycash");

            migrationBuilder.DropTable(
                name: "Ms_PurchasOrderRequest");

            migrationBuilder.DropTable(
                name: "Ms_SalesItemsOffers");

            migrationBuilder.DropTable(
                name: "Ms_SalesOfferRequest");

            migrationBuilder.DropTable(
                name: "Ms_Terms");

            migrationBuilder.DropTable(
                name: "G_Users");

            migrationBuilder.DropTable(
                name: "Ms_WeightCard");

            migrationBuilder.DropTable(
                name: "MsGA_LetterFayum");

            migrationBuilder.DropTable(
                name: "MsGA_MotorSN");

            migrationBuilder.DropTable(
                name: "MsGA_LetterNormal");

            migrationBuilder.DropTable(
                name: "MsGA_PeriodicBook");

            migrationBuilder.DropTable(
                name: "MsGA_LetterExport");

            migrationBuilder.DropTable(
                name: "MsGA_Shipment");

            migrationBuilder.DropTable(
                name: "Print_Pricing");

            migrationBuilder.DropTable(
                name: "Print_QoutationDetails");

            migrationBuilder.DropTable(
                name: "Prod_BillOfMaterial");

            migrationBuilder.DropTable(
                name: "Prod_EmpEquipDistrib");

            migrationBuilder.DropTable(
                name: "Prod_EmpJobOrderDistrib");

            migrationBuilder.DropTable(
                name: "Prod_Equipments");

            migrationBuilder.DropTable(
                name: "Prod_ItemAttributes");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderEmpCostDoc");

            migrationBuilder.DropTable(
                name: "Prod_JobOrderEquipCostDoc");

            migrationBuilder.DropTable(
                name: "Prod_ItemAttributesBatche");

            migrationBuilder.DropTable(
                name: "Prod_JobOrder");

            migrationBuilder.DropTable(
                name: "Prod_ProductionLine");

            migrationBuilder.DropTable(
                name: "Prod_ProductionOrder");

            migrationBuilder.DropTable(
                name: "Prod_Recipe");

            migrationBuilder.DropTable(
                name: "MS_Vendor");

            migrationBuilder.DropTable(
                name: "Cod_BuildingExploitation");

            migrationBuilder.DropTable(
                name: "Cod_BuildingInsuranceStatus");

            migrationBuilder.DropTable(
                name: "Cod_InsuranceCases");

            migrationBuilder.DropTable(
                name: "Cod_UnitInsuranceStatus");

            migrationBuilder.DropTable(
                name: "Prod_Tasks");

            migrationBuilder.DropTable(
                name: "Proj_ProjectItemEmpJoin");

            migrationBuilder.DropTable(
                name: "Cod_BuildOccupTypes");

            migrationBuilder.DropTable(
                name: "Cod_Parkings");

            migrationBuilder.DropTable(
                name: "Cod_BuildPermitActiv");

            migrationBuilder.DropTable(
                name: "Cod_BuildPerspective");

            migrationBuilder.DropTable(
                name: "Cod_OwnershipBonds");

            migrationBuilder.DropTable(
                name: "Cod_UnitExploitation");

            migrationBuilder.DropTable(
                name: "Cod_InstallmentTemps");

            migrationBuilder.DropTable(
                name: "Cod_UnitOccupancyTypes");

            migrationBuilder.DropTable(
                name: "Cod_UnitPermittedActivity");

            migrationBuilder.DropTable(
                name: "Cod_UnitPerspective");

            migrationBuilder.DropTable(
                name: "Cod_UnitServices");

            migrationBuilder.DropTable(
                name: "Code_SubUnitTypes");

            migrationBuilder.DropTable(
                name: "Proj_ProjUnits");

            migrationBuilder.DropTable(
                name: "Proj_TenderContract");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorContract");

            migrationBuilder.DropTable(
                name: "Proj_TenderContractorExitract");

            migrationBuilder.DropTable(
                name: "Proj_TenderExecutionExitract");

            migrationBuilder.DropTable(
                name: "Proj_TenderOffer");

            migrationBuilder.DropTable(
                name: "Proj_TenderOwnerExitract");

            migrationBuilder.DropTable(
                name: "Proj_TenderPlan");

            migrationBuilder.DropTable(
                name: "Proj_TenderPlanDistribution");

            migrationBuilder.DropTable(
                name: "Proj_TenderQoutation");

            migrationBuilder.DropTable(
                name: "Proj_Tenders");

            migrationBuilder.DropTable(
                name: "Proj_UnitReservation");

            migrationBuilder.DropTable(
                name: "Quality_ItemDelivery");

            migrationBuilder.DropTable(
                name: "Quality_ItemRecieve");

            migrationBuilder.DropTable(
                name: "Prod_WorkOrder");

            migrationBuilder.DropTable(
                name: "Quality_ItemRecCheck");

            migrationBuilder.DropTable(
                name: "Repair_JobOrder");

            migrationBuilder.DropTable(
                name: "Sr_JobOrder");

            migrationBuilder.DropTable(
                name: "Sr_ServiceDistribution");

            migrationBuilder.DropTable(
                name: "Sr_Tasks");

            migrationBuilder.DropTable(
                name: "Sr_ContainerTypes");

            migrationBuilder.DropTable(
                name: "Sr_TrafficLines");

            migrationBuilder.DropTable(
                name: "Sr_Accomodation");

            migrationBuilder.DropTable(
                name: "Sr_Programs");

            migrationBuilder.DropTable(
                name: "Sr_Drivers");

            migrationBuilder.DropTable(
                name: "Sr_VehicleJobOrder");

            migrationBuilder.DropTable(
                name: "Sr_VehicleMovement");

            migrationBuilder.DropTable(
                name: "MS_PaymentNote");

            migrationBuilder.DropTable(
                name: "Ms_ReceiptNote");

            migrationBuilder.DropTable(
                name: "Sr_VehicleRenalContract");

            migrationBuilder.DropTable(
                name: "Stock_OpenningBalance");

            migrationBuilder.DropTable(
                name: "Cal_AccountChart");

            migrationBuilder.DropTable(
                name: "Stock_Archives");

            migrationBuilder.DropTable(
                name: "Stock_PortfolioStocks");

            migrationBuilder.DropTable(
                name: "Stock_SalesPurchase");

            migrationBuilder.DropTable(
                name: "Stock_Transfer");

            migrationBuilder.DropTable(
                name: "Sys_FinancialYears");

            migrationBuilder.DropTable(
                name: "Sys_RemotTranLog");

            migrationBuilder.DropTable(
                name: "Sys_RemotBranchesLog");

            migrationBuilder.DropTable(
                name: "Tr_OpenningBalance");

            migrationBuilder.DropTable(
                name: "WorkForc_BloodExeclude");

            migrationBuilder.DropTable(
                name: "WorkForc_FirstCustExeclude");

            migrationBuilder.DropTable(
                name: "WorkForc_SecondCustExeclude");

            migrationBuilder.DropTable(
                name: "WorkForc_Templates");

            migrationBuilder.DropTable(
                name: "WorkForc_TestResults");

            migrationBuilder.DropTable(
                name: "Asset_AssetCategory");

            migrationBuilder.DropTable(
                name: "Ms_BusinessPartnerCategory");

            migrationBuilder.DropTable(
                name: "Ms_BusinessPartnerType");

            migrationBuilder.DropTable(
                name: "Cod_Country");

            migrationBuilder.DropTable(
                name: "CRM_LeadTypes");

            migrationBuilder.DropTable(
                name: "CRM_MarketChannels");

            migrationBuilder.DropTable(
                name: "CRM_VisitTypes");

            migrationBuilder.DropTable(
                name: "Hr_EmpActivity");

            migrationBuilder.DropTable(
                name: "MS_CustomerCategory");

            migrationBuilder.DropTable(
                name: "Ms_CustomerTypes");

            migrationBuilder.DropTable(
                name: "MS_Stores");

            migrationBuilder.DropTable(
                name: "Ms_DeliverSalesInvoice");

            migrationBuilder.DropTable(
                name: "Ms_ItemStockAdjustment");

            migrationBuilder.DropTable(
                name: "Ms_SalesOrder");

            migrationBuilder.DropTable(
                name: "MS_StockRecript");

            migrationBuilder.DropTable(
                name: "Ms_ItemUnit");

            migrationBuilder.DropTable(
                name: "MS_StockTransferNote");

            migrationBuilder.DropTable(
                name: "Ms_StockTransferNoteRequest");

            migrationBuilder.DropTable(
                name: "G_UserRole");

            migrationBuilder.DropTable(
                name: "Print_Qoutation");

            migrationBuilder.DropTable(
                name: "MS_Currency");

            migrationBuilder.DropTable(
                name: "MS_VendorCategory");

            migrationBuilder.DropTable(
                name: "Ms_VendorTypes");

            migrationBuilder.DropTable(
                name: "Hr_Employees");

            migrationBuilder.DropTable(
                name: "Proj_ProjectItemsJoin");

            migrationBuilder.DropTable(
                name: "Sr_Reciption");

            migrationBuilder.DropTable(
                name: "Sr_ServiceTypes");

            migrationBuilder.DropTable(
                name: "Sr_Complaints");

            migrationBuilder.DropTable(
                name: "Sr_Hotels");

            migrationBuilder.DropTable(
                name: "Sr_Trips");

            migrationBuilder.DropTable(
                name: "Sr_Vehicles");

            migrationBuilder.DropTable(
                name: "Sr_VheicleJobOrderType");

            migrationBuilder.DropTable(
                name: "MS_PurchasInvoice");

            migrationBuilder.DropTable(
                name: "MS_ReturnSales");

            migrationBuilder.DropTable(
                name: "MS_ReturnPurchase");

            migrationBuilder.DropTable(
                name: "Ms_SalesInvoice");

            migrationBuilder.DropTable(
                name: "Sys_AnalyticalCodes");

            migrationBuilder.DropTable(
                name: "Stock_Portfolio");

            migrationBuilder.DropTable(
                name: "Stock_Stocks");

            migrationBuilder.DropTable(
                name: "Sys_Countries");

            migrationBuilder.DropTable(
                name: "MS_BoxBank");

            migrationBuilder.DropTable(
                name: "MS_ItemCard");

            migrationBuilder.DropTable(
                name: "Prod_BasicUnits");

            migrationBuilder.DropTable(
                name: "Hr_Departments");

            migrationBuilder.DropTable(
                name: "Hr_EmpGroups");

            migrationBuilder.DropTable(
                name: "Hr_Jobs");

            migrationBuilder.DropTable(
                name: "Hr_PeriodsTables");

            migrationBuilder.DropTable(
                name: "Hr_Shifts");

            migrationBuilder.DropTable(
                name: "Proj_ProjectItems");

            migrationBuilder.DropTable(
                name: "Proj_Projects");

            migrationBuilder.DropTable(
                name: "MSGA_City");

            migrationBuilder.DropTable(
                name: "Sr_Garage");

            migrationBuilder.DropTable(
                name: "Sr_VehicleShapes");

            migrationBuilder.DropTable(
                name: "Sr_VehicleTypes");

            migrationBuilder.DropTable(
                name: "Sr_Warranty");

            migrationBuilder.DropTable(
                name: "Ms_PurchasOrder");

            migrationBuilder.DropTable(
                name: "MS_Taxes");

            migrationBuilder.DropTable(
                name: "Ms_SalesOffer");

            migrationBuilder.DropTable(
                name: "Stock_Categories");

            migrationBuilder.DropTable(
                name: "Stock_Markets");

            migrationBuilder.DropTable(
                name: "Stock_Sectors");

            migrationBuilder.DropTable(
                name: "MS_ItemCategory");
        }
    }
}
